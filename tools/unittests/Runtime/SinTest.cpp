#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Sin, test_sin_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-0.8414709568023682, 0.0, 0.8414709568023682};
  ONNC_RUNTIME_sin_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Sin, test_sin) {
  const float input_0[3][4][5] = {
      {{-1.3872052431106567, 0.9052091836929321, -0.4792844355106354,
        -1.6183717250823975, -0.13301222026348114},
       {-1.4589605331420898, -0.14130812883377075, 0.7274156212806702,
        0.3540351390838623, 0.7610682845115662},
       {0.7708898186683655, 0.07399647682905197, 1.9840699434280396,
        0.7355363368988037, 0.3703773319721222},
       {0.43598005175590515, 0.5671395063400269, 0.47374626994132996,
        -0.0963653102517128, 0.47097015380859375}},
      {{0.7423168420791626, -0.7185212969779968, 0.2110266536474228,
        -0.08718343824148178, 0.7117754817008972},
       {-0.02180139347910881, -2.4401180744171143, -0.03152971714735031,
        0.9950785040855408, -0.7300368547439575},
       {-0.16681022942066193, -0.48772773146629333, -0.3251594007015228,
        1.003075361251831, 0.3264235258102417},
       {1.6850471496582031, 0.7967074513435364, -1.5674834251403809,
        0.34995797276496887, -0.5287660956382751}},
      {{-1.621170997619629, 0.5557254552841187, -1.5785186290740967,
        -0.1939326673746109, -3.1960999965667725},
       {-1.4360289573669434, 1.3745383024215698, -0.9430446624755859,
        0.3018735945224762, 0.3692205846309662},
       {2.05583119392395, 0.8224564790725708, 0.7977056503295898,
        0.04247325658798218, -0.8284012675285339},
       {-1.0525195598602295, -1.1097931861877441, -1.0347402095794678,
        0.7456841468811035, -0.5398589968681335}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-0.9831944108009338, 0.7865543365478516, -0.461144357919693,
        -0.9988685250282288, -0.13262034952640533},
       {-0.9937528967857361, -0.14083832502365112, 0.6649416089057922,
        0.3466854989528656, 0.6896953582763672},
       {0.6967737674713135, 0.07392896711826324, 0.9158110022544861,
        0.6709849238395691, 0.36196720600128174},
       {0.42229896783828735, 0.5372216105461121, 0.45622316002845764,
        -0.09621623158454895, 0.4537510275840759}},
      {{0.6759970188140869, -0.6582722663879395, 0.20946389436721802,
        -0.08707303553819656, 0.6531792283058167},
       {-0.021799666807055473, -0.6453447937965393, -0.03152449429035187,
        0.8388016819953918, -0.6668971180915833},
       {-0.16603770852088928, -0.46861976385116577, -0.31945982575416565,
        0.8431286215782166, 0.3206574618816376},
       {0.9934804439544678, 0.7150582671165466, -0.9999945163726807,
        0.34285831451416016, -0.5044683218002319}},
      {{-0.9987314939498901, 0.5275596976280212, -0.9999701976776123,
        -0.19271932542324066, 0.054480355232954025},
       {-0.9909326434135437, 0.9808031320571899, -0.8093500733375549,
        0.29730960726737976, 0.36088865995407104},
       {0.884658694267273, 0.7328194975852966, 0.7157557010650635,
        0.04246048629283905, -0.7368514537811279},
       {-0.8686741590499878, -0.8956066966056824, -0.8597297072410583,
        0.6784745454788208, -0.5140150189399719}}};
  ONNC_RUNTIME_sin_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Div, test_div_example)
{
  const float   input_0[]      = {3.0, 4.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {2};
  const float   input_1[]      = {1.0, 2.0};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {2};
  float         output_0[2];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {2};
  const float   answer_0[]      = {3.0, 2.0};
  using dragonite::norm;

  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 2) <= 1e-5 * norm(answer_0, 2));
}

SKYPAT_F(Operator_Div, test_div)
{
  const float input_0[] = {
    0.85568714, -1.4396421, 0.03565403,  -0.3409943,  -0.05721278, 1.1828951,   0.213089,     -0.27564752, 1.4024626,
    0.06927521, 2.37763,    -0.11779777, 0.6251775,   -0.13093297, -0.86010486, -0.37595952,  -0.22853616, -1.1307695,
    1.416001,   0.17887804, -0.27048466, -0.36269075, 0.840869,    0.6346469,   -0.124194525, 0.7360353,   -0.51489383,
    -1.1454766, 0.68592525, -1.6618087,  0.1841827,   0.024646232, -0.73203653, -0.6598163,   -1.7202042,  -0.61521554,
    -1.6968889, 0.08203625, -0.6898866,  -0.3388234,  0.5904502,   0.14095391,  2.301948,     0.27492127,  1.4193112,
    0.46980202, -1.3454454, -0.08377677, 0.7965761,   1.2628314,   0.45707026,  0.65372866,   -3.5341167,  0.2212374,
    -1.9185847, -2.4283345, 0.7077891,   0.23174387,  0.9345309,   -0.42015475};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {
    1.8363525, 1.7229364, 1.2995101, 1.9741738, 1.8713658, 1.6375997, 1.1719168, 1.3899506, 1.2511773, 1.3699507,
    1.4370973, 1.0400679, 1.9142897, 1.2453985, 1.3667655, 1.9870324, 1.6894298, 1.4214599, 1.8942082, 1.7775928,
    1.8137181, 1.4178959, 1.5992059, 1.4235593, 1.451925,  1.5469648, 1.5721881, 1.2035091, 1.5612258, 1.2736766,
    1.9115918, 1.8354257, 1.1938806, 1.413424,  1.4822738, 1.0292051, 1.255395,  1.3713518, 1.0034015, 1.9079974,
    1.5222673, 1.8426797, 1.5381339, 1.1171888, 1.6142288, 1.4105749, 1.9644761, 1.8581724, 1.8551557, 1.2600162,
    1.9626637, 1.6037276, 1.9826233, 1.5824928, 1.5897069, 1.7021539, 1.6415832, 1.7613349, 1.5373731, 1.4936981};
  const int32_t input_1_ndim   = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {0.46597108,  -0.8355747,  0.027436517, -0.1727276,   -0.03057274, 0.7223347,    0.18182945,
                            -0.1983146,  1.1209143,   0.050567668, 1.654467,     -0.11325969, 0.32658458,   -0.10513339,
                            -0.6292995,  -0.18920654, -0.13527414, -0.79549867,  0.74754244,  0.10062937,   -0.14913268,
                            -0.25579503, 0.5258041,   0.44581696,  -0.085537836, 0.47579318,  -0.32750142,  -0.95178056,
                            0.43935046,  -1.3047336,  0.09635044,  0.013428073,  -0.6131573,  -0.46682122,  -1.1605172,
                            -0.597758,   -1.3516773,  0.059821445, -0.6875479,   -0.17758065, 0.38787553,   0.076493986,
                            1.496585,    0.24608308,  0.8792503,   0.33305714,   -0.68488765, -0.045085575, 0.42938504,
                            1.0022343,   0.23288262,  0.40763074,  -1.7825457,   0.1398031,   -1.2068795,   -1.4266245,
                            0.4311625,   0.13157286,  0.60787517,  -0.28128493};
  using dragonite::norm;

  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_Div, test_div_bcast)
{
  const float input_0[] = {
    -1.3020511,  0.17503001,  0.6661869,   0.1300666,   0.4832837,   -0.49158135, -0.189393,  -0.014292997, -1.7284003,
    -0.37932205, 0.46945018,  0.56854856,  0.38648066,  0.45252952,  1.0056707,   -1.0533274, 0.66844326,   0.8946238,
    -0.2932291,  -1.8996851,  1.209095,    -0.44383487, -0.67728645, 0.14815985,  -2.4508274, 0.1527403,    -0.9096279,
    -1.4906479,  1.2834698,   0.82382035,  0.16084328,  0.6703017,   -1.1907997,  -1.6618296, -0.6243285,   1.7259701,
    2.473346,    -0.3865203,  -0.24499227, -0.80002296, 0.37014115,  -0.3994788,  -0.7149379, -1.0719142,   0.27967063,
    0.49015403,  -1.1116322,  0.24567258,  -0.09641475, 0.47272798,  -0.06517241, -1.3002707, -1.0817885,   1.1197547,
    0.34065616,  -0.54402065, 0.54460233,  -1.9403791,  -0.70086193, -0.43142948};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {1.7752857, 1.0038437, 1.0124989, 1.7738137, 1.5444007};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -0.7334318,   0.17435983,  0.65796316,   0.07332596, 0.31292638, -0.27690268, -0.18866782, -0.014116556,
    -0.9743979,   -0.24561116, 0.2644364,    0.5663716,  0.38170972, 0.2551167,   0.6511721,   -0.5933284,
    0.66588384,   0.8835801,   -0.16530998,  -1.2300469, 0.6810706,  -0.44213545, -0.66892564, 0.08352616,
    -1.5869116,   0.086037025, -0.906145,    -1.4722465, 0.72356516, 0.53342396,  0.09060135,  0.6677351,
    -1.1760998,   -0.93686813, -0.40425292,  0.9722211,  2.4638758,  -0.38174888, -0.13811612, -0.51801515,
    0.20849666,   -0.39794922, -0.7061123,   -0.6042992, 0.18108682, 0.27609867,  -1.1073759,  0.24263987,
    -0.054354496, 0.30609155,  -0.036710944, -1.295292,  -1.0684344, 0.6312696,   0.22057499,  -0.3064412,
    0.54251707,   -1.9164261,  -0.39511585,  -0.27935073};
  using dragonite::norm;

  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

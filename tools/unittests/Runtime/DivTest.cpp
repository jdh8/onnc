#if defined(__GNUC__) || defined(_MSC_VER)
#define restrict __restrict
#else
#define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "relative-error.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Div, test_div_example) {
  const float input_0[] = {3.0, 4.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {2};
  const float input_1[] = {1.0, 2.0};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {2};
  float output_0[2];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {2};
  const float answer_0[] = {3.0, 2.0};
  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1,
                         input_1_ndim, input_1_dims, output_0, output_0_ndim,
                         output_0_dims);
  ASSERT_TRUE(relative_error(output_0, answer_0, 2) < 1e-5f);
}

SKYPAT_F(Operator_Div, test_div) {
  const float input_0[] = {
      -2.4629593,  1.256087,    -1.3997265,  0.21781841,   0.48551577,
      0.6080406,   1.7215788,   -1.6894312,  0.45000246,   -0.21537971,
      -0.99512666, -0.65781444, 1.8357828,   -2.2280335,   -0.5928627,
      0.9440087,   -0.38834387, -1.4847836,  0.0060249465, -0.35617703,
      -0.59480125, -0.01393423, -0.7144637,  0.17341773,   0.2130792,
      -1.3457104,  1.7986873,   -0.14161825, -0.79183006,  -1.0548706,
      -1.4912027,  -0.13746475, 0.08530882,  1.1649199,    -0.9125575,
      0.19734311,  0.008646583, 1.7793311,   -1.4638678,   -0.40487635,
      -1.7593204,  -1.5713263,  -0.6115094,  -0.13792424,  0.5237457,
      -0.6306343,  -1.6369222,  -0.0755773,  0.41568613,   1.1364763,
      1.3477722,   -0.47007623, 0.051937938, 0.20030275,   0.74373984,
      0.38008365,  -0.9673065,  1.5940994,   0.019443594,  1.3684248};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[] = {
      1.6996808, 1.7002369, 1.68297,   1.5520641, 1.5449038, 1.914506,
      1.9377673, 1.1536958, 1.2764924, 1.4833937, 1.6955143, 1.5376709,
      1.0434438, 1.306233,  1.4436703, 1.7833183, 1.3816731, 1.5934494,
      1.4642942, 1.7803552, 1.910495,  1.3865199, 1.0085621, 1.4796188,
      1.0925986, 1.3582826, 1.3679088, 1.2134112, 1.9833052, 1.8140343,
      1.6400924, 1.869992,  1.7358932, 1.9786382, 1.5613981, 1.8562062,
      1.1747763, 1.8372002, 1.6270369, 1.8439752, 1.1375935, 1.1030838,
      1.1652747, 1.8494334, 1.8485394, 1.3469743, 1.0258533, 1.225486,
      1.8286111, 1.7635639, 1.7159066, 1.5350883, 1.9447813, 1.2967328,
      1.3030152, 1.9874609, 1.616333,  1.4164109, 1.6408546, 1.1719717};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float output_0[60];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {
      -1.4490716,  0.73877174,   -0.8317002,   0.14034112,  0.31426927,
      0.31759658,  0.8884343,    -1.4643645,   0.35253048,  -0.1451939,
      -0.5869173,  -0.42779925,  1.75935,      -1.7056937,  -0.41066352,
      0.52935517,  -0.28106785,  -0.9318047,   0.004114574, -0.20005953,
      -0.31133357, -0.010049787, -0.70839834,  0.11720433,  0.19502057,
      -0.99074405, 1.3149176,    -0.11671085,  -0.3992477,  -0.5815053,
      -0.9092187,  -0.07351087,  0.04914405,   0.5887483,   -0.58444893,
      0.1063153,   0.0073601953, 0.9685015,    -0.89971393, -0.21956713,
      -1.5465281,  -1.4244848,   -0.524777,    -0.07457648, 0.2833295,
      -0.46818587, -1.5956689,   -0.061671283, 0.22732341,  0.64442027,
      0.7854578,   -0.30622098,  0.026706312,  0.15446725,  0.5707837,
      0.19124082,  -0.59845746,  1.1254498,    0.011849675, 1.1676261};
  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1,
                         input_1_ndim, input_1_dims, output_0, output_0_ndim,
                         output_0_dims);
  ASSERT_TRUE(relative_error(output_0, answer_0, 60) < 1e-5f);
}

SKYPAT_F(Operator_Div, test_div_bcast) {
  const float input_0[] = {
      -0.5665387,  1.36642,     0.6343393,   1.4175106,    -1.7172785,
      0.15985027,  -0.4594321,  1.4865597,   0.20163643,   -1.2159011,
      1.4273863,   -0.42783746, 0.07354845,  0.024624031,  0.7805595,
      -0.1278796,  0.07448573,  -0.12669526, 2.5874748,    -2.580731,
      -1.3194445,  0.05641204,  -0.3717806,  0.59442574,   1.214787,
      0.21753457,  2.0864272,   1.6144203,   -0.39274102,  -1.275567,
      -0.9103945,  -0.97148347, -0.8383989,  1.8253436,    1.1636088,
      -0.20883678, -0.5200982,  0.5684341,   -1.4216645,   0.4926752,
      -0.09113861, 0.45824525,  0.43176606,  -0.022586267, -1.3700624,
      1.0421263,   0.6462671,   -0.08595185, 1.9641892,    0.002142491,
      0.42799512,  0.6889959,   1.4517219,   -2.2521346,   0.90319276,
      -0.49528122, 1.358983,    0.9264925,   0.23830585,   -0.57301575};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[] = {1.1856323, 1.3601879, 1.3203182, 1.0076526,
                           1.2398773};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {5};
  float output_0[60];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {
      -0.47783673, 1.0045818,   0.48044422,  1.4067453,    -1.385039,
      0.1348228,   -0.33777106, 1.1259102,   0.2001051,    -0.98066247,
      1.203903,    -0.31454292, 0.055705093, 0.024437023,  0.62954575,
      -0.10785772, 0.05476135,  -0.09595812, 2.5678241,    -2.0814404,
      -1.1128614,  0.041473713, -0.28158408, 0.58991134,   0.97976387,
      0.18347557,  1.5339258,   1.2227509,   -0.38975835,  -1.0287849,
      -0.76785564, -0.7142274,  -0.6349976,  1.811481,     0.938487,
      -0.17613958, -0.38237232, 0.4305281,   -1.4108676,   0.397358,
      -0.0768692,  0.3368985,   0.32701665,  -0.022414736, -1.1049984,
      0.87896246,  0.47513077,  -0.06509934, 1.949272,     0.0017279863,
      0.36098468,  0.50654465,  1.0995243,   -2.2350307,   0.72845334,
      -0.41773593, 0.9991142,   0.7017191,   0.23649603,   -0.4621552};
  ONNC_RUNTIME_div_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1,
                         input_1_ndim, input_1_dims, output_0, output_0_ndim,
                         output_0_dims);
  ASSERT_TRUE(relative_error(output_0, answer_0, 60) < 1e-5f);
}

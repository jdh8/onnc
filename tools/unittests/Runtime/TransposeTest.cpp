#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Transpose, test_transpose_default) {
  const float input_0[2][3][4] = {{{0.7101562023162842, 0.4070174992084503,
                                    0.5255025625228882, 0.08626412600278854},
                                   {0.28881677985191345, 0.3550712466239929,
                                    0.002335176570340991, 0.11169818788766861},
                                   {0.19350503385066986, 0.7652125954627991,
                                    0.38236159086227417, 0.9372479915618896}},
                                  {{0.6190007328987122, 0.8790335655212402,
                                    0.5630118250846863, 0.4552254378795624},
                                   {0.012512704357504845, 0.037144459784030914,
                                    0.9999493956565857, 0.8090830445289612},
                                   {0.7269040942192078, 0.38823720812797546,
                                    0.7546349763870239, 0.7056916952133179}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[4][3][2];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {4, 3, 2};
  const float answer_0[4][3][2] = {{{0.7101562023162842, 0.6190007328987122},
                                    {0.28881677985191345, 0.012512704357504845},
                                    {0.19350503385066986, 0.7269040942192078}},
                                   {{0.4070174992084503, 0.8790335655212402},
                                    {0.3550712466239929, 0.037144459784030914},
                                    {0.7652125954627991, 0.38823720812797546}},
                                   {{0.5255025625228882, 0.5630118250846863},
                                    {0.002335176570340991, 0.9999493956565857},
                                    {0.38236159086227417, 0.7546349763870239}},
                                   {{0.08626412600278854, 0.4552254378795624},
                                    {0.11169818788766861, 0.8090830445289612},
                                    {0.9372479915618896, 0.7056916952133179}}};
  const int32_t perm[] = {};
  const int32_t number_of_perm = 0;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 4 * 3 * 2; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_0) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[2][3][4];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {2, 3, 4};
  const float answer_0[2][3][4] = {
      {{0.017964323982596397, 0.5870859622955322, 0.5508228540420532,
        0.0438665971159935},
       {0.10798139870166779, 0.34236884117126465, 0.169571653008461,
        0.864126980304718},
       {0.3511107563972473, 0.8001262545585632, 0.42237570881843567,
        0.18088048696517944}},
      {{0.9844452142715454, 0.19700133800506592, 0.6755439043045044,
        0.7789852023124695},
       {0.011121303774416447, 0.0027693344745785, 0.24769601225852966,
        0.9517470598220825},
       {0.5693193674087524, 0.8870423436164856, 0.9028955698013306,
        0.027417557314038277}}};
  const int32_t perm[] = {0, 1, 2};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 3 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_1) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[2][4][3];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {2, 4, 3};
  const float answer_0[2][4][3] = {
      {{0.017964323982596397, 0.10798139870166779, 0.3511107563972473},
       {0.5870859622955322, 0.34236884117126465, 0.8001262545585632},
       {0.5508228540420532, 0.169571653008461, 0.42237570881843567},
       {0.0438665971159935, 0.864126980304718, 0.18088048696517944}},
      {{0.9844452142715454, 0.011121303774416447, 0.5693193674087524},
       {0.19700133800506592, 0.0027693344745785, 0.8870423436164856},
       {0.6755439043045044, 0.24769601225852966, 0.9028955698013306},
       {0.7789852023124695, 0.9517470598220825, 0.027417557314038277}}};
  const int32_t perm[] = {0, 2, 1};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 4 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_2) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[3][2][4];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 2, 4};
  const float answer_0[3][2][4] = {
      {{0.017964323982596397, 0.5870859622955322, 0.5508228540420532,
        0.0438665971159935},
       {0.9844452142715454, 0.19700133800506592, 0.6755439043045044,
        0.7789852023124695}},
      {{0.10798139870166779, 0.34236884117126465, 0.169571653008461,
        0.864126980304718},
       {0.011121303774416447, 0.0027693344745785, 0.24769601225852966,
        0.9517470598220825}},
      {{0.3511107563972473, 0.8001262545585632, 0.42237570881843567,
        0.18088048696517944},
       {0.5693193674087524, 0.8870423436164856, 0.9028955698013306,
        0.027417557314038277}}};
  const int32_t perm[] = {1, 0, 2};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 2 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_3) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[3][4][2];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 2};
  const float answer_0[3][4][2] = {
      {{0.017964323982596397, 0.9844452142715454},
       {0.5870859622955322, 0.19700133800506592},
       {0.5508228540420532, 0.6755439043045044},
       {0.0438665971159935, 0.7789852023124695}},
      {{0.10798139870166779, 0.011121303774416447},
       {0.34236884117126465, 0.0027693344745785},
       {0.169571653008461, 0.24769601225852966},
       {0.864126980304718, 0.9517470598220825}},
      {{0.3511107563972473, 0.5693193674087524},
       {0.8001262545585632, 0.8870423436164856},
       {0.42237570881843567, 0.9028955698013306},
       {0.18088048696517944, 0.027417557314038277}}};
  const int32_t perm[] = {1, 2, 0};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 2; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_4) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[4][2][3];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {4, 2, 3};
  const float answer_0[4][2][3] = {
      {{0.017964323982596397, 0.10798139870166779, 0.3511107563972473},
       {0.9844452142715454, 0.011121303774416447, 0.5693193674087524}},
      {{0.5870859622955322, 0.34236884117126465, 0.8001262545585632},
       {0.19700133800506592, 0.0027693344745785, 0.8870423436164856}},
      {{0.5508228540420532, 0.169571653008461, 0.42237570881843567},
       {0.6755439043045044, 0.24769601225852966, 0.9028955698013306}},
      {{0.0438665971159935, 0.864126980304718, 0.18088048696517944},
       {0.7789852023124695, 0.9517470598220825, 0.027417557314038277}}};
  const int32_t perm[] = {2, 0, 1};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 4 * 2 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Transpose, test_transpose_all_permutations_5) {
  const float input_0[2][3][4] = {{{0.017964323982596397, 0.5870859622955322,
                                    0.5508228540420532, 0.0438665971159935},
                                   {0.10798139870166779, 0.34236884117126465,
                                    0.169571653008461, 0.864126980304718},
                                   {0.3511107563972473, 0.8001262545585632,
                                    0.42237570881843567, 0.18088048696517944}},
                                  {{0.9844452142715454, 0.19700133800506592,
                                    0.6755439043045044, 0.7789852023124695},
                                   {0.011121303774416447, 0.0027693344745785,
                                    0.24769601225852966, 0.9517470598220825},
                                   {0.5693193674087524, 0.8870423436164856,
                                    0.9028955698013306, 0.027417557314038277}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  float output_0[4][3][2];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {4, 3, 2};
  const float answer_0[4][3][2] = {
      {{0.017964323982596397, 0.9844452142715454},
       {0.10798139870166779, 0.011121303774416447},
       {0.3511107563972473, 0.5693193674087524}},
      {{0.5870859622955322, 0.19700133800506592},
       {0.34236884117126465, 0.0027693344745785},
       {0.8001262545585632, 0.8870423436164856}},
      {{0.5508228540420532, 0.6755439043045044},
       {0.169571653008461, 0.24769601225852966},
       {0.42237570881843567, 0.9028955698013306}},
      {{0.0438665971159935, 0.7789852023124695},
       {0.864126980304718, 0.9517470598220825},
       {0.18088048696517944, 0.027417557314038277}}};
  const int32_t perm[] = {2, 1, 0};
  const int32_t number_of_perm = 3;
  ONNC_RUNTIME_transpose_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)perm, number_of_perm);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 4 * 3 * 2; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Sigmoid, test_sigmoid_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {0.2689414322376251, 0.5, 0.7310585975646973};
  ONNC_RUNTIME_sigmoid_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Sigmoid, test_sigmoid) {
  const float input_0[3][4][5] = {
      {{0.986209511756897, 1.6896052360534668, -1.8452913761138916,
        -0.8483144640922546, 0.11014300584793091},
       {-0.670214056968689, -0.7223492860794067, -1.2288769483566284,
        -0.45838314294815063, 0.1652558147907257},
       {-0.7202116847038269, -0.6006884574890137, -1.9609112739562988,
        -1.523632526397705, -2.8060476779937744},
       {-1.4590704441070557, -0.12823760509490967, -1.233107328414917,
        -0.6593191623687744, 0.928130567073822}},
      {{0.4876583516597748, 1.4145900011062622, -1.2521190643310547,
        0.018970061093568802, 0.2273649275302887},
       {0.03767187148332596, 1.439123272895813, 0.646113395690918,
        -0.473921537399292, -1.5986828804016113},
       {0.4955572187900543, -1.7813328504562378, -0.8189191222190857,
        1.1760722398757935, -0.0482349693775177},
       {1.7728098630905151, -0.8197722434997559, -0.47203490138053894,
        0.14146210253238678, 3.5340471267700195}},
      {{1.062807321548462, -0.5458753705024719, -0.12467671930789948,
        -0.39401525259017944, 0.7324937582015991},
       {-1.5995460748672485, 0.6562093496322632, 0.8666251301765442,
        1.4116017818450928, 2.2816247940063477},
       {-0.7824982404708862, -0.7921345829963684, 0.6321581602096558,
        -0.22876673936843872, 0.5338958501815796},
       {1.2249960899353027, 0.3433946371078491, 1.3197294473648071,
        0.255811482667923, -0.64804607629776}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.7283385992050171, 0.8441722393035889, 0.13642668724060059,
        0.2997865378856659, 0.5275079607963562},
       {0.3384489119052887, 0.32687586545944214, 0.22637805342674255,
        0.38736945390701294, 0.5412201881408691},
       {0.3273463547229767, 0.35418617725372314, 0.12336845695972443,
        0.1789272278547287, 0.05699824541807175},
       {0.1886095404624939, 0.4679844379425049, 0.2256380170583725,
        0.34089258313179016, 0.7166958451271057}},
      {{0.6195546984672546, 0.8044889569282532, 0.22233353555202484,
        0.5047423839569092, 0.5565976500511169},
       {0.5094168782234192, 0.8083188533782959, 0.6561340689659119,
        0.3836885094642639, 0.16816577315330505},
       {0.6214146614074707, 0.1441386342048645, 0.30599313974380493,
        0.7642408609390259, 0.4879435896873474},
       {0.8548067808151245, 0.3058120012283325, 0.3841347098350525,
        0.5353066921234131, 0.9716411232948303}},
      {{0.7432267069816589, 0.36682191491127014, 0.4688711166381836,
        0.4027511179447174, 0.6753522753715515},
       {0.1680450588464737, 0.6584083437919617, 0.7040429711341858,
        0.804018497467041, 0.9073437452316284},
       {0.3137817084789276, 0.31171050667762756, 0.6529786586761475,
        0.44305646419525146, 0.6303912997245789},
       {0.7729415893554688, 0.5850148797035217, 0.7891366481781006,
        0.5636063814163208, 0.34342995285987854}}};
  ONNC_RUNTIME_sigmoid_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

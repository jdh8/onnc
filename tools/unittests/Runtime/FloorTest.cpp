#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Floor, test_floor_example) {
  const float input_0[3] = {-1.5, 1.2000000476837158, 2.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-2.0, 1.0, 2.0};
  ONNC_RUNTIME_floor_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                           (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Floor, test_floor) {
  const float input_0[3][4][5] = {
      {{-1.0290857553482056, -1.490086317062378, -1.568034052848816,
        0.5648905038833618, -1.0536606311798096},
       {1.3003568649291992, -0.03811114281415939, -1.1509766578674316,
        0.5953623056411743, -0.3356051445007324},
       {-0.5913492441177368, 0.507638692855835, -1.1063172817230225,
        -1.0900139808654785, -0.5821074843406677},
       {-1.2198946475982666, 0.2921983599662781, -0.7700750827789307,
        -1.3656725883483887, -0.7638342380523682}},
      {{1.2987518310546875, 2.333772897720337, -0.5841092467308044,
        -0.29559698700904846, -1.2119139432907104},
       {-0.8994447588920593, 1.1367710828781128, -1.6525425910949707,
        0.2634131610393524, -0.38219156861305237},
       {0.29596415162086487, -0.8290355205535889, 0.08714156597852707,
        1.2908027172088623, 0.5223636031150818},
       {1.2599221467971802, 0.8154984712600708, 0.003487484762445092,
        0.28005948662757874, -1.2584229707717896}},
      {{0.8854995965957642, 0.05904700607061386, 0.732902467250824,
        -0.24912802875041962, 1.2388973236083984},
       {-0.8393548130989075, 1.548546314239502, -0.49243155121803284,
        0.9542176127433777, 0.47122862935066223},
       {-0.11130375415086746, -2.0549519062042236, -1.0597467422485352,
        0.5217844843864441, -1.528196096420288},
       {0.24548260867595673, 1.483536720275879, -0.4837642312049866,
        0.942470371723175, 2.5888612270355225}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{-2.0, -2.0, -2.0, 0.0, -2.0},
                                    {1.0, -1.0, -2.0, 0.0, -1.0},
                                    {-1.0, 0.0, -2.0, -2.0, -1.0},
                                    {-2.0, 0.0, -1.0, -2.0, -1.0}},
                                   {{1.0, 2.0, -1.0, -1.0, -2.0},
                                    {-1.0, 1.0, -2.0, 0.0, -1.0},
                                    {0.0, -1.0, 0.0, 1.0, 0.0},
                                    {1.0, 0.0, 0.0, 0.0, -2.0}},
                                   {{0.0, 0.0, 0.0, -1.0, 1.0},
                                    {-1.0, 1.0, -1.0, 0.0, 0.0},
                                    {-1.0, -3.0, -2.0, 0.0, -2.0},
                                    {0.0, 1.0, -1.0, 0.0, 2.0}}};
  ONNC_RUNTIME_floor_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                           (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

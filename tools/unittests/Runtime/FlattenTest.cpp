#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Flatten, test_flatten_axis0)
{
  const float input_0[] = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  float         output_0[120];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {1, 120};
  const float   answer_0[]      = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t axis = 0;
  using dragonite::norm;

  ONNC_RUNTIME_flatten_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                             axis);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

SKYPAT_F(Operator_Flatten, test_flatten_axis1)
{
  const float input_0[] = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  float         output_0[120];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {2, 60};
  const float   answer_0[]      = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t axis = 1;
  using dragonite::norm;

  ONNC_RUNTIME_flatten_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                             axis);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

SKYPAT_F(Operator_Flatten, test_flatten_axis2)
{
  const float input_0[] = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  float         output_0[120];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {6, 20};
  const float   answer_0[]      = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t axis = 2;
  using dragonite::norm;

  ONNC_RUNTIME_flatten_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                             axis);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

SKYPAT_F(Operator_Flatten, test_flatten_axis3)
{
  const float input_0[] = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  float         output_0[120];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {24, 5};
  const float   answer_0[]      = {
    0.21446945, 0.23302945, 0.64092577, 0.2799323,   0.6468174,  0.35968575, 0.4235325,   0.9223944,   0.952996,
    0.47703838, 0.11333508, 0.8049705,  0.27032536,  0.46430796, 0.4060757,  0.6945428,   0.10933356,  0.1145891,
    0.45769873, 0.0483013,  0.51328397, 0.3339845,   0.12816021, 0.13602296, 0.44483802,  0.12346119,  0.51495016,
    0.82242656, 0.5119772,  0.5805175,  0.14664628,  0.5136431,  0.58038086, 0.20576383,  0.24328433,  0.8126637,
    0.08707375, 0.5760348,  0.5139826,  0.777422,    0.71025485, 0.3973936,  0.7562884,   0.29253662,  0.82341975,
    0.34843302, 0.6052804,  0.8448066,  0.77019763,  0.35807514, 0.89117384, 0.1733176,   0.3755987,   0.70498353,
    0.38415864, 0.5349598,  0.81856835, 0.020804467, 0.49608126, 0.8329113,  0.049639292, 0.8432131,   0.3984745,
    0.18001348, 0.09929204, 0.83890206, 0.40644416,  0.29592502, 0.7646619,  0.91895485,  0.8603496,   0.61121434,
    0.95841086, 0.34609368, 0.87964845, 0.6625288,   0.7911821,  0.5816392,  0.68954796,  0.65999115,  0.75493515,
    0.6241764,  0.9157518,  0.13795853, 0.38699213,  0.80907243, 0.02220235, 0.55993354,  0.7560906,   0.8240401,
    0.9464868,  0.15667613, 0.40774032, 0.5442707,   0.07483772, 0.23558097, 0.99210155,  0.48608685,  0.097148865,
    0.17791936, 0.47726306, 0.9528418,  0.22026421,  0.42572734, 0.21189535, 0.41758066,  0.2507003,   0.03226564,
    0.70826507, 0.62294227, 0.01592093, 0.31645203,  0.41975155, 0.7324488,  0.8659762,   0.015308199, 0.6137662,
    0.5134733,  0.6048931,  0.3496242};
  const int32_t axis = 3;
  using dragonite::norm;

  ONNC_RUNTIME_flatten_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                             axis);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

SKYPAT_F(Operator_Flatten, test_flatten_default_axis)
{
  const float input_0[] = {
    0.46293384,  0.912902,     0.48914525,  0.72796136,  0.054724284, 0.4485707,  0.6613429,   0.38484117, 0.13285679,
    0.071752116, 0.39498204,   0.33042976,  0.6169048,   0.62086105,  0.62160677, 0.98404574,  0.7419681,  0.49591205,
    0.8751302,   0.45570302,   0.6006637,   0.79566395,  0.27888048,  0.90833384, 0.10452092,  0.94777405, 0.85066754,
    0.24898477,  0.440188,     0.43816704,  0.58825165,  0.94330955,  0.5958169,  0.45718607,  0.67708236, 0.44382852,
    0.8641342,   0.89987516,   0.83492637,  0.9264649,   0.39933428,  0.6860309,  0.14404027,  0.05512088, 0.16468155,
    0.87062764,  0.02891553,   0.7480345,   0.90736854,  0.07538044,  0.61804086, 0.024126055, 0.63996637, 0.9459209,
    0.3359446,   0.7522121,    0.4853301,   0.77127236,  0.66928893,  0.2546138,  0.2157068,   0.60797787, 0.39567742,
    0.68899566,  0.1205925,    0.9283558,   0.047272023, 0.34212345,  0.729682,   0.33407795,  0.44565362, 0.28908423,
    0.05551494,  0.8218883,    0.5923291,   0.027806344, 0.16530405,  0.97013736, 0.008725133, 0.4605195,  0.02843007,
    0.315027,    0.5395412,    0.7414208,   0.21331666,  0.026620558, 0.35566983, 0.28132704,  0.7719301,  0.92558897,
    0.85024875,  0.82167935,   0.91923743,  0.051973782, 0.61169064,  0.5116634,  0.50793654,  0.05314912, 0.049693413,
    0.44106948,  0.86576605,   0.035859432, 0.99391437,  0.963018,    0.11906949, 0.1785432,   0.8471145,  0.9404931,
    0.8260546,   0.0038761287, 0.9736059,   0.4489106,   0.75135934,  0.49618676, 0.62476206,  0.7839446,  0.7084742,
    0.75766003,  0.08131172,   0.35089982};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {5, 4, 3, 2};
  float         output_0[120];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {5, 24};
  const float   answer_0[]      = {
    0.46293384,  0.912902,     0.48914525,  0.72796136,  0.054724284, 0.4485707,  0.6613429,   0.38484117, 0.13285679,
    0.071752116, 0.39498204,   0.33042976,  0.6169048,   0.62086105,  0.62160677, 0.98404574,  0.7419681,  0.49591205,
    0.8751302,   0.45570302,   0.6006637,   0.79566395,  0.27888048,  0.90833384, 0.10452092,  0.94777405, 0.85066754,
    0.24898477,  0.440188,     0.43816704,  0.58825165,  0.94330955,  0.5958169,  0.45718607,  0.67708236, 0.44382852,
    0.8641342,   0.89987516,   0.83492637,  0.9264649,   0.39933428,  0.6860309,  0.14404027,  0.05512088, 0.16468155,
    0.87062764,  0.02891553,   0.7480345,   0.90736854,  0.07538044,  0.61804086, 0.024126055, 0.63996637, 0.9459209,
    0.3359446,   0.7522121,    0.4853301,   0.77127236,  0.66928893,  0.2546138,  0.2157068,   0.60797787, 0.39567742,
    0.68899566,  0.1205925,    0.9283558,   0.047272023, 0.34212345,  0.729682,   0.33407795,  0.44565362, 0.28908423,
    0.05551494,  0.8218883,    0.5923291,   0.027806344, 0.16530405,  0.97013736, 0.008725133, 0.4605195,  0.02843007,
    0.315027,    0.5395412,    0.7414208,   0.21331666,  0.026620558, 0.35566983, 0.28132704,  0.7719301,  0.92558897,
    0.85024875,  0.82167935,   0.91923743,  0.051973782, 0.61169064,  0.5116634,  0.50793654,  0.05314912, 0.049693413,
    0.44106948,  0.86576605,   0.035859432, 0.99391437,  0.963018,    0.11906949, 0.1785432,   0.8471145,  0.9404931,
    0.8260546,   0.0038761287, 0.9736059,   0.4489106,   0.75135934,  0.49618676, 0.62476206,  0.7839446,  0.7084742,
    0.75766003,  0.08131172,   0.35089982};
  const int32_t axis = 1;
  using dragonite::norm;

  ONNC_RUNTIME_flatten_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                             axis);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

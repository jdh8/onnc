#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Clip, test_clip_example) {
  const float input_0[3] = {-2.0, 0.0, 2.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-1.0, 0.0, 1.0};
  const float max = 1.0;
  const float min = -1.0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip) {
  const float input_0[3][4][5] = {
      {{1.7939437627792358, 1.1951969861984253, -1.16256844997406,
        -0.27457883954048157, 0.8644856214523315},
       {2.308706283569336, 1.9564262628555298, -0.8972644209861755,
        -0.7382716536521912, -0.7531148791313171},
       {-0.4955446422100067, -0.18068526685237885, -1.4302785396575928,
        0.2808385193347931, -0.5482359528541565},
       {-1.598878026008606, 1.2111278772354126, -0.13303981721401215,
        -0.25076723098754883, -0.06520787626504898}},
      {{-1.2292413711547852, -1.3985447883605957, 1.006104588508606,
        0.2664659917354584, -0.8450586795806885},
       {-0.652963399887085, -0.012375534512102604, 0.1534283608198166,
        -0.35578712821006775, 2.1770641803741455},
       {0.22243957221508026, -0.7890176773071289, -0.5765652060508728,
        -0.8216727375984192, 0.3179411292076111},
       {-0.6676421165466309, 1.0931768417358398, 0.4298437237739563,
        -0.38706356287002563, 1.3444370031356812}},
      {{-1.0889201164245605, 0.9251283407211304, 0.20074376463890076,
        -0.3106507360935211, 1.405010461807251},
       {1.1758990287780762, -0.14348076283931732, 0.4659261107444763,
        -1.945502519607544, 1.0470490455627441},
       {-2.1389315128326416, 0.82977294921875, 0.5905192494392395,
        -0.9665330648422241, 0.7744689583778381},
       {-1.0908674001693726, -0.01729053258895874, -0.882667601108551,
        -0.8002732396125793, -0.9764916896820068}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.0, 1.0, -1.0, -0.27457883954048157, 0.8644856214523315},
       {1.0, 1.0, -0.8972644209861755, -0.7382716536521912,
        -0.7531148791313171},
       {-0.4955446422100067, -0.18068526685237885, -1.0, 0.2808385193347931,
        -0.5482359528541565},
       {-1.0, 1.0, -0.13303981721401215, -0.25076723098754883,
        -0.06520787626504898}},
      {{-1.0, -1.0, 1.0, 0.2664659917354584, -0.8450586795806885},
       {-0.652963399887085, -0.012375534512102604, 0.1534283608198166,
        -0.35578712821006775, 1.0},
       {0.22243957221508026, -0.7890176773071289, -0.5765652060508728,
        -0.8216727375984192, 0.3179411292076111},
       {-0.6676421165466309, 1.0, 0.4298437237739563, -0.38706356287002563,
        1.0}},
      {{-1.0, 0.9251283407211304, 0.20074376463890076, -0.3106507360935211,
        1.0},
       {1.0, -0.14348076283931732, 0.4659261107444763, -1.0, 1.0},
       {-1.0, 0.82977294921875, 0.5905192494392395, -0.9665330648422241,
        0.7744689583778381},
       {-1.0, -0.01729053258895874, -0.882667601108551, -0.8002732396125793,
        -0.9764916896820068}}};
  const float max = 1.0;
  const float min = -1.0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_inbounds) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-1.0, 0.0, 1.0};
  const float max = 5.0;
  const float min = -5.0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_outbounds) {
  const float input_0[3] = {-6.0, 0.0, 6.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-5.0, 0.0, 5.0};
  const float max = 5.0;
  const float min = -5.0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_splitbounds) {
  const float input_0[3] = {-1.0, 0.0, 6.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-1.0, 0.0, 5.0};
  const float max = 5.0;
  const float min = -5.0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_default_min) {
  const float input_0[3][4][5] = {
      {{0.7527986168861389, -1.4377086162567139, -1.5407062768936157,
        0.8478286862373352, -0.7621185183525085},
       {0.7718939185142517, -0.4825612008571625, 0.24355533719062805,
        -0.026801522821187973, 1.31948983669281},
       {-0.14717140793800354, 0.5415215492248535, -0.5669863820075989,
        -0.6680147051811218, 0.04354404658079147},
       {0.6734672784805298, -0.511408805847168, 0.7808473706245422,
        -0.8418853282928467, -2.16646146774292}},
      {{0.5467484593391418, 0.7534717917442322, 0.1427367925643921,
        -2.1940255165100098, -1.797825813293457},
       {0.7322801351547241, 0.7157325148582458, 0.658542811870575,
        -1.1215956211090088, -0.7140833735466003},
       {1.1115052700042725, 0.17162968218326569, 1.454069972038269,
        0.6478859782218933, 0.9031359553337097},
       {0.11897420883178711, -0.12396857887506485, -1.8295395374298096,
        -1.1968334913253784, -0.8709210753440857}},
      {{1.9481152296066284, 0.7828845381736755, -0.8205224275588989,
        -0.7437167763710022, -2.0330564975738525},
       {-1.054038643836975, 1.2012161016464233, -1.3137600421905518,
        -1.0948407649993896, 1.2033811807632446},
       {1.2727329730987549, 1.306806206703186, -0.42194706201553345,
        -1.1988801956176758, -0.1738487035036087},
       {0.08061818033456802, -1.5695821046829224, -0.9837241768836975,
        -0.02676377259194851, 1.1549949645996094}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.7527986168861389, 0.0, 0.0, 0.8478286862373352, 0.0},
       {0.7718939185142517, 0.0, 0.24355533719062805, 0.0, 1.31948983669281},
       {0.0, 0.5415215492248535, 0.0, 0.0, 0.04354404658079147},
       {0.6734672784805298, 0.0, 0.7808473706245422, 0.0, 0.0}},
      {{0.5467484593391418, 0.7534717917442322, 0.1427367925643921, 0.0, 0.0},
       {0.7322801351547241, 0.7157325148582458, 0.658542811870575, 0.0, 0.0},
       {1.1115052700042725, 0.17162968218326569, 1.454069972038269,
        0.6478859782218933, 0.9031359553337097},
       {0.11897420883178711, 0.0, 0.0, 0.0, 0.0}},
      {{1.9481152296066284, 0.7828845381736755, 0.0, 0.0, 0.0},
       {0.0, 1.2012161016464233, 0.0, 0.0, 1.2033811807632446},
       {1.2727329730987549, 1.306806206703186, 0.0, 0.0, 0.0},
       {0.08061818033456802, 0.0, 0.0, 0.0, 1.1549949645996094}}};
  const float min = 0.0;
  const float max = 0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_default_max) {
  const float input_0[3][4][5] = {
      {{-0.9461309909820557, 0.14383211731910706, 0.7740622162818909,
        -1.4188590049743652, 0.526816189289093},
       {0.6108606457710266, 0.13828538358211517, 0.4197155833244324,
        0.4713340103626251, 0.656354546546936},
       {0.9090098142623901, 0.4533545970916748, -0.7189590930938721,
        -0.6676498055458069, 1.3776729106903076},
       {1.6264233589172363, -1.6681418418884277, 0.37060362100601196,
        -1.9015922546386719, -0.22459633648395538}},
      {{0.8976718783378601, -1.019201636314392, -0.08366387337446213,
        -1.0804823637008667, -0.5076371431350708},
       {1.9567193984985352, 0.6309249401092529, 0.9411025047302246,
        -0.4060269892215729, 1.497021198272705},
       {0.2888966202735901, 0.39290446043014526, 0.5252273082733154,
        -3.345038890838623, 0.28773656487464905},
       {-3.3168721199035645, 1.1339930295944214, 1.3566534519195557,
        -0.6316018104553223, 0.7466214299201965}},
      {{1.1113042831420898, 0.2676929533481598, -1.107269525527954,
        -0.24945639073848724, 0.5433754324913025},
       {0.10581574589014053, 0.08018644154071808, 1.6769319772720337,
        -2.5742905139923096, 0.18516415357589722},
       {-0.13138967752456665, 0.016733471304178238, -0.059726785868406296,
        0.9072924852371216, 0.6275966763496399},
       {-0.4288838803768158, 1.0302457809448242, -0.6211544275283813,
        1.150242805480957, -1.7520478963851929}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-0.9461309909820557, 0.0, 0.0, -1.4188590049743652, 0.0},
       {0.0, 0.0, 0.0, 0.0, 0.0},
       {0.0, 0.0, -0.7189590930938721, -0.6676498055458069, 0.0},
       {0.0, -1.6681418418884277, 0.0, -1.9015922546386719,
        -0.22459633648395538}},
      {{0.0, -1.019201636314392, -0.08366387337446213, -1.0804823637008667,
        -0.5076371431350708},
       {0.0, 0.0, 0.0, -0.4060269892215729, 0.0},
       {0.0, 0.0, 0.0, -3.345038890838623, 0.0},
       {-3.3168721199035645, 0.0, 0.0, -0.6316018104553223, 0.0}},
      {{0.0, 0.0, -1.107269525527954, -0.24945639073848724, 0.0},
       {0.0, 0.0, 0.0, -2.5742905139923096, 0.0},
       {-0.13138967752456665, 0.0, -0.059726785868406296, 0.0, 0.0},
       {-0.4288838803768158, 0.0, -0.6211544275283813, 0.0,
        -1.7520478963851929}}};
  const float max = 0.0;
  const float min = 0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Clip, test_clip_default_inbounds) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-1.0, 0.0, 1.0};
  const float max = 0;
  const float min = 0;
  ONNC_RUNTIME_clip_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims, max,
                          min);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_GRU, test_gru_defaults) {
  const float input_0[1][3][2] = {{{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {1, 3, 2};
  const float input_1[1][15][2] = {
      {{0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {1, 15, 2};
  const float input_2[1][15][5] = {
      {{0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
        0.10000000149011612, 0.10000000149011612}}};
  const int32_t input_2_ndim = 3;
  const int32_t input_2_dims[] = {1, 15, 5};
  const float input_3[] = {};
  const int32_t input_3_ndim = 0;
  const int32_t input_3_dims[] = {};
  const float input_4[] = {};
  const int32_t input_4_ndim = 0;
  const int32_t input_4_dims[] = {};
  const float input_5[] = {};
  const int32_t input_5_ndim = 0;
  const int32_t input_5_dims[] = {};
  float output_0[1][3][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {1, 3, 5};
  const float answer_0[1][3][5] = {
      {{0.12397026270627975, 0.12397026270627975, 0.12397026270627975,
        0.12397026270627975, 0.12397026270627975},
       {0.20053662359714508, 0.20053662359714508, 0.20053662359714508,
        0.20053662359714508, 0.20053662359714508},
       {0.1999165415763855, 0.1999165415763855, 0.1999165415763855,
        0.1999165415763855, 0.1999165415763855}}};
  const float output_1[] = {};
  const int32_t output_1_ndim = 0;
  const int32_t output_1_dims[] = {};
  const int32_t hidden_size = 5;
  const float activation_alpha[] = {};
  const int32_t number_of_activation_alpha = 0;
  const float activation_beta[] = {};
  const int32_t number_of_activation_beta = 0;
  const int32_t linear_before_reset = 0;
  const float clip = 0;
  const auto direction = "NOTSET";
  ONNC_RUNTIME_gru_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)input_3, input_3_ndim, input_3_dims, (float *)input_4,
      input_4_ndim, input_4_dims, (float *)input_5, input_5_ndim, input_5_dims,
      (float *)output_0, output_0_ndim, output_0_dims, (float *)output_1,
      output_1_ndim, output_1_dims, (float *)activation_alpha,
      number_of_activation_alpha, (float *)activation_beta,
      number_of_activation_beta, activations, number_of_activations, clip,
      direction, hidden_size, linear_before_reset);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_GRU, test_gru_with_initial_bias) {
  const float input_0[1][3][3] = {
      {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {1, 3, 3};
  const float input_1[1][9][3] = {
      {{0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {1, 9, 3};
  const float input_2[1][9][3] = {
      {{0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612},
       {0.10000000149011612, 0.10000000149011612, 0.10000000149011612}}};
  const int32_t input_2_ndim = 3;
  const int32_t input_2_dims[] = {1, 9, 3};
  const float input_3[1][18] = {
      {0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
       0.10000000149011612, 0.10000000149011612, 0.10000000149011612,
       0.10000000149011612, 0.10000000149011612, 0.10000000149011612, 0.0, 0.0,
       0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
  const int32_t input_3_ndim = 2;
  const int32_t input_3_dims[] = {1, 18};
  const float input_4[] = {};
  const int32_t input_4_ndim = 0;
  const int32_t input_4_dims[] = {};
  const float input_5[] = {};
  const int32_t input_5_ndim = 0;
  const int32_t input_5_dims[] = {};
  float output_0[1][3][3];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {1, 3, 3};
  const float answer_0[1][3][3] = {
      {{0.20053662359714508, 0.20053662359714508, 0.20053662359714508},
       {0.15482337772846222, 0.15482337772846222, 0.15482337772846222},
       {0.07484275847673416, 0.07484275847673416, 0.07484275847673416}}};
  const float output_1[] = {};
  const int32_t output_1_ndim = 0;
  const int32_t output_1_dims[] = {};
  const int32_t hidden_size = 3;
  const float activation_alpha[] = {};
  const int32_t number_of_activation_alpha = 0;
  const float activation_beta[] = {};
  const int32_t number_of_activation_beta = 0;
  const int32_t linear_before_reset = 0;
  const float clip = 0;
  const auto direction = "NOTSET";
  ONNC_RUNTIME_gru_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)input_3, input_3_ndim, input_3_dims, (float *)input_4,
      input_4_ndim, input_4_dims, (float *)input_5, input_5_ndim, input_5_dims,
      (float *)output_0, output_0_ndim, output_0_dims, (float *)output_1,
      output_1_ndim, output_1_dims, (float *)activation_alpha,
      number_of_activation_alpha, (float *)activation_beta,
      number_of_activation_beta, activations, number_of_activations, clip,
      direction, hidden_size, linear_before_reset);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_GRU, test_gru_seq_length) {
  const float input_0[2][3][3] = {
      {{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}, {7.0, 8.0, 9.0}},
      {{10.0, 11.0, 12.0}, {13.0, 14.0, 15.0}, {16.0, 17.0, 18.0}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 3};
  const float input_1[1][15][3] = {
      {{-0.8566783666610718, -1.0932718515396118, 0.6413624882698059},
       {0.8958848118782043, 0.5237025618553162, -0.4414623975753784},
       {1.021924614906311, -0.2502841353416443, 0.6807520985603333},
       {0.5557777285575867, -0.7512072920799255, 0.4136063754558563},
       {0.9327845573425293, 1.7027435302734375, 1.613968849182129},
       {-1.437506079673767, -0.7149007320404053, 1.155791997909546},
       {1.13091242313385, 0.4584692418575287, -0.150989830493927},
       {0.0011512314667925239, 1.4851762056350708, 1.6299530267715454},
       {0.056666649878025055, -1.0682828426361084, 0.098325215280056},
       {-1.2351881265640259, -0.7685586214065552, 0.046277474611997604},
       {1.1612175703048706, 0.38160714507102966, 2.404865026473999},
       {0.8264775276184082, -1.7052029371261597, 1.9720371961593628},
       {-0.00937697384506464, 0.6150667071342468, 1.6462856531143188},
       {-0.522493302822113, 1.0669326782226562, -1.2693253755569458},
       {0.994181215763092, 1.1416124105453491, 1.1282962560653687}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {1, 15, 3};
  const float input_2[1][15][5] = {
      {{0.7238269448280334, -0.8771675825119019, 1.2036616802215576,
        -1.6271569728851318, 1.0881301164627075},
       {-1.860824704170227, -0.40886184573173523, 2.6406619548797607,
        -0.40969225764274597, -1.7128156423568726},
       {0.9336153268814087, -0.6887590289115906, 0.4547545611858368,
        1.2224448919296265, 0.050340909510850906},
       {-0.6238310933113098, -1.25133216381073, 0.4945008456707001,
        -0.3558661639690399, -0.6114427447319031},
       {0.46673262119293213, -0.18737362325191498, -0.26064833998680115,
        -0.7401501536369324, 0.27905601263046265},
       {0.44993287324905396, 1.382650375366211, -0.8145946860313416,
        -0.18574117124080658, -0.24057939648628235},
       {0.7051806449890137, -1.1317179203033447, -0.47341978549957275,
        -1.1081770658493042, 0.6570083498954773},
       {0.6907212734222412, 0.01002485491335392, -1.2178746461868286,
        1.8670904636383057, 0.3165341019630432},
       {-0.9207794666290283, -0.33194246888160706, 1.4467525482177734,
        -0.7194350957870483, -0.46429118514060974},
       {-1.1915462017059326, 0.25716322660446167, -0.8611156940460205,
        -0.8430841565132141, -1.351625919342041},
       {-0.9987372159957886, -0.9156579971313477, -0.3831821382045746,
        0.6132818460464478, -1.229525089263916},
       {-0.3229205310344696, -0.10846763849258423, -0.62012779712677,
        -0.6858614087104797, -0.7941469550132751},
       {-0.17558929324150085, -1.2858136892318726, 0.16711005568504333,
        -0.38942286372184753, -0.6943095922470093},
       {1.9208734035491943, -0.7185468077659607, 1.7766422033309937,
        0.2906642556190491, -1.0300344228744507},
       {0.6598526835441589, -0.5610411167144775, -1.2839651107788086,
        -0.03985127434134483, -1.2938543558120728}}};
  const int32_t input_2_ndim = 3;
  const int32_t input_2_dims[] = {1, 15, 5};
  const float input_3[1][30] = {
      {-0.5499211549758911, 0.3682945966720581,   -0.24401536583900452,
       0.46159595251083374, -1.6426552534103394,  -0.5734503269195557,
       1.2496089935302734,  -1.8836668729782104,  1.0534709692001343,
       -0.7678016424179077, 0.43312981724739075,  0.003261372447013855,
       0.470683753490448,   0.5980840921401978,   -0.11640644073486328,
       0.762829601764679,   1.2320975065231323,   -0.9903292655944824,
       -0.1846066564321518, -0.39697450399398804, 0.5342150330543518,
       -0.3858718276023865, -0.20070752501487732, 0.3940541446208954,
       1.6890168190002441,  2.0781772136688232,   -0.04089534282684326,
       1.2083945274353027,  -1.776619791984558,   0.44453465938568115}};
  const int32_t input_3_ndim = 2;
  const int32_t input_3_dims[] = {1, 30};
  const float input_4[] = {};
  const int32_t input_4_ndim = 0;
  const int32_t input_4_dims[] = {};
  const float input_5[] = {};
  const int32_t input_5_ndim = 0;
  const int32_t input_5_dims[] = {};
  float output_0[1][3][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {1, 3, 5};
  const float answer_0[1][3][5] = {
      {{0.9999968409538269, 0.09779056161642075, 0.20928072929382324,
        -0.423991858959198, 0.0007916892063803971},
       {1.0, 0.005749893840402365, 0.003380164736881852, -0.27815040946006775,
        2.3030322093831046e-09},
       {1.0, 0.0003073764964938164, 4.3460142478579655e-05, -0.1642276644706726,
        6.661338147750939e-15}}};
  const float output_1[] = {};
  const int32_t output_1_ndim = 0;
  const int32_t output_1_dims[] = {};
  const int32_t hidden_size = 5;
  const float activation_alpha[] = {};
  const int32_t number_of_activation_alpha = 0;
  const float activation_beta[] = {};
  const int32_t number_of_activation_beta = 0;
  const int32_t linear_before_reset = 0;
  const float clip = 0;
  const auto direction = "NOTSET";
  ONNC_RUNTIME_gru_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)input_3, input_3_ndim, input_3_dims, (float *)input_4,
      input_4_ndim, input_4_dims, (float *)input_5, input_5_ndim, input_5_dims,
      (float *)output_0, output_0_ndim, output_0_dims, (float *)output_1,
      output_1_ndim, output_1_dims, (float *)activation_alpha,
      number_of_activation_alpha, (float *)activation_beta,
      number_of_activation_beta, activations, number_of_activations, clip,
      direction, hidden_size, linear_before_reset);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

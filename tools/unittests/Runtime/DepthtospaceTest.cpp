#if defined(__GNUC__) || defined(_MSC_VER)
#define restrict __restrict
#else
#define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "relative-error.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_DepthToSpace, test_depthtospace) {
  const float input_0[] = {
      0.9752058,  0.24012569,  0.7706521,  0.9410645,   0.9915255,
      0.8441963,  0.91958654,  0.17898099, 0.3209528,   0.122874945,
      0.3117713,  0.9155119,   0.5945697,  0.34562856,  0.6360288,
      0.852815,   0.50069636,  0.9671314,  0.50422,     0.69023246,
      0.36721,    0.8679902,   0.45606467, 0.029056631, 0.15380102,
      0.8513282,  0.603183,    0.8927381,  0.97866017,  0.6260746,
      0.4747921,  0.5977563,   0.6841362,  0.6380683,   0.320207,
      0.8042013,  0.23455322,  0.1551461,  0.52264136,  0.91659045,
      0.11238317, 0.7816664,   0.15549651, 0.40361527,  0.030098647,
      0.36899066, 0.8315127,   0.26646602, 0.9143379,   0.14114872,
      0.8778756,  0.6551296,   0.8929924,  0.009215791, 0.3482084,
      0.7954952,  0.57689357,  0.34076372, 0.1083362,   0.6347664,
      0.60617054, 0.7146472,   0.59653026, 0.3769808,   0.957886,
      0.7673991,  0.72448504,  0.39411142, 0.7769698,   0.005373513,
      0.37400156, 0.1780858,   0.44294322, 0.858325,    0.79591584,
      0.618005,   0.4876737,   0.11566385, 0.697457,    0.5343498,
      0.44383103, 0.9594905,   0.24912609, 0.57006884,  0.20368747,
      0.78725755, 0.023804804, 0.55664074, 0.43108276,  0.7301807,
      0.36591798, 0.51136005,  0.24525295, 0.92954695,  0.56515425,
      0.55275154, 0.3633971,   0.44331384, 0.9678404,   0.2643334,
      0.54855007, 0.4918686,   0.6016009,  0.88837117,  0.93936014,
      0.67056614, 0.09230388,  0.67104256, 0.104671896, 0.018494882,
      0.38549337, 0.2384849,   0.09472902, 0.07648419,  0.16880402,
      0.14568563, 0.62667274,  0.5486663,  0.43055278,  0.029339168,
      0.9618089,  0.4841164,   0.6361297,  0.946573,    0.7051029,
      0.26475346, 0.6009486,   0.21148765, 0.8137381,   0.14439014,
      0.18452297, 0.95639735,  0.5839301,  0.97120476,  0.6158966,
      0.5020816,  0.2075505,   0.47228363, 0.29516652,  0.80370134,
      0.44486734, 0.5761179,   0.9203107,  0.31245586};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {2, 8, 3, 3};
  float output_0[144];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {2, 2, 6, 6};
  const float answer_0[] = {
      0.9752058,   0.50422,     0.24012569,  0.69023246,  0.7706521,
      0.36721,     0.23455322,  0.3482084,   0.1551461,   0.7954952,
      0.52264136,  0.57689357,  0.9410645,   0.8679902,   0.9915255,
      0.45606467,  0.8441963,   0.029056631, 0.91659045,  0.34076372,
      0.11238317,  0.1083362,   0.7816664,   0.6347664,   0.91958654,
      0.15380102,  0.17898099,  0.8513282,   0.3209528,   0.603183,
      0.15549651,  0.60617054,  0.40361527,  0.7146472,   0.030098647,
      0.59653026,  0.122874945, 0.8927381,   0.3117713,   0.97866017,
      0.9155119,   0.6260746,   0.36899066,  0.3769808,   0.8315127,
      0.957886,    0.26646602,  0.7673991,   0.5945697,   0.4747921,
      0.34562856,  0.5977563,   0.6360288,   0.6841362,   0.9143379,
      0.72448504,  0.14114872,  0.39411142,  0.8778756,   0.7769698,
      0.852815,    0.6380683,   0.50069636,  0.320207,    0.9671314,
      0.8042013,   0.6551296,   0.005373513, 0.8929924,   0.37400156,
      0.009215791, 0.1780858,   0.44294322,  0.36591798,  0.858325,
      0.51136005,  0.79591584,  0.24525295,  0.104671896, 0.6009486,
      0.018494882, 0.21148765,  0.38549337,  0.8137381,   0.618005,
      0.92954695,  0.4876737,   0.56515425,  0.11566385,  0.55275154,
      0.2384849,   0.14439014,  0.09472902,  0.18452297,  0.07648419,
      0.95639735,  0.697457,    0.3633971,   0.5343498,   0.44331384,
      0.44383103,  0.9678404,   0.16880402,  0.5839301,   0.14568563,
      0.97120476,  0.62667274,  0.6158966,   0.9594905,   0.2643334,
      0.24912609,  0.54855007,  0.57006884,  0.4918686,   0.5486663,
      0.5020816,   0.43055278,  0.2075505,   0.029339168, 0.47228363,
      0.20368747,  0.6016009,   0.78725755,  0.88837117,  0.023804804,
      0.93936014,  0.9618089,   0.29516652,  0.4841164,   0.80370134,
      0.6361297,   0.44486734,  0.55664074,  0.67056614,  0.43108276,
      0.09230388,  0.7301807,   0.67104256,  0.946573,    0.5761179,
      0.7051029,   0.9203107,   0.26475346,  0.31245586};
  const int32_t blocksize = 2;
  ONNC_RUNTIME_depthtospace_float(nullptr, input_0, input_0_ndim, input_0_dims,
                                  output_0, output_0_ndim, output_0_dims,
                                  blocksize);
  ASSERT_TRUE(relative_error(output_0, answer_0, 144) < 1e-5f);
}

SKYPAT_F(Operator_DepthToSpace, test_depthtospace_example) {
  const float input_0[] = {0.0,  1.0,  2.0,  3.0,  4.0,  5.0,  6.0,  7.0,
                           8.0,  9.0,  10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
                           16.0, 17.0, 18.0, 19.0, 20.0, 21.0, 22.0, 23.0};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 4, 2, 3};
  float output_0[24];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 1, 4, 6};
  const float answer_0[] = {0.0,  6.0,  1.0,  7.0,  2.0,  8.0,  12.0, 18.0,
                            13.0, 19.0, 14.0, 20.0, 3.0,  9.0,  4.0,  10.0,
                            5.0,  11.0, 15.0, 21.0, 16.0, 22.0, 17.0, 23.0};
  const int32_t blocksize = 2;
  ONNC_RUNTIME_depthtospace_float(nullptr, input_0, input_0_ndim, input_0_dims,
                                  output_0, output_0_ndim, output_0_dims,
                                  blocksize);
  ASSERT_TRUE(relative_error(output_0, answer_0, 24) < 1e-5f);
}

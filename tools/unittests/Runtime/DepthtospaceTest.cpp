#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_DepthToSpace, test_depthtospace) {
  const float input_0[2][8][3][3] = {
      {{{0.9035496115684509, 0.2886086404323578, 0.6468090415000916},
        {0.7431516051292419, 0.5461265444755554, 0.08451231569051743},
        {0.5274259448051453, 0.4822799861431122, 0.43018218874931335}},
       {{0.4791427552700043, 0.3139648139476776, 0.9881490468978882},
        {0.743894636631012, 0.10969472676515579, 0.937371015548706},
        {0.8013666272163391, 0.909664511680603, 0.7448031306266785}},
       {{0.6857330799102783, 0.9844375252723694, 0.39917615056037903},
        {0.03856206312775612, 0.4411810338497162, 0.21225027740001678},
        {0.33862021565437317, 0.7864761352539062, 0.15432800352573395}},
       {{0.10567521303892136, 0.5653883218765259, 0.4813040792942047},
        {0.10899335891008377, 0.10978846251964569, 0.1987529695034027},
        {0.0034883813932538033, 0.5731544494628906, 0.3977103531360626}},
       {{0.24780601263046265, 0.7911641001701355, 0.5009468793869019},
        {0.08829966187477112, 0.6000166535377502, 0.32131457328796387},
        {0.07666068524122238, 0.7885992527008057, 0.7059723138809204}},
       {{0.8353543281555176, 0.27142804861068726, 0.06355834752321243},
        {0.7384610176086426, 0.8850632309913635, 0.08734022080898285},
        {0.030842168256640434, 0.025483164936304092, 0.4106901288032532}},
       {{0.6894646286964417, 0.3310990631580353, 0.14931297302246094},
        {0.983271598815918, 0.7287055253982544, 0.9628018140792847},
        {0.4128356873989105, 0.15074039995670319, 0.19178928434848785}},
       {{0.13565844297409058, 0.9879170060157776, 0.636109471321106},
        {0.6813703179359436, 0.5087598562240601, 0.012452430091798306},
        {0.8006079792976379, 0.7702184319496155, 0.5312693119049072}}},
      {{{0.050770681351423264, 0.17781277000904083, 0.027485143393278122},
        {0.5209648609161377, 0.8047556281089783, 0.04475324973464012},
        {0.3204103112220764, 0.0945795327425003, 0.8593339920043945}},
       {{0.7975450158119202, 0.4753023087978363, 0.9431841969490051},
        {0.9608561992645264, 0.7964099049568176, 0.3736138939857483},
        {0.44396084547042847, 0.1913420706987381, 0.8792842030525208}},
       {{0.5040934681892395, 0.7517250180244446, 0.37934985756874084},
        {0.2743014395236969, 0.5559263825416565, 0.005878657102584839},
        {0.06288249045610428, 0.508561909198761, 0.48387303948402405}},
       {{0.4627344310283661, 0.414465069770813, 0.23343776166439056},
        {0.31926825642585754, 0.24101924896240234, 0.6935641169548035},
        {0.5066582560539246, 0.055875178426504135, 0.43545711040496826}},
       {{0.854909360408783, 0.3591515123844147, 0.37032651901245117},
        {0.4494481682777405, 0.2885466516017914, 0.09132164716720581},
        {0.202505424618721, 0.9075759053230286, 0.41800838708877563}},
       {{0.09680674225091934, 0.6193826198577881, 0.8912897109985352},
        {0.1898697316646576, 0.43292346596717834, 0.2011285275220871},
        {0.1373811662197113, 0.21390455961227417, 0.6953479051589966}},
       {{0.2848273813724518, 0.28162682056427, 0.432067334651947},
        {0.6609399914741516, 0.40621089935302734, 0.6040588021278381},
        {0.07281960546970367, 0.22868505120277405, 0.9848059415817261}},
       {{0.2517237067222595, 0.778533399105072, 0.019204892218112946},
        {0.12400223314762115, 0.25499454140663147, 0.7178841829299927},
        {0.3603867292404175, 0.0001549031148897484, 0.3896408975124359}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {2, 8, 3, 3};
  float output_0[2][2][6][6];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {2, 2, 6, 6};
  const float answer_0[2][2][6][6] = {
      {{{0.9035496115684509, 0.6857330799102783, 0.2886086404323578,
         0.9844375252723694, 0.6468090415000916, 0.39917615056037903},
        {0.24780601263046265, 0.6894646286964417, 0.7911641001701355,
         0.3310990631580353, 0.5009468793869019, 0.14931297302246094},
        {0.7431516051292419, 0.03856206312775612, 0.5461265444755554,
         0.4411810338497162, 0.08451231569051743, 0.21225027740001678},
        {0.08829966187477112, 0.983271598815918, 0.6000166535377502,
         0.7287055253982544, 0.32131457328796387, 0.9628018140792847},
        {0.5274259448051453, 0.33862021565437317, 0.4822799861431122,
         0.7864761352539062, 0.43018218874931335, 0.15432800352573395},
        {0.07666068524122238, 0.4128356873989105, 0.7885992527008057,
         0.15074039995670319, 0.7059723138809204, 0.19178928434848785}},
       {{0.4791427552700043, 0.10567521303892136, 0.3139648139476776,
         0.5653883218765259, 0.9881490468978882, 0.4813040792942047},
        {0.8353543281555176, 0.13565844297409058, 0.27142804861068726,
         0.9879170060157776, 0.06355834752321243, 0.636109471321106},
        {0.743894636631012, 0.10899335891008377, 0.10969472676515579,
         0.10978846251964569, 0.937371015548706, 0.1987529695034027},
        {0.7384610176086426, 0.6813703179359436, 0.8850632309913635,
         0.5087598562240601, 0.08734022080898285, 0.012452430091798306},
        {0.8013666272163391, 0.0034883813932538033, 0.909664511680603,
         0.5731544494628906, 0.7448031306266785, 0.3977103531360626},
        {0.030842168256640434, 0.8006079792976379, 0.025483164936304092,
         0.7702184319496155, 0.4106901288032532, 0.5312693119049072}}},
      {{{0.050770681351423264, 0.5040934681892395, 0.17781277000904083,
         0.7517250180244446, 0.027485143393278122, 0.37934985756874084},
        {0.854909360408783, 0.2848273813724518, 0.3591515123844147,
         0.28162682056427, 0.37032651901245117, 0.432067334651947},
        {0.5209648609161377, 0.2743014395236969, 0.8047556281089783,
         0.5559263825416565, 0.04475324973464012, 0.005878657102584839},
        {0.4494481682777405, 0.6609399914741516, 0.2885466516017914,
         0.40621089935302734, 0.09132164716720581, 0.6040588021278381},
        {0.3204103112220764, 0.06288249045610428, 0.0945795327425003,
         0.508561909198761, 0.8593339920043945, 0.48387303948402405},
        {0.202505424618721, 0.07281960546970367, 0.9075759053230286,
         0.22868505120277405, 0.41800838708877563, 0.9848059415817261}},
       {{0.7975450158119202, 0.4627344310283661, 0.4753023087978363,
         0.414465069770813, 0.9431841969490051, 0.23343776166439056},
        {0.09680674225091934, 0.2517237067222595, 0.6193826198577881,
         0.778533399105072, 0.8912897109985352, 0.019204892218112946},
        {0.9608561992645264, 0.31926825642585754, 0.7964099049568176,
         0.24101924896240234, 0.3736138939857483, 0.6935641169548035},
        {0.1898697316646576, 0.12400223314762115, 0.43292346596717834,
         0.25499454140663147, 0.2011285275220871, 0.7178841829299927},
        {0.44396084547042847, 0.5066582560539246, 0.1913420706987381,
         0.055875178426504135, 0.8792842030525208, 0.43545711040496826},
        {0.1373811662197113, 0.3603867292404175, 0.21390455961227417,
         0.0001549031148897484, 0.6953479051589966, 0.3896408975124359}}}};
  const int32_t blocksize = 2;
  ONNC_RUNTIME_depthtospace_float(NULL, (float *)input_0, input_0_ndim,
                                  input_0_dims, (float *)output_0,
                                  output_0_ndim, output_0_dims, blocksize);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 2 * 6 * 6; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_DepthToSpace, test_depthtospace_example) {
  const float input_0[1][4][2][3] = {
      {{{0.0, 1.0, 2.0}, {3.0, 4.0, 5.0}},
       {{6.0, 7.0, 8.0}, {9.0, 10.0, 11.0}},
       {{12.0, 13.0, 14.0}, {15.0, 16.0, 17.0}},
       {{18.0, 19.0, 20.0}, {21.0, 22.0, 23.0}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 4, 2, 3};
  float output_0[1][1][4][6];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 1, 4, 6};
  const float answer_0[1][1][4][6] = {{{{0.0, 6.0, 1.0, 7.0, 2.0, 8.0},
                                        {12.0, 18.0, 13.0, 19.0, 14.0, 20.0},
                                        {3.0, 9.0, 4.0, 10.0, 5.0, 11.0},
                                        {15.0, 21.0, 16.0, 22.0, 17.0, 23.0}}}};
  const int32_t blocksize = 2;
  ONNC_RUNTIME_depthtospace_float(NULL, (float *)input_0, input_0_ndim,
                                  input_0_dims, (float *)output_0,
                                  output_0_ndim, output_0_dims, blocksize);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 1 * 4 * 6; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

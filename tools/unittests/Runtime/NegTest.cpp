#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Neg, test_neg_example) {
  const float input_0[2] = {-4.0, 2.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {2};
  float output_0[2];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {2};
  const float answer_0[2] = {4.0, -2.0};
  ONNC_RUNTIME_neg_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Neg, test_neg) {
  const float input_0[3][4][5] = {
      {{-0.6034616231918335, 0.7166189551353455, -0.5096604824066162,
        -1.0542584657669067, -1.4971129894256592},
       {0.016643784940242767, 0.4445863366127014, -0.0970761626958847,
        -0.6156603097915649, 0.6310669779777527},
       {1.0057084560394287, 0.43897807598114014, 0.630992591381073,
        -0.35669082403182983, -1.046185851097107},
       {1.0235775709152222, -0.8612990975379944, -1.4943314790725708,
        -0.38993608951568604, 1.608566403388977}},
      {{-0.028194904327392578, -0.804499626159668, 0.035122305154800415,
        0.2762879729270935, -0.12025824189186096},
       {-1.9194048643112183, -1.0244570970535278, 0.6988343000411987,
        -0.1372401863336563, 0.7594848871231079},
       {2.197619915008545, 2.3295373916625977, 1.2693418264389038,
        -0.9691404104232788, 0.23899434506893158},
       {-1.065935730934143, 1.3730988502502441, 1.0813027620315552,
        -0.07879739999771118, 0.05324358865618706}},
      {{-0.9678182601928711, 0.748898446559906, 0.20075835287570953,
        -0.6168467998504639, -1.26618492603302},
       {-0.8799019455909729, -0.022806795313954353, 0.38751810789108276,
        0.8910318613052368, -0.6614894866943359},
       {0.6794732213020325, 0.6539127230644226, 0.580129861831665,
        0.35036981105804443, -0.42725396156311035},
       {-0.16209769248962402, -0.21319444477558136, 1.7327773571014404,
        -0.8690214157104492, -0.5202159881591797}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.6034616231918335, -0.7166189551353455, 0.5096604824066162,
        1.0542584657669067, 1.4971129894256592},
       {-0.016643784940242767, -0.4445863366127014, 0.0970761626958847,
        0.6156603097915649, -0.6310669779777527},
       {-1.0057084560394287, -0.43897807598114014, -0.630992591381073,
        0.35669082403182983, 1.046185851097107},
       {-1.0235775709152222, 0.8612990975379944, 1.4943314790725708,
        0.38993608951568604, -1.608566403388977}},
      {{0.028194904327392578, 0.804499626159668, -0.035122305154800415,
        -0.2762879729270935, 0.12025824189186096},
       {1.9194048643112183, 1.0244570970535278, -0.6988343000411987,
        0.1372401863336563, -0.7594848871231079},
       {-2.197619915008545, -2.3295373916625977, -1.2693418264389038,
        0.9691404104232788, -0.23899434506893158},
       {1.065935730934143, -1.3730988502502441, -1.0813027620315552,
        0.07879739999771118, -0.05324358865618706}},
      {{0.9678182601928711, -0.748898446559906, -0.20075835287570953,
        0.6168467998504639, 1.26618492603302},
       {0.8799019455909729, 0.022806795313954353, -0.38751810789108276,
        -0.8910318613052368, 0.6614894866943359},
       {-0.6794732213020325, -0.6539127230644226, -0.580129861831665,
        -0.35036981105804443, 0.42725396156311035},
       {0.16209769248962402, 0.21319444477558136, -1.7327773571014404,
        0.8690214157104492, 0.5202159881591797}}};
  ONNC_RUNTIME_neg_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

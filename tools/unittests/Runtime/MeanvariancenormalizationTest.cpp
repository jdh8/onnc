#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_MeanVarianceNormalization, test_mvn) {
  const float input_0[3][3][3][1] = {
      {{{0.8439682722091675}, {0.5665143728256226}, {0.058367349207401276}},
       {{0.029163669794797897}, {0.12964272499084473}, {0.5060197114944458}},
       {{0.7953830361366272}, {0.9411345720291138}, {0.9546573162078857}}},
      {{{0.17730942368507385}, {0.46192094683647156}, {0.264804482460022}},
       {{0.6746842265129089}, {0.01665256917476654}, {0.6247307658195496}},
       {{0.9240844249725342}, {0.9722340703010559}, {0.1196569874882698}}},
      {{{0.41356155276298523}, {0.9129372835159302}, {0.5933007597923279}},
       {{0.8192993402481079}, {0.7862604260444641}, {0.11799798905849457}},
       {{0.692484438419342}, {0.5411941409111023}, {0.07513222843408585}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {3, 3, 3, 1};
  float output_0[3][3][3][1];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {3, 3, 3, 1};
  const float answer_0[3][3][3][1] = {
      {{{1.3546422719955444}, {0.330534964799881}, {-1.545081377029419}},
       {{-1.2106764316558838}, {-0.8925951719284058}, {0.2988813519477844}},
       {{0.38083088397979736}, {0.8180879354476929}, {0.8586563467979431}}},
      {{{-1.106055498123169}, {-0.05552877113223076}, {-0.783103346824646}},
       {{0.832813560962677}, {-1.2502820491790771}, {0.6746785640716553}},
       {{0.7669371962547302}, {0.9113869071006775}, {-1.6463584899902344}}},
      {{{-0.23402763903141022}, {1.60921311378479}, {0.42940592765808105}},
       {{1.2906138896942139}, {1.1860244274139404}, {-0.9294582605361938}},
       {{0.07213339954614639}, {-0.381740003824234}, {-1.7799333333969116}}}};
  const int32_t across_channels = 0;
  const int32_t normalize_variance = 0;
  ONNC_RUNTIME_meanvariancenormalization_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)output_0,
      output_0_ndim, output_0_dims, across_channels, normalize_variance);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 3 * 3 * 1; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

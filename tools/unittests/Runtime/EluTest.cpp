#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Elu, test_elu_example)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {-1.2642411, 0.0, 1.0};
  const float   alpha           = 2.0;
  using dragonite::norm;

  ONNC_RUNTIME_elu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_Elu, test_elu)
{
  const float input_0[] = {
    -1.6091576, -0.02945187, 1.1697373,   -1.2471015,  -1.8558716,   0.07772106,  1.3536243,   -1.0857557,  -0.8116001,
    -1.3460217, -0.18459192, -2.890786,   -0.4100242,  0.9145086,    -0.8216514,  1.1005902,   0.038615644, -1.5007224,
    1.4843014,  -0.48143566, 3.184844,    0.21342042,  -1.1048785,   -1.3285104,  -0.75848013, 0.68498755,  -0.50627786,
    0.6147994,  0.7001719,   -0.25088722, -0.11090002, -0.024824664, -0.17702729, -2.522412,   -0.17248471, 1.5881417,
    0.07962715, -0.1116107,  -0.82886374, -0.9956089,  1.268897,     -0.27072877, -0.9001628,  -0.68196756, -0.2561902,
    0.8998382,  -1.7793051,  -0.7029058,  -0.43370032, -1.0173745,   -1.0934639,  -0.43460196, -1.3425949,  -1.803658,
    0.18725057, 0.3684321,   -1.9824396,  0.25960314,  -0.3676993,   -0.32530248};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -1.5998878, -0.05804479, 1.1697373,  -1.4253272,  -1.6873667,  0.07772106,  1.3536243,   -1.324707,   -1.1117064,
    -1.4794526, -0.33711302, -1.8889349, -0.67273164, 0.9145086,   -1.1205902,  1.1005902,   0.038615644, -1.5540619,
    1.4843014,  -0.7642087,  3.184844,   0.21342042,  -1.3374977,  -1.470257,   -1.0632445,  0.68498755,  -0.7945303,
    0.6147994,  0.7001719,   -0.4437797, -0.20994353, -0.04903817, -0.32448614, -1.8394685,  -0.3168577,  1.5881417,
    0.07962715, -0.21121526, -1.12691,   -1.2610033,  1.268897,    -0.4743533,  -1.1869931,  -0.9887576,  -0.4520105,
    0.8998382,  -1.6624893,  -1.0097111, -0.7037871,  -1.2769141,  -1.3298922,  -0.70495534, -1.4776658,  -1.6706094,
    0.18725057, 0.3684321,   -1.7245344, 0.25960314,  -0.6153493,  -0.5553824};
  const float alpha = 2.0;
  using dragonite::norm;

  ONNC_RUNTIME_elu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_Elu, test_elu_default)
{
  const float input_0[] = {
    -1.2377764,  0.4138327,  0.85144436,    0.15713452,  0.51722753,  0.556019,    0.9351723,  0.3244644,   -1.2575125,
    0.2066917,   0.47573474, -0.4600734,    0.684211,    0.36819762,  0.7340608,   1.0567111,  1.328681,    -0.5938332,
    -0.81628644, -2.3584173, 0.6841179,     1.6625555,   -0.27837747, 1.0252233,   0.7017296,  -0.49147153, -0.24924526,
    1.1925974,   1.3524355,  0.91746956,    -1.6427997,  1.225841,    -0.7481023,  -1.6808391, 0.31233957,  0.096714236,
    0.63169,     1.3475711,  -0.0041610654, 0.050824188, -2.4423103,  -0.15366837, 0.1798407,  0.018258043, 0.7949669,
    0.705767,    -1.053394,  0.37011024,    0.79971683,  1.5276589,   -0.9441235,  0.5004112,  -0.4436783,  0.92614174,
    -0.06467019, -1.2507418, -0.11781562,   -0.8406919,  1.3444256,   -1.7076805};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -0.70997155, 0.4138327,  0.85144436,   0.15713452,  0.51722753, 0.556019,    0.9351723,   0.3244644,   -0.7156395,
    0.2066917,   0.47573474, -0.36876267,  0.684211,    0.36819762, 0.7340608,   1.0567111,   1.328681,    -0.44779348,
    -0.55792975, -0.9054302, 0.6841179,    1.6625555,   -0.242989,  1.0252233,   0.7017296,   -0.38827443, -0.22061121,
    1.1925974,   1.3524355,  0.91746956,   -0.8065623,  1.225841,   -0.5267362,  -0.81378233, 0.31233957,  0.096714236,
    0.63169,     1.3475711,  -0.004152417, 0.050824188, -0.9130403, -0.14244366, 0.1798407,   0.018258043, 0.7949669,
    0.705767,    -0.6512479, 0.37011024,   0.79971683,  1.5276589,  -0.6109796,  0.5004112,   -0.35832816, 0.92614174,
    -0.06262344, -0.7137077, -0.11114007,  -0.5685881,  1.3444256,  -0.8187142};
  const float alpha = 1;
  using dragonite::norm;

  ONNC_RUNTIME_elu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

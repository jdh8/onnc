#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Exp, test_exp_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {0.3678794503211975, 1.0, 2.7182817459106445};
  ONNC_RUNTIME_exp_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Exp, test_exp) {
  const float input_0[3][4][5] = {
      {{-0.4712076783180237, 1.0794950723648071, -0.7318805456161499,
        1.3714869022369385, -1.4264464378356934},
       {0.5973626375198364, -0.3709377646446228, -2.21486496925354,
        -0.3623334467411041, 0.12509386241436005},
       {0.9374606609344482, -0.5943278670310974, 0.6577938795089722,
        -1.8335033655166626, 0.43088194727897644},
       {0.46754199266433716, -0.4295256733894348, -0.06545629352331161,
        -0.6995227932929993, -0.5485853552818298}},
      {{0.3851425051689148, -0.22890570759773254, -0.3341899514198303,
        0.8307181596755981, 0.24618053436279297},
       {1.0161453485488892, -0.8240183591842651, 0.03580383583903313,
        2.261777877807617, 0.03782625496387482},
       {1.0348937511444092, 0.771354615688324, 0.7232308983802795,
        1.2010546922683716, -1.2256168127059937},
       {-1.0252920389175415, -0.07081430405378342, -0.5788468718528748,
        0.5138588547706604, -0.6886011958122253}},
      {{0.6113747358322144, -0.8250109553337097, -0.6112545132637024,
        0.7251720428466797, -0.5842198729515076},
       {0.7904541492462158, 0.7619649767875671, -0.417627215385437,
        0.08678801357746124, -1.271458625793457},
       {1.2607769966125488, 1.219298243522644, 0.39087024331092834,
        1.7059670686721802, 0.018079837784171104},
       {-0.8231068253517151, 0.07311514019966125, 0.47340428829193115,
        -0.05399809032678604, -0.004209935199469328}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.6242479085922241, 2.943192958831787, 0.4810035824775696,
        3.941206455230713, 0.24016083776950836},
       {1.8173195123672485, 0.6900869011878967, 0.10916825383901596,
        0.696050226688385, 1.1332547664642334},
       {2.5534889698028564, 0.5519334077835083, 1.9305286407470703,
        0.15985256433486938, 1.5386139154434204},
       {1.5960662364959717, 0.6508176922798157, 0.9366399645805359,
        0.496822327375412, 0.5777665376663208}},
      {{1.4698237180709839, 0.7954035401344299, 0.7159177660942078,
        2.294966220855713, 1.279130458831787},
       {2.7625255584716797, 0.43866539001464844, 1.0364525318145752,
        9.600141525268555, 1.0385507345199585},
       {2.814807176589966, 2.162693977355957, 2.061081647872925,
        3.323620557785034, 0.29357656836509705},
       {0.3586916923522949, 0.9316349029541016, 0.5605443716049194,
        1.6717296838760376, 0.5022781491279602}},
      {{1.8429632186889648, 0.4382301867008209, 0.5426696538925171,
        2.0650863647460938, 0.5575406551361084},
       {2.204397439956665, 2.142482042312622, 0.6586077213287354,
        1.0906654596328735, 0.28042230010032654},
       {3.5281617641448975, 3.3848116397857666, 1.478266716003418,
        5.50670862197876, 1.0182442665100098},
       {0.43906542658805847, 1.0758544206619263, 1.6054502725601196,
        0.9474338889122009, 0.9957988858222961}}};
  ONNC_RUNTIME_exp_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

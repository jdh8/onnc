#if defined(__GNUC__) || defined(_MSC_VER)
#define restrict __restrict
#else
#define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "relative-error.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Pad, test_constant_pad) {
  const float input_0[] = {
      -0.04212442, -0.29236916, -0.10833487, -0.0010563689, -0.53493255,
      -0.47200945, -2.2524734,  -1.657748,   0.7718239,     0.26141825,
      -0.7532661,  0.49277553,  -1.6255755,  0.20982657,    -0.1748645,
      -0.6648369,  0.85444856,  0.081719294, 0.14911373,    1.0556215,
      1.1423702,   0.09179126,  0.48481143,  -0.87223125,   0.18698697,
      -0.46808434, -1.3677338,  -0.76749015, -1.3582292,    -1.077016,
      0.7813028,   0.11774467,  -0.09409151, 0.9658844,     0.74623233,
      0.7893542,   -1.3911285,  0.8654689,   0.88598686,    0.27906337,
      -0.4225643,  -0.519941,   0.52736425,  0.5721289,     -0.43984383,
      -1.2032223,  -0.24383911, -1.6792694,  -1.5427263,    1.4010288,
      -1.0109829,  0.8095731,   0.13902925,  1.3612945,     -0.31188476,
      0.92482156,  -0.66717726, -0.72593254, 0.58070457,    0.33849958};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[252];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 7, 12};
  const float answer_0[] = {
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.04212442, -0.29236916, -0.10833487,
      -0.0010563689, -0.53493255, 1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.47200945, -2.2524734,  -1.657748,
      0.7718239,     0.26141825,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.7532661,  0.49277553,  -1.6255755,
      0.20982657,    -0.1748645,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.6648369,  0.85444856,  0.081719294,
      0.14911373,    1.0556215,   1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.1423702,   0.09179126,  0.48481143,
      -0.87223125,   0.18698697,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.46808434, -1.3677338,  -0.76749015,
      -1.3582292,    -1.077016,   1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 0.7813028,   0.11774467,  -0.09409151,
      0.9658844,     0.74623233,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 0.7893542,   -1.3911285,  0.8654689,
      0.88598686,    0.27906337,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -0.4225643,  -0.519941,   0.52736425,
      0.5721289,     -0.43984383, 1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -1.2032223,  -0.24383911, -1.6792694,
      -1.5427263,    1.4010288,   1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, -1.0109829,  0.8095731,   0.13902925,
      1.3612945,     -0.31188476, 1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 0.92482156,  -0.66717726, -0.72593254,
      0.58070457,    0.33849958,  1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2,
      1.2,           1.2,         1.2, 1.2,         1.2,         1.2};
  const char mode[] = "constant";
  const int32_t pads[] = {0, 0, 1, 3, 0, 0, 2, 4};
  const int32_t number_of_pads = 8;
  const float value = 1.2000000476837158;
  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0,
                         output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t *>(pads), number_of_pads, value);
  ASSERT_TRUE(relative_error(output_0, answer_0, 252) < 1e-5f);
}

SKYPAT_F(Operator_Pad, test_edge_pad) {
  const float input_0[] = {
      -0.117798805, 0.7170143,    0.35216162,  -1.0410084, 1.2143898,
      -0.14693539,  1.4003439,    2.6762428,   2.310256,   -0.8164095,
      -0.1384455,   0.7988325,    -0.12988435, -1.3529041, -2.0314333,
      -0.19619545,  0.4514085,    1.2297897,   -1.3893467, 1.415801,
      -0.6681058,   1.1035606,    -0.7550317,  1.3302916,  -0.48674235,
      1.1832713,    -0.73734576,  0.69436675,  -1.2135124, -0.2901519,
      -1.1227944,   0.06956565,   -1.3158754,  -2.0507534, 2.8088698,
      -0.09519846,  -0.005297412, -0.79750156, 1.6163638,  -0.7978907,
      -1.3565844,   1.6803131,    0.36653042,  0.9475508,  0.014321038,
      1.5290424,    -0.37065914,  -1.7144202,  0.4776914,  0.3069965,
      0.9661154,    -0.75026464,  1.7071297,   0.32309434, 1.5068598,
      0.038246203,  -0.1502343,   1.5589288,   1.518012,   -0.8143076};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[126];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float answer_0[] = {
      -0.117798805, -0.117798805, 0.7170143,    0.35216162,   -1.0410084,
      1.2143898,    1.2143898,    -0.117798805, -0.117798805, 0.7170143,
      0.35216162,   -1.0410084,   1.2143898,    1.2143898,    -0.14693539,
      -0.14693539,  1.4003439,    2.6762428,    2.310256,     -0.8164095,
      -0.8164095,   -0.1384455,   -0.1384455,   0.7988325,    -0.12988435,
      -1.3529041,   -2.0314333,   -2.0314333,   -0.19619545,  -0.19619545,
      0.4514085,    1.2297897,    -1.3893467,   1.415801,     1.415801,
      -0.19619545,  -0.19619545,  0.4514085,    1.2297897,    -1.3893467,
      1.415801,     1.415801,     -0.6681058,   -0.6681058,   1.1035606,
      -0.7550317,   1.3302916,    -0.48674235,  -0.48674235,  -0.6681058,
      -0.6681058,   1.1035606,    -0.7550317,   1.3302916,    -0.48674235,
      -0.48674235,  1.1832713,    1.1832713,    -0.73734576,  0.69436675,
      -1.2135124,   -0.2901519,   -0.2901519,   -1.1227944,   -1.1227944,
      0.06956565,   -1.3158754,   -2.0507534,   2.8088698,    2.8088698,
      -0.09519846,  -0.09519846,  -0.005297412, -0.79750156,  1.6163638,
      -0.7978907,   -0.7978907,   -0.09519846,  -0.09519846,  -0.005297412,
      -0.79750156,  1.6163638,    -0.7978907,   -0.7978907,   -1.3565844,
      -1.3565844,   1.6803131,    0.36653042,   0.9475508,    0.014321038,
      0.014321038,  -1.3565844,   -1.3565844,   1.6803131,    0.36653042,
      0.9475508,    0.014321038,  0.014321038,  1.5290424,    1.5290424,
      -0.37065914,  -1.7144202,   0.4776914,    0.3069965,    0.3069965,
      0.9661154,    0.9661154,    -0.75026464,  1.7071297,    0.32309434,
      1.5068598,    1.5068598,    0.038246203,  0.038246203,  -0.1502343,
      1.5589288,    1.518012,     -0.8143076,   -0.8143076,   0.038246203,
      0.038246203,  -0.1502343,   1.5589288,    1.518012,     -0.8143076,
      -0.8143076};
  const char mode[] = "edge";
  const int32_t pads[] = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float value = 0;
  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0,
                         output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t *>(pads), number_of_pads, value);
  ASSERT_TRUE(relative_error(output_0, answer_0, 126) < 1e-5f);
}

SKYPAT_F(Operator_Pad, test_reflect_pad) {
  const float input_0[] = {
      0.2521928,   0.052191507, 0.8708136,   0.40282068,  2.3461816,
      0.18488133,  0.8913262,   -0.95409244, -0.44731763, 1.3709105,
      1.3707373,   -0.31824932, -0.78856444, 0.48914656,  0.8233771,
      -0.24734217, -0.22456342, 0.031562224, -0.38028958, -0.035287265,
      0.6829678,   1.199172,    -0.0690752,  1.5097321,   -1.3210255,
      0.32374322,  -0.5609972,  0.29519057,  -0.93218863, 0.2892977,
      -0.6093479,  -1.9277471,  0.6727312,   1.007693,    0.12818196,
      -0.38664714, 0.096838236, 0.5517251,   0.575271,    -0.50416553,
      -0.9696563,  -1.6323302,  1.1033285,   0.9220659,   -0.6538293,
      0.32303187,  -1.1059529,  1.795834,    -0.3329952,  -1.0654801,
      0.2485167,   -0.72840095, -0.8931606,  0.22127813,  -0.21128333,
      -0.6784332,  -0.7799332,  -1.5158446,  0.98995256,  -0.8186662};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[126];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float answer_0[] = {
      0.8913262,   0.18488133,  0.8913262,   -0.95409244,  -0.44731763,
      1.3709105,   -0.44731763, 0.052191507, 0.2521928,    0.052191507,
      0.8708136,   0.40282068,  2.3461816,   0.40282068,   0.8913262,
      0.18488133,  0.8913262,   -0.95409244, -0.44731763,  1.3709105,
      -0.44731763, -0.31824932, 1.3707373,   -0.31824932,  -0.78856444,
      0.48914656,  0.8233771,   0.48914656,  -0.22456342,  -0.24734217,
      -0.22456342, 0.031562224, -0.38028958, -0.035287265, -0.38028958,
      -0.31824932, 1.3707373,   -0.31824932, -0.78856444,  0.48914656,
      0.8233771,   0.48914656,  -0.5609972,  0.32374322,   -0.5609972,
      0.29519057,  -0.93218863, 0.2892977,   -0.93218863,  1.199172,
      0.6829678,   1.199172,    -0.0690752,  1.5097321,    -1.3210255,
      1.5097321,   -0.5609972,  0.32374322,  -0.5609972,   0.29519057,
      -0.93218863, 0.2892977,   -0.93218863, -1.9277471,   -0.6093479,
      -1.9277471,  0.6727312,   1.007693,    0.12818196,   1.007693,
      0.096838236, -0.38664714, 0.096838236, 0.5517251,    0.575271,
      -0.50416553, 0.575271,    -1.9277471,  -0.6093479,   -1.9277471,
      0.6727312,   1.007693,    0.12818196,  1.007693,     -1.1059529,
      0.32303187,  -1.1059529,  1.795834,    -0.3329952,   -1.0654801,
      -0.3329952,  -1.6323302,  -0.9696563,  -1.6323302,   1.1033285,
      0.9220659,   -0.6538293,  0.9220659,   -1.1059529,   0.32303187,
      -1.1059529,  1.795834,    -0.3329952,  -1.0654801,   -0.3329952,
      -0.72840095, 0.2485167,   -0.72840095, -0.8931606,   0.22127813,
      -0.21128333, 0.22127813,  -0.7799332,  -0.6784332,   -0.7799332,
      -1.5158446,  0.98995256,  -0.8186662,  0.98995256,   -0.72840095,
      0.2485167,   -0.72840095, -0.8931606,  0.22127813,   -0.21128333,
      0.22127813};
  const char mode[] = "reflect";
  const int32_t pads[] = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float value = 0;
  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0,
                         output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t *>(pads), number_of_pads, value);
  ASSERT_TRUE(relative_error(output_0, answer_0, 126) < 1e-5f);
}

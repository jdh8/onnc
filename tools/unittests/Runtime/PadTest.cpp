#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Pad, test_constant_pad)
{
  const float input_0[] = {
    -0.092093505, -1.8123678,  -0.93014383, 0.69406044,  0.7254628,   0.56938934,  1.2384543,   0.122005716, 0.7883798,
    -0.51112056,  0.119958386, 0.29859918,  0.49784824,  -1.7792127,  -1.1669159,  0.98530793,  0.4883733,   -1.2872295,
    0.14893797,   0.28886512,  -1.9442099,  -0.7348945,  0.51004606,  0.21623403,  0.037701994, -0.89533126, -2.8064468,
    -0.2734931,   -1.0082686,  -3.5569549,  0.689337,    -0.39561495, -0.81412315, -0.47918355, -0.71596783, 1.0388263,
    1.2758684,    0.42948586,  -0.22494164, -0.30478406, -0.22339602, -1.9661975,  0.10316335,  1.7299451,   0.12783454,
    0.18099913,   -0.5734064,  0.06813027,  -0.34259403, -0.72939104, -0.48007298, -0.84075767, 0.47790056,  0.7135809,
    -0.097620934, 0.21599503,  -0.6734312,  -0.20773527, -0.27111146, -0.86025965};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float         output_0[252];
  const int32_t output_0_ndim   = 4;
  const int32_t output_0_dims[] = {1, 3, 7, 12};
  const float   answer_0[]      = {
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, -0.092093505, -1.8123678,  -0.93014383, 0.69406044,  0.7254628,    1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.56938934,   1.2384543,   0.122005716, 0.7883798,   -0.51112056,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.119958386,  0.29859918,  0.49784824,  -1.7792127,  -1.1669159,   1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.98530793,   0.4883733,   -1.2872295,  0.14893797,  0.28886512,   1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, -1.9442099,   -0.7348945,  0.51004606,  0.21623403,  0.037701994,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, -0.89533126,  -2.8064468,  -0.2734931,  -1.0082686,  -3.5569549,   1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.689337,     -0.39561495, -0.81412315, -0.47918355, -0.71596783,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.0388263,    1.2758684,   0.42948586,  -0.22494164, -0.30478406,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, -0.22339602,  -1.9661975,  0.10316335,  1.7299451,   0.12783454,   1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.18099913,   -0.5734064,  0.06813027,  -0.34259403, -0.72939104,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, -0.48007298,  -0.84075767, 0.47790056,  0.7135809,   -0.097620934, 1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 0.21599503,   -0.6734312,  -0.20773527, -0.27111146, -0.86025965,  1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2,
    1.2, 1.2, 1.2, 1.2,          1.2,         1.2,         1.2,         1.2,          1.2, 1.2, 1.2, 1.2};
  const char    mode[]         = "constant";
  const int32_t pads[]         = {0, 0, 1, 3, 0, 0, 2, 4};
  const int32_t number_of_pads = 8;
  const float   value          = 1.2000000476837158;
  using dragonite::norm;

  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t*>(pads), number_of_pads, value);
  ASSERT_TRUE(norm(answer_0, output_0, 252) <= 1e-5 * norm(answer_0, 252));
}

SKYPAT_F(Operator_Pad, test_edge_pad)
{
  const float input_0[] = {-0.4451346,  -0.5761925,   0.53120786,  1.1957693,   -0.6126996,  -0.47571057, -0.041491184,
                           0.7986074,   -0.38658792,  0.26165515,  0.55729455,  -0.14204492, -2.1925159,  -0.5786902,
                           0.4588133,   -0.8436028,   0.3302806,   1.3992825,   0.21433996,  -1.1137666,  -0.17686121,
                           -0.5321528,  -1.6741601,   1.3111166,   0.7868696,   1.4028126,   -0.25852442, 0.5474415,
                           -0.24522825, -0.5095262,   0.11856613,  -1.348274,   -0.10125042, 0.11348104,  -1.1314719,
                           -0.39660057, -0.3002875,   1.4348557,   -0.24622658, -0.06653018, -0.3749786,  -1.1268016,
                           -0.05525678, 1.120294,     -0.16321474, 0.042289775, -0.78958905, 0.14421803,  0.6865621,
                           -0.35263404, 1.6244502,    -2.210522,   0.4079519,   0.96889514,  -0.09884446, 0.9539096,
                           0.9183526,   -0.023109104, -1.0823026,  -0.44029927};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float         output_0[126];
  const int32_t output_0_ndim   = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float   answer_0[]      = {
    -0.4451346,   -0.4451346,  -0.5761925,   0.53120786,   1.1957693,   -0.6126996,  -0.6126996,  -0.4451346,
    -0.4451346,   -0.5761925,  0.53120786,   1.1957693,    -0.6126996,  -0.6126996,  -0.47571057, -0.47571057,
    -0.041491184, 0.7986074,   -0.38658792,  0.26165515,   0.26165515,  0.55729455,  0.55729455,  -0.14204492,
    -2.1925159,   -0.5786902,  0.4588133,    0.4588133,    -0.8436028,  -0.8436028,  0.3302806,   1.3992825,
    0.21433996,   -1.1137666,  -1.1137666,   -0.8436028,   -0.8436028,  0.3302806,   1.3992825,   0.21433996,
    -1.1137666,   -1.1137666,  -0.17686121,  -0.17686121,  -0.5321528,  -1.6741601,  1.3111166,   0.7868696,
    0.7868696,    -0.17686121, -0.17686121,  -0.5321528,   -1.6741601,  1.3111166,   0.7868696,   0.7868696,
    1.4028126,    1.4028126,   -0.25852442,  0.5474415,    -0.24522825, -0.5095262,  -0.5095262,  0.11856613,
    0.11856613,   -1.348274,   -0.10125042,  0.11348104,   -1.1314719,  -1.1314719,  -0.39660057, -0.39660057,
    -0.3002875,   1.4348557,   -0.24622658,  -0.06653018,  -0.06653018, -0.39660057, -0.39660057, -0.3002875,
    1.4348557,    -0.24622658, -0.06653018,  -0.06653018,  -0.3749786,  -0.3749786,  -1.1268016,  -0.05525678,
    1.120294,     -0.16321474, -0.16321474,  -0.3749786,   -0.3749786,  -1.1268016,  -0.05525678, 1.120294,
    -0.16321474,  -0.16321474, 0.042289775,  0.042289775,  -0.78958905, 0.14421803,  0.6865621,   -0.35263404,
    -0.35263404,  1.6244502,   1.6244502,    -2.210522,    0.4079519,   0.96889514,  -0.09884446, -0.09884446,
    0.9539096,    0.9539096,   0.9183526,    -0.023109104, -1.0823026,  -0.44029927, -0.44029927, 0.9539096,
    0.9539096,    0.9183526,   -0.023109104, -1.0823026,   -0.44029927, -0.44029927};
  const char    mode[]         = "edge";
  const int32_t pads[]         = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float   value          = 0;
  using dragonite::norm;

  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t*>(pads), number_of_pads, value);
  ASSERT_TRUE(norm(answer_0, output_0, 126) <= 1e-5 * norm(answer_0, 126));
}

SKYPAT_F(Operator_Pad, test_reflect_pad)
{
  const float input_0[] = {-0.3843221,  1.6741041,    0.90670866,  -2.7606714,  -0.05862489,  1.316654,    -0.49266875,
                           2.0478504,   0.5468163,    0.09928845,  -1.0181369,  -0.31773296,  -0.87464947, 0.11993038,
                           0.28682232,  -0.43753672,  0.12151625,  1.8491852,   0.78349525,   0.978001,    0.3222529,
                           -0.75146985, 1.4519343,    0.6626032,   -1.1546242,  -2.3008966,   1.5129292,   -0.57196313,
                           -2.2568464,  1.0229416,    -1.6928842,  0.7699983,   0.684771,     -0.26535052, 0.8334524,
                           2.6128724,   -0.3384422,   -0.46695477, -0.33914128, 0.40133798,   -0.57322705, -0.79417723,
                           -0.9113238,  -0.073598556, -2.4589818,  -1.045919,   -0.3748738,   -0.06257818, -0.4056735,
                           0.5131191,   -0.10891554,  -1.0319763,  2.0385764,   -0.044382054, -1.2319655,  -0.38156715,
                           0.71420443,  2.938909,     -1.8216445,  0.43978417};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float         output_0[126];
  const int32_t output_0_ndim   = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float   answer_0[]      = {
    -0.49266875, 1.316654,     -0.49266875, 2.0478504,    0.5468163,   0.09928845,   0.5468163,   1.6741041,
    -0.3843221,  1.6741041,    0.90670866,  -2.7606714,   -0.05862489, -2.7606714,   -0.49266875, 1.316654,
    -0.49266875, 2.0478504,    0.5468163,   0.09928845,   0.5468163,   -0.31773296,  -1.0181369,  -0.31773296,
    -0.87464947, 0.11993038,   0.28682232,  0.11993038,   0.12151625,  -0.43753672,  0.12151625,  1.8491852,
    0.78349525,  0.978001,     0.78349525,  -0.31773296,  -1.0181369,  -0.31773296,  -0.87464947, 0.11993038,
    0.28682232,  0.11993038,   1.5129292,   -2.3008966,   1.5129292,   -0.57196313,  -2.2568464,  1.0229416,
    -2.2568464,  -0.75146985,  0.3222529,   -0.75146985,  1.4519343,   0.6626032,    -1.1546242,  0.6626032,
    1.5129292,   -2.3008966,   1.5129292,   -0.57196313,  -2.2568464,  1.0229416,    -2.2568464,  0.7699983,
    -1.6928842,  0.7699983,    0.684771,    -0.26535052,  0.8334524,   -0.26535052,  -0.3384422,  2.6128724,
    -0.3384422,  -0.46695477,  -0.33914128, 0.40133798,   -0.33914128, 0.7699983,    -1.6928842,  0.7699983,
    0.684771,    -0.26535052,  0.8334524,   -0.26535052,  -0.3748738,  -1.045919,    -0.3748738,  -0.06257818,
    -0.4056735,  0.5131191,    -0.4056735,  -0.79417723,  -0.57322705, -0.79417723,  -0.9113238,  -0.073598556,
    -2.4589818,  -0.073598556, -0.3748738,  -1.045919,    -0.3748738,  -0.06257818,  -0.4056735,  0.5131191,
    -0.4056735,  -1.0319763,   -0.10891554, -1.0319763,   2.0385764,   -0.044382054, -1.2319655,  -0.044382054,
    0.71420443,  -0.38156715,  0.71420443,  2.938909,     -1.8216445,  0.43978417,   -1.8216445,  -1.0319763,
    -0.10891554, -1.0319763,   2.0385764,   -0.044382054, -1.2319655,  -0.044382054};
  const char    mode[]         = "reflect";
  const int32_t pads[]         = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float   value          = 0;
  using dragonite::norm;

  ONNC_RUNTIME_pad_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, mode,
                         const_cast<int32_t*>(pads), number_of_pads, value);
  ASSERT_TRUE(norm(answer_0, output_0, 126) <= 1e-5 * norm(answer_0, 126));
}

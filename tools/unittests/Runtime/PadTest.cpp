#include "dragonite.hpp"
SKYPAT_F(Operator_Pad, test_constant_pad) {
  const float input_0[] = {
      1.5054712,    -0.56956905, -0.58066034, 1.1887441,   -0.14544806,
      -0.784168,    0.7031572,   -1.4075103,  0.7631876,   0.13007085,
      -0.7127822,   -0.6412665,  0.48767096,  -0.31799304, -0.25547436,
      -1.8544096,   1.2778486,   -0.23869464, 1.3093383,   0.19864467,
      2.3816879,    -1.5252798,  -0.26630315, 0.68223995,  0.17883627,
      -0.8214099,   -0.02056163, -0.5203254,  -0.35331985, -0.4265676,
      0.32150924,   1.4035228,   -0.84990704, 1.4939034,   0.19493718,
      0.81426215,   -0.36909255, 2.1848576,   1.2535812,   -0.47089252,
      -1.0261015,   1.1543591,   1.5211569,   -1.197902,   0.27916148,
      -0.6291067,   -0.39694208, 0.37155402,  0.22154236,  -2.264027,
      -0.008859542, -0.60250396, -0.29937986, 1.1970137,   -1.0338429,
      -0.24043608,  0.7831873,   1.4169139,   2.7295134,   0.6715779};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[252];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 7, 12};
  const float answer_0[] = {
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.5054712,    -0.56956905, -0.58066034,
      1.1887441,   -0.14544806, 1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.784168,    0.7031572,   -1.4075103,
      0.7631876,   0.13007085,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.7127822,   -0.6412665,  0.48767096,
      -0.31799304, -0.25547436, 1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -1.8544096,   1.2778486,   -0.23869464,
      1.3093383,   0.19864467,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 2.3816879,    -1.5252798,  -0.26630315,
      0.68223995,  0.17883627,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.8214099,   -0.02056163, -0.5203254,
      -0.35331985, -0.4265676,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 0.32150924,   1.4035228,   -0.84990704,
      1.4939034,   0.19493718,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 0.81426215,   -0.36909255, 2.1848576,
      1.2535812,   -0.47089252, 1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -1.0261015,   1.1543591,   1.5211569,
      -1.197902,   0.27916148,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.6291067,   -0.39694208, 0.37155402,
      0.22154236,  -2.264027,   1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.008859542, -0.60250396, -0.29937986,
      1.1970137,   -1.0338429,  1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, -0.24043608,  0.7831873,   1.4169139,
      2.7295134,   0.6715779,   1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2,
      1.2,         1.2,         1.2, 1.2,          1.2,         1.2};
  const auto mode = "constant";
  const int32_t pads[] = {0, 0, 1, 3, 0, 0, 2, 4};
  const int32_t number_of_pads = 8;
  const float value = 1.2000000476837158;
  ONNC_RUNTIME_pad_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims, mode,
                         (int32_t *)pads, number_of_pads, value);
  (dragonite::verify)(reinterpret_cast<float *>(output_0),
                      reinterpret_cast<const float *>(answer_0), 252);
}

SKYPAT_F(Operator_Pad, test_edge_pad) {
  const float input_0[] = {
      1.8489879,   -0.057586733, 0.9141287,   -0.9221141,  -1.0040058,
      -0.5967792,  1.0590796,    -0.6235865,  2.1024954,   0.74346614,
      0.5141542,   -1.7644804,   -0.19085178, -0.42971912, 0.4509222,
      0.8400943,   -2.151599,    -0.3471801,  -1.6014284,  -0.49803838,
      -0.24100982, 0.5048009,    -0.7011504,  -0.5728883,  0.64114237,
      0.88080305,  -1.4545017,   -0.09939588, -1.299764,   1.4140882,
      -0.21050629, 1.6461904,    -0.4408923,  0.5508093,   2.086811,
      0.11889171,  -0.7448512,   -0.6088969,  0.9843847,   0.42848837,
      1.1957296,   0.4690546,    -1.6578429,  0.60928595,  1.1848961,
      2.204264,    -2.9907546,   2.0530188,   1.2237887,   1.3055208,
      -1.339017,   -0.45704797,  0.6772673,   1.0578456,   1.1567165,
      -0.3537648,  0.96580267,   0.12118544,  0.28187993,  0.22405916};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[126];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float answer_0[] = {
      1.8489879,   1.8489879,   -0.057586733, 0.9141287,   -0.9221141,
      -1.0040058,  -1.0040058,  1.8489879,    1.8489879,   -0.057586733,
      0.9141287,   -0.9221141,  -1.0040058,   -1.0040058,  -0.5967792,
      -0.5967792,  1.0590796,   -0.6235865,   2.1024954,   0.74346614,
      0.74346614,  0.5141542,   0.5141542,    -1.7644804,  -0.19085178,
      -0.42971912, 0.4509222,   0.4509222,    0.8400943,   0.8400943,
      -2.151599,   -0.3471801,  -1.6014284,   -0.49803838, -0.49803838,
      0.8400943,   0.8400943,   -2.151599,    -0.3471801,  -1.6014284,
      -0.49803838, -0.49803838, -0.24100982,  -0.24100982, 0.5048009,
      -0.7011504,  -0.5728883,  0.64114237,   0.64114237,  -0.24100982,
      -0.24100982, 0.5048009,   -0.7011504,   -0.5728883,  0.64114237,
      0.64114237,  0.88080305,  0.88080305,   -1.4545017,  -0.09939588,
      -1.299764,   1.4140882,   1.4140882,    -0.21050629, -0.21050629,
      1.6461904,   -0.4408923,  0.5508093,    2.086811,    2.086811,
      0.11889171,  0.11889171,  -0.7448512,   -0.6088969,  0.9843847,
      0.42848837,  0.42848837,  0.11889171,   0.11889171,  -0.7448512,
      -0.6088969,  0.9843847,   0.42848837,   0.42848837,  1.1957296,
      1.1957296,   0.4690546,   -1.6578429,   0.60928595,  1.1848961,
      1.1848961,   1.1957296,   1.1957296,    0.4690546,   -1.6578429,
      0.60928595,  1.1848961,   1.1848961,    2.204264,    2.204264,
      -2.9907546,  2.0530188,   1.2237887,    1.3055208,   1.3055208,
      -1.339017,   -1.339017,   -0.45704797,  0.6772673,   1.0578456,
      1.1567165,   1.1567165,   -0.3537648,   -0.3537648,  0.96580267,
      0.12118544,  0.28187993,  0.22405916,   0.22405916,  -0.3537648,
      -0.3537648,  0.96580267,  0.12118544,   0.28187993,  0.22405916,
      0.22405916};
  const auto mode = "edge";
  const int32_t pads[] = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float value = 0;
  ONNC_RUNTIME_pad_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims, mode,
                         (int32_t *)pads, number_of_pads, value);
  (dragonite::verify)(reinterpret_cast<float *>(output_0),
                      reinterpret_cast<const float *>(answer_0), 126);
}

SKYPAT_F(Operator_Pad, test_reflect_pad) {
  const float input_0[] = {
      0.08645457,   0.47987965,  0.41787004,  -1.1763926,  0.3198778,
      0.54542065,   0.47691998,  0.34480134,  -1.1019881,  -0.22594218,
      -0.025396353, 0.05323263,  0.41464132,  -0.2566864,  0.42566684,
      -1.0391012,   0.18828659,  0.62502307,  0.7753483,   0.0031715191,
      0.71574605,   -0.6887593,  0.35496256,  0.2707859,   -0.36392003,
      -0.54497457,  0.77223223,  -0.72642624, -0.8455925,  0.27382165,
      0.0811724,    0.97620904,  -0.7191448,  -1.5545748,  -0.009490364,
      -1.8859495,   -0.58130085, 1.1612468,   -0.12219328, 0.04123255,
      0.77790457,   -0.1850413,  0.5971591,   0.83276105,  -0.13264243,
      -1.2924834,   0.30596462,  1.1613514,   -0.78237313, 0.1071255,
      -1.5914464,   0.7317331,   0.39516467,  0.60248846,  0.572201,
      1.3340284,    -0.2987122,  0.23343305,  -1.5399687,  -0.20153145};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[126];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 6, 7};
  const float answer_0[] = {
      0.47691998,  0.54542065,   0.47691998,   0.34480134,   -1.1019881,
      -0.22594218, -1.1019881,   0.47987965,   0.08645457,   0.47987965,
      0.41787004,  -1.1763926,   0.3198778,    -1.1763926,   0.47691998,
      0.54542065,  0.47691998,   0.34480134,   -1.1019881,   -0.22594218,
      -1.1019881,  0.05323263,   -0.025396353, 0.05323263,   0.41464132,
      -0.2566864,  0.42566684,   -0.2566864,   0.18828659,   -1.0391012,
      0.18828659,  0.62502307,   0.7753483,    0.0031715191, 0.7753483,
      0.05323263,  -0.025396353, 0.05323263,   0.41464132,   -0.2566864,
      0.42566684,  -0.2566864,   0.77223223,   -0.54497457,  0.77223223,
      -0.72642624, -0.8455925,   0.27382165,   -0.8455925,   -0.6887593,
      0.71574605,  -0.6887593,   0.35496256,   0.2707859,    -0.36392003,
      0.2707859,   0.77223223,   -0.54497457,  0.77223223,   -0.72642624,
      -0.8455925,  0.27382165,   -0.8455925,   0.97620904,   0.0811724,
      0.97620904,  -0.7191448,   -1.5545748,   -0.009490364, -1.5545748,
      -0.58130085, -1.8859495,   -0.58130085,  1.1612468,    -0.12219328,
      0.04123255,  -0.12219328,  0.97620904,   0.0811724,    0.97620904,
      -0.7191448,  -1.5545748,   -0.009490364, -1.5545748,   0.30596462,
      -1.2924834,  0.30596462,   1.1613514,    -0.78237313,  0.1071255,
      -0.78237313, -0.1850413,   0.77790457,   -0.1850413,   0.5971591,
      0.83276105,  -0.13264243,  0.83276105,   0.30596462,   -1.2924834,
      0.30596462,  1.1613514,    -0.78237313,  0.1071255,    -0.78237313,
      0.7317331,   -1.5914464,   0.7317331,    0.39516467,   0.60248846,
      0.572201,    0.60248846,   -0.2987122,   1.3340284,    -0.2987122,
      0.23343305,  -1.5399687,   -0.20153145,  -1.5399687,   0.7317331,
      -1.5914464,  0.7317331,    0.39516467,   0.60248846,   0.572201,
      0.60248846};
  const auto mode = "reflect";
  const int32_t pads[] = {0, 0, 1, 1, 0, 0, 1, 1};
  const int32_t number_of_pads = 8;
  const float value = 0;
  ONNC_RUNTIME_pad_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims, mode,
                         (int32_t *)pads, number_of_pads, value);
  (dragonite::verify)(reinterpret_cast<float *>(output_0),
                      reinterpret_cast<const float *>(answer_0), 126);
}

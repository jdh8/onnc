#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Unsqueeze, test_unsqueeze) {
  const float input_0[3][4][5] = {
      {{0.20347832143306732, 0.8913485407829285, 1.07054603099823,
        0.5423682332038879, -0.03931554779410362},
       {-0.2751903533935547, -0.7948465347290039, -1.7996352910995483,
        1.7504819631576538, 0.9106711149215698},
       {1.7017301321029663, 0.6128957271575928, 0.8612204790115356,
        9.322454570792615e-05, -0.6148868203163147},
       {1.2227028608322144, -0.0588231235742569, -0.8009821176528931,
        0.09385370463132858, 0.18320506811141968}},
      {{-0.9060187339782715, 1.236663818359375, -1.0021792650222778,
        1.5232212543487549, 0.1529960185289383},
       {-0.13892827928066254, -0.22449801862239838, 0.7193778157234192,
        1.5367255210876465, 0.15564244985580444},
       {-0.2674614489078522, 1.057067632675171, 0.5779362916946411,
        0.24321800470352173, -0.655800461769104},
       {-0.06290098279714584, 1.5602086782455444, -0.5665541887283325,
        -0.5491757392883301, 0.905484139919281}},
      {{0.06489286571741104, -1.3713120222091675, 0.8050621747970581,
        -0.13067235052585602, -1.3561464548110962},
       {-0.6759700179100037, 0.6879576444625854, 1.136947751045227,
        0.4616849720478058, 0.6385401487350464},
       {1.4192560911178589, -2.132399320602417, 0.11540123075246811,
        0.36750268936157227, 0.9549373984336853},
       {0.5638291835784912, 0.21559478342533112, -0.19376592338085175,
        0.20880688726902008, -1.4794367551803589}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[1][3][4][5];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 3, 4, 5};
  const float answer_0[1][3][4][5] = {
      {{{0.20347832143306732, 0.8913485407829285, 1.07054603099823,
         0.5423682332038879, -0.03931554779410362},
        {-0.2751903533935547, -0.7948465347290039, -1.7996352910995483,
         1.7504819631576538, 0.9106711149215698},
        {1.7017301321029663, 0.6128957271575928, 0.8612204790115356,
         9.322454570792615e-05, -0.6148868203163147},
        {1.2227028608322144, -0.0588231235742569, -0.8009821176528931,
         0.09385370463132858, 0.18320506811141968}},
       {{-0.9060187339782715, 1.236663818359375, -1.0021792650222778,
         1.5232212543487549, 0.1529960185289383},
        {-0.13892827928066254, -0.22449801862239838, 0.7193778157234192,
         1.5367255210876465, 0.15564244985580444},
        {-0.2674614489078522, 1.057067632675171, 0.5779362916946411,
         0.24321800470352173, -0.655800461769104},
        {-0.06290098279714584, 1.5602086782455444, -0.5665541887283325,
         -0.5491757392883301, 0.905484139919281}},
       {{0.06489286571741104, -1.3713120222091675, 0.8050621747970581,
         -0.13067235052585602, -1.3561464548110962},
        {-0.6759700179100037, 0.6879576444625854, 1.136947751045227,
         0.4616849720478058, 0.6385401487350464},
        {1.4192560911178589, -2.132399320602417, 0.11540123075246811,
         0.36750268936157227, 0.9549373984336853},
        {0.5638291835784912, 0.21559478342533112, -0.19376592338085175,
         0.20880688726902008, -1.4794367551803589}}}};
  const int32_t axes[] = {0};
  const int32_t number_of_axes = 1;
  ONNC_RUNTIME_unsqueeze_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, (int32_t *)axes, number_of_axes);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

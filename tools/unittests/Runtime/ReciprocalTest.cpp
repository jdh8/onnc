#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Reciprocal, test_reciprocal_example) {
  const float input_0[2] = {-4.0, 2.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {2};
  float output_0[2];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {2};
  const float answer_0[2] = {-0.25, 0.5};
  ONNC_RUNTIME_reciprocal_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Reciprocal, test_reciprocal) {
  const float input_0[3][4][5] = {
      {{0.7635859847068787, 0.9100943803787231, 1.4222660064697266,
        0.5710762143135071, 1.4268287420272827},
       {1.0058584213256836, 0.810702919960022, 0.7795009613037109,
        0.7752094268798828, 1.3460187911987305},
       {1.4726152420043945, 1.1385059356689453, 1.316978931427002,
        1.3181638717651367, 0.7657885551452637},
       {1.3185937404632568, 1.2869701385498047, 0.9508016109466553,
        0.7521311044692993, 1.4765667915344238}},
      {{1.2180171012878418, 0.8910158276557922, 0.8073812127113342,
        1.3333038091659546, 1.330117106437683},
       {1.057499885559082, 1.3671960830688477, 0.7252843976020813,
        1.2570576667785645, 0.5539933443069458},
       {1.1298017501831055, 1.4039077758789062, 0.8559332489967346,
        0.7591606378555298, 1.07871413230896},
       {0.9044226408004761, 1.1065599918365479, 0.9577983617782593,
        0.7664527893066406, 1.1017811298370361}},
      {{1.2494463920593262, 1.0046536922454834, 1.1701626777648926,
        0.6528220772743225, 1.3253180980682373},
       {0.5543912649154663, 1.3019485473632812, 0.7069573402404785,
        1.028017520904541, 0.9088447093963623},
       {1.0647480487823486, 1.1836590766906738, 0.925494909286499,
        0.5930743217468262, 1.2823481559753418},
       {1.1052939891815186, 0.9959860444068909, 1.2658319473266602,
        1.0992279052734375, 0.6356072425842285}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.3096102476119995, 1.0987871885299683, 0.7031033635139465,
        1.751079797744751, 0.7008549571037292},
       {0.9941756725311279, 1.2334975004196167, 1.2828720808029175,
        1.2899739742279053, 0.7429316639900208},
       {0.6790639758110046, 0.8783441185951233, 0.7593135833740234,
        0.7586309909820557, 1.305843472480774},
       {0.7583836913108826, 0.7770187854766846, 1.0517441034317017,
        1.3295553922653198, 0.6772466897964478}},
      {{0.8210065364837646, 1.1223145723342896, 1.2385722398757935,
        0.7500166296958923, 0.751813530921936},
       {0.9456265568733215, 0.7314239740371704, 1.3787695169448853,
        0.7955084443092346, 1.8050758838653564},
       {0.8851110339164734, 0.7122974991798401, 1.1683154106140137,
        1.317244291305542, 0.9270296692848206},
       {1.1056777238845825, 0.9037015438079834, 1.0440610647201538,
        1.3047118186950684, 0.9076212644577026}},
      {{0.8003544807434082, 0.9953678846359253, 0.8545820116996765,
        1.531810998916626, 0.7545358538627625},
       {1.803780198097229, 0.7680795192718506, 1.4145125150680542,
        0.9727460741996765, 1.1002979278564453},
       {0.9391893148422241, 0.8448378443717957, 1.080502986907959,
        1.6861293315887451, 0.7798194289207458},
       {0.9047366380691528, 1.0040301084518433, 0.7899942994117737,
        0.9097294807434082, 1.5732985734939575}}};
  ONNC_RUNTIME_reciprocal_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_ReduceLogSum, test_reduce_log_sum_desc_axes) {
  const float input_0[3][4][5] = {
      {{0.40656426548957825, 0.1806056648492813, 0.09314262866973877,
        0.1841270625591278, 0.775820791721344},
       {0.6523386836051941, 0.9301025867462158, 0.5443300604820251,
        0.1857994943857193, 0.42508846521377563},
       {0.6451802849769592, 0.9063974618911743, 0.10586363822221756,
        0.7611651420593262, 0.19189448654651642},
       {0.5557511448860168, 0.258129358291626, 0.3749880790710449,
        0.637990415096283, 0.1333436816930771}},
      {{0.5070353150367737, 0.9209276437759399, 0.40875694155693054,
        0.1810731291770935, 0.3725777864456177},
       {0.2182142734527588, 0.4073871970176697, 0.8087716102600098,
        0.3301340937614441, 0.3017622232437134},
       {0.1243768259882927, 0.114091657102108, 0.02857946790754795,
        0.46470072865486145, 0.5322670340538025},
       {0.24403931200504303, 0.8283031582832336, 0.021441398188471794,
        0.05752091109752655, 0.8623877167701721}},
      {{0.46643272042274475, 0.9487484097480774, 0.4209195077419281,
        0.7323690056800842, 0.005250911228358746},
       {0.8232273459434509, 0.9965683221817017, 0.41323739290237427,
        0.7035865783691406, 0.04825955256819725},
       {0.7177851796150208, 0.11226942390203476, 0.394641250371933,
        0.6498522758483887, 0.7536189556121826},
       {0.8870179057121277, 0.7035536170005798, 0.797485888004303,
        0.2834361791610718, 0.6462386846542358}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {2.191499710083008, 2.045671224594116,
                             2.4427380561828613};
  const int32_t axes[] = {2, 1};
  const int32_t number_of_axes = 2;
  const int32_t keepdims = 0;
  ONNC_RUNTIME_reducelogsum_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)output_0,
      output_0_ndim, output_0_dims, (int32_t *)axes, number_of_axes, keepdims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_ReduceLogSum, test_reduce_log_sum_asc_axes) {
  const float input_0[3][4][5] = {
      {{0.8294401168823242, 0.409712553024292, 0.19685645401477814,
        0.9531832337379456, 0.6795496940612793},
       {0.9578655958175659, 0.19548305869102478, 0.028271077200770378,
        0.6095541715621948, 0.5208045244216919},
       {0.6816346645355225, 0.361468642950058, 0.010494142770767212,
        0.7887461185455322, 0.8925104737281799},
       {0.4432161748409271, 0.18766158819198608, 0.6143747568130493,
        0.32448530197143555, 0.5251942276954651}},
      {{0.05581837147474289, 0.9883884191513062, 0.9820764660835266,
        0.7990614175796509, 0.06084539368748665},
       {0.6148186326026917, 0.05616201087832451, 0.2571372985839844,
        0.7836588621139526, 0.948095440864563},
       {0.5160499215126038, 0.4735802114009857, 0.9783249497413635,
        0.3491002917289734, 0.08484727889299393},
       {0.9943865537643433, 0.2770158648490906, 0.935550332069397,
        0.5193308591842651, 0.6619687080383301}},
      {{0.4772223234176636, 0.5343416929244995, 0.7497735619544983,
        0.007043614983558655, 0.8995356559753418},
       {0.09344533830881119, 0.05152416601777077, 0.2622542083263397,
        0.22180701792240143, 0.3281276822090149},
       {0.7435782551765442, 0.5068749785423279, 0.3075786232948303,
        0.5815111994743347, 0.2732447385787964},
       {0.4826602041721344, 0.8761069774627686, 0.6569567322731018,
        0.5454302430152893, 0.6184470057487488}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[5];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {5};
  const float answer_0[5] = {1.9300909042358398, 1.59296715259552,
                             1.7883617877960205, 1.86916983127594,
                             1.8707510232925415};
  const int32_t axes[] = {0, 1};
  const int32_t number_of_axes = 2;
  const int32_t keepdims = 0;
  ONNC_RUNTIME_reducelogsum_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)output_0,
      output_0_ndim, output_0_dims, (int32_t *)axes, number_of_axes, keepdims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_ReduceLogSum, test_reduce_log_sum_default) {
  const float input_0[3][4][5] = {
      {{0.09642542153596878, 0.8547901511192322, 0.8030335903167725,
        0.1964826136827469, 0.8023350834846497},
       {0.6106551289558411, 0.6494619846343994, 0.7877398729324341,
        0.44157874584198, 0.864093005657196},
       {0.15974590182304382, 0.3179328739643097, 0.7321009635925293,
        0.35664039850234985, 0.31973782181739807},
       {0.40690314769744873, 0.4635222852230072, 0.19827120006084442,
        0.49405941367149353, 0.6155655384063721}},
      {{0.8854249715805054, 0.5581026673316956, 0.9635860323905945,
        0.32650819420814514, 0.20884765684604645},
       {0.3060207962989807, 0.4663018584251404, 0.09133738279342651,
        0.4429766833782196, 0.6140629053115845},
       {0.3330858051776886, 0.9176458120346069, 0.07097986340522766,
        0.15212368965148926, 0.45694488286972046},
       {0.0024786079302430153, 0.4617515802383423, 0.3793148696422577,
        0.8980921506881714, 0.7231449484825134}},
      {{0.6984583139419556, 0.5477575659751892, 0.7078161835670471,
        0.9007296562194824, 0.47739946842193604},
       {0.7509918808937073, 0.8284271359443665, 0.9594811201095581,
        0.42240092158317566, 0.7918657660484314},
       {0.08141755312681198, 0.5204625129699707, 0.60297691822052,
        0.09808419644832611, 0.20131279528141022},
       {0.5189117193222046, 0.2217976599931717, 0.4942636787891388,
        0.9178550243377686, 0.38419994711875916}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[1][1][1];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {1, 1, 1};
  const float answer_0[1][1][1] = {{{3.419574737548828}}};
  const int32_t axes[] = {};
  const int32_t number_of_axes = 0;
  const int32_t keepdims = 0;
  ONNC_RUNTIME_reducelogsum_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)output_0,
      output_0_ndim, output_0_dims, (int32_t *)axes, number_of_axes, keepdims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 1 * 1; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

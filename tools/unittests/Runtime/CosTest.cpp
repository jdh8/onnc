#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Cos, test_cos_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {0.5403022766113281, 1.0, 0.5403022766113281};
  ONNC_RUNTIME_cos_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Cos, test_cos) {
  const float input_0[3][4][5] = {
      {{-0.3105766475200653, -0.31712180376052856, 0.5956470966339111,
        0.20126113295555115, -0.7375343441963196},
       {-0.2762826979160309, -0.4803118407726288, -0.2773628830909729,
        -0.47340452671051025, 0.13335837423801422},
       {-0.2304203063249588, -2.3345258235931396, -0.8705011606216431,
        1.3710968494415283, 0.21306443214416504},
       {1.0896797180175781, 1.554925799369812, 1.3424136638641357,
        0.8962147831916809, -0.48560723662376404}},
      {{-0.4943654537200928, 0.33750075101852417, 0.4535154402256012,
        0.09828591346740723, -1.4432756900787354},
       {-0.12621909379959106, -1.2351752519607544, -1.3049432039260864,
        1.2574055194854736, 0.3771742582321167},
       {0.5133188366889954, -0.6411924362182617, 0.3812994956970215,
        1.9602699279785156, 1.2628381252288818},
       {1.124037742614746, 0.779911994934082, 1.455906867980957,
        0.4673404395580292, 0.18917720019817352}},
      {{0.894422173500061, -0.8699387907981873, 1.8440399169921875,
        1.0571917295455933, -1.270194172859192},
       {-0.2907768189907074, -0.8643268346786499, -1.5428223609924316,
        0.12755468487739563, 0.718784749507904},
       {2.1340525150299072, -0.15844132006168365, 0.5669431686401367,
        -0.8951694369316101, -0.023287741467356682},
       {-0.2209310680627823, 0.17384934425354004, -0.7175443172454834,
        0.07694104313850403, -0.5450721383094788}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.9521574974060059, 0.9501368403434753, 0.8277856111526489,
        0.9798152446746826, 0.7401288747787476},
       {0.9620760679244995, 0.886850893497467, 0.9617809057235718,
        0.8900212645530701, 0.9911209344863892},
       {0.9735704660415649, -0.6916199326515198, 0.6444433927536011,
        0.19837479293346405, 0.9773874878883362},
       {0.4627692997455597, 0.015869861468672752, 0.22640247642993927,
        0.6245705485343933, 0.8843916654586792}},
      {{0.8802699446678162, 0.943585216999054, 0.8989124298095703,
        0.9951738119125366, 0.12717530131340027},
       {0.9920449256896973, 0.3293556571006775, 0.26273250579833984,
        0.30828607082366943, 0.9297090768814087},
       {0.871119499206543, 0.8013830780982971, 0.9281818270683289,
        -0.37970149517059326, 0.30311352014541626},
       {0.43204453587532043, 0.7109754085540771, 0.1146368756890297,
        0.8927696347236633, 0.9821593165397644}},
      {{0.6259695291519165, 0.644873321056366, -0.2698560953140259,
        0.4913199543952942, 0.2960954010486603},
       {0.9580214619636536, 0.6491523385047913, 0.027970317751169205,
        0.991875946521759, 0.7526065111160278},
       {-0.5339422225952148, 0.9874743819236755, 0.8435466289520264,
        0.6253865957260132, 0.9997288584709167},
       {0.9756938219070435, 0.9849262237548828, 0.7534226775169373,
        0.9970415234565735, 0.8550899028778076}}};
  ONNC_RUNTIME_cos_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

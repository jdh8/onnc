#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Squeeze, test_squeeze) {
  const float input_0[1][3][4][5] = {
      {{{-1.12149178981781, 0.3080170154571533, -1.3910481929779053,
         -0.39371705055236816, 0.5166005492210388},
        {-0.5968818664550781, -0.6099849939346313, 1.5122909545898438,
         0.16664716601371765, -0.9828343391418457},
        {-0.9543711543083191, -0.43700623512268066, -0.8794263005256653,
         -0.6013829708099365, -1.1504199504852295},
        {0.5634886622428894, -1.227848768234253, 0.34034013748168945,
         -0.7312193512916565, 0.7004934549331665}},
       {{-0.3357312083244324, -0.17759983241558075, -1.1881041526794434,
         0.9795618057250977, 1.1251640319824219},
        {-0.203463613986969, 1.5571105480194092, -0.6443711519241333,
         -0.2876889705657959, 0.5160880088806152},
        {-0.682632327079773, 0.5101065635681152, 0.1738911122083664,
         -0.11944322288036346, -0.9510626792907715},
        {0.06952603161334991, 0.16633568704128265, 0.22742880880832672,
         -0.859589695930481, -0.8274444937705994}},
       {{0.1591341346502304, -1.4173052310943604, -0.08188549429178238,
         0.7670331597328186, -0.11942220479249954},
        {0.45701709389686584, 0.011527057737112045, -0.09970085322856903,
         0.20383261144161224, -0.6722612380981445},
        {-0.04445957392454147, -1.2306894063949585, -0.6923324465751648,
         1.7569855451583862, -0.03373629227280617},
        {-2.0986592769622803, -0.5741402506828308, 0.4109833836555481,
         -0.6891564130783081, -0.42852476239204407}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-1.12149178981781, 0.3080170154571533, -1.3910481929779053,
        -0.39371705055236816, 0.5166005492210388},
       {-0.5968818664550781, -0.6099849939346313, 1.5122909545898438,
        0.16664716601371765, -0.9828343391418457},
       {-0.9543711543083191, -0.43700623512268066, -0.8794263005256653,
        -0.6013829708099365, -1.1504199504852295},
       {0.5634886622428894, -1.227848768234253, 0.34034013748168945,
        -0.7312193512916565, 0.7004934549331665}},
      {{-0.3357312083244324, -0.17759983241558075, -1.1881041526794434,
        0.9795618057250977, 1.1251640319824219},
       {-0.203463613986969, 1.5571105480194092, -0.6443711519241333,
        -0.2876889705657959, 0.5160880088806152},
       {-0.682632327079773, 0.5101065635681152, 0.1738911122083664,
        -0.11944322288036346, -0.9510626792907715},
       {0.06952603161334991, 0.16633568704128265, 0.22742880880832672,
        -0.859589695930481, -0.8274444937705994}},
      {{0.1591341346502304, -1.4173052310943604, -0.08188549429178238,
        0.7670331597328186, -0.11942220479249954},
       {0.45701709389686584, 0.011527057737112045, -0.09970085322856903,
        0.20383261144161224, -0.6722612380981445},
       {-0.04445957392454147, -1.2306894063949585, -0.6923324465751648,
        1.7569855451583862, -0.03373629227280617},
       {-2.0986592769622803, -0.5741402506828308, 0.4109833836555481,
        -0.6891564130783081, -0.42852476239204407}}};
  const int32_t axes[] = {0};
  const int32_t number_of_axes = 1;
  ONNC_RUNTIME_squeeze_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             (int32_t *)axes, number_of_axes);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Log, test_log_example) {
  const float input_0[2] = {1.0, 10.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {2};
  float output_0[2];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {2};
  const float answer_0[2] = {0.0, 2.3025851249694824};
  ONNC_RUNTIME_log_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Log, test_log) {
  const float input_0[3][4][5] = {
      {{4.0272440910339355, 0.7909544706344604, 0.5726255774497986,
        1.954785943031311, 0.46730858087539673},
       {0.18728750944137573, 7.144289493560791, 0.538969874382019,
        0.30045342445373535, 0.3158963918685913},
       {1.654365062713623, 3.7606775760650635, 1.7651442289352417,
        2.952670097351074, 2.6398942470550537},
       {0.5078149437904358, 1.9819265604019165, 5.928187370300293,
        2.114168167114258, 0.6221965551376343}},
      {{0.5152899026870728, 2.6857340335845947, 11.226896286010742,
        1.9196563959121704, 0.33400610089302063},
       {3.1876931190490723, 0.5516729354858398, 1.539266586303711,
        0.2483183890581131, 0.7730823159217834},
       {0.34984394907951355, 1.5781890153884888, 1.7948061227798462,
        0.17650356888771057, 0.9385961890220642},
       {4.531100273132324, 1.245840311050415, 1.2989416122436523,
        1.0571074485778809, 0.09946861863136292}},
      {{2.2202296257019043, 0.9571825861930847, 4.203559398651123,
        0.24190635979175568, 0.4072439670562744},
       {1.8440988063812256, 0.9163414239883423, 3.169705629348755,
        3.3027570247650146, 5.71634578704834},
       {0.7290668487548828, 0.8980908989906311, 3.1358401775360107,
        1.0094038248062134, 0.18847985565662384},
       {1.1443547010421753, 2.9305031299591064, 2.2476730346679688,
        0.18813668191432953, 0.179008349776268}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.3930822610855103, -0.23451487720012665, -0.5575231909751892,
        0.6702806949615479, -0.7607654929161072},
       {-1.6751103401184082, 1.966313362121582, -0.6180955767631531,
        -1.2024625539779663, -1.1523410081863403},
       {0.5034173130989075, 1.3245991468429565, 0.5682324171066284,
        1.0827099084854126, 0.9707388877868652},
       {-0.6776381731033325, 0.6840693950653076, 1.7797185182571411,
        0.748661458492279, -0.4744992256164551}},
      {{-0.6630256175994873, 0.9879540801048279, 2.4183123111724854,
        0.6521462202072144, -1.0965960025787354},
       {1.1592974662780762, -0.5947999358177185, 0.43130606412887573,
        -1.3930435180664062, -0.2573697566986084},
       {-1.0502680540084839, 0.456277996301651, 0.584896981716156,
        -1.7344142198562622, -0.06336993724107742},
       {1.5109647512435913, 0.21981024742126465, 0.26154980063438416,
        0.05553635582327843, -2.307913064956665}},
      {{0.7976106405258179, -0.04376111552119255, 1.43593168258667,
        -1.419204592704773, -0.8983428478240967},
       {0.6119906902313232, -0.0873662531375885, 1.1536387205123901,
        1.1947575807571411, 1.7433297634124756},
       {-0.3159898519515991, -0.10748399049043655, 1.142897129058838,
        0.009359884075820446, -1.6687641143798828},
       {0.13484089076519012, 1.07517409324646, 0.8098954558372498,
        -1.6705865859985352, -1.720322847366333}}};
  ONNC_RUNTIME_log_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

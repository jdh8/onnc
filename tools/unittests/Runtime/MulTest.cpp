#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Mul, test_mul_example) {
  const float input_0[3] = {1.0, 2.0, 3.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  const float input_1[3] = {4.0, 5.0, 6.0};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {4.0, 10.0, 18.0};
  ONNC_RUNTIME_mul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Mul, test_mul) {
  const float input_0[3][4][5] = {
      {{-0.09501992911100388, 1.3244107961654663, 0.7469239830970764,
        0.10657701641321182, 0.0800015926361084},
       {-0.498911589384079, 0.5023072361946106, 0.3380349576473236,
        -0.21469809114933014, -0.02588488720357418},
       {0.03550517559051514, -0.03593103960156441, 1.980954885482788,
        0.5174630880355835, -0.5853116512298584},
       {-1.3860282897949219, -0.25823110342025757, -1.8813303709030151,
        0.8993121981620789, 0.19638065993785858}},
      {{0.4676218032836914, 1.4953598976135254, 1.2347502708435059,
        0.6411586999893188, 0.2489730268716812},
       {0.6128604412078857, -0.8004326820373535, -0.2182541787624359,
        0.9955103993415833, 0.7685415148735046},
       {0.925469160079956, -0.2750050127506256, 0.9791980385780334,
        -1.084518551826477, 1.8465083837509155},
       {-0.3632482886314392, 0.9103894233703613, 3.0041534900665283,
        -1.11781644821167, 0.9631755352020264}},
      {{-1.836320400238037, -0.7427624464035034, -1.0821037292480469,
        0.29109832644462585, 0.04351840540766716},
       {-0.4252738952636719, 0.728447437286377, -1.2574114799499512,
        -0.3630426526069641, -0.09525862336158752},
       {-2.262843608856201, -1.1487619876861572, -1.0378161668777466,
        0.3686121106147766, 1.3571664094924927},
       {-0.22190137207508087, 0.6005658507347107, -1.504459023475647,
        0.8801020979881287, -0.8695070743560791}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[3][4][5] = {
      {{-0.007360396441072226, 1.0296800136566162, -1.3315805196762085,
        0.5279394388198853, -1.4884438514709473},
       {0.3031640946865082, -2.083097219467163, 0.8222044110298157,
        -1.4091471433639526, 0.8927701115608215},
       {1.430532693862915, 0.571544885635376, -0.7822872996330261,
        -0.1439444124698639, -0.8408671021461487},
       {-0.5324805974960327, 0.519324541091919, 0.9516307711601257,
        -1.2738945484161377, 0.5276322364807129}},
      {{-0.7192495465278625, -0.3048838675022125, -0.923237681388855,
        0.18087372183799744, 0.3233754336833954},
       {0.2073722779750824, -1.7677693367004395, -0.5567870736122131,
        0.17514002323150635, -0.559037446975708},
       {0.2025248408317566, -0.11673735827207565, -0.9673935770988464,
        0.043255455791950226, 0.030245168134570122},
       {0.03382434695959091, -0.4170362651348114, 0.1677018404006958,
        1.2996876239776611, 0.43310755491256714}},
      {{0.08981496095657349, 0.4536491930484772, 0.029495546594262123,
        -0.06677193939685822, -1.652040719985962},
       {0.5915449261665344, 0.6536881923675537, 0.1583537459373474,
        0.19033396244049072, -0.012524298392236233},
       {0.6263629794120789, -1.8774034976959229, -0.10123824328184128,
        0.39089712500572205, 0.12354224920272827},
       {-0.888251543045044, -0.5829401612281799, 0.43090638518333435,
        -0.9220755100250244, -1.2232773303985596}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.0006993843708187342, 1.3637193441390991, -0.9945894479751587,
        0.05626621097326279, -0.11907787621021271},
       {-0.15125207602977753, -1.0463547706604004, 0.27793383598327637,
        0.30254119634628296, -0.023109253495931625},
       {0.050791315734386444, -0.02053620107471943, -1.5496758222579956,
        -0.07448592036962509, 0.4921693205833435},
       {0.7380331754684448, -0.13410574197769165, -1.7903318405151367,
        -1.1456289291381836, 0.10361676663160324}},
      {{-0.33633676171302795, -0.4559110999107361, -1.139967918395996,
        0.11596876382827759, 0.08051176369190216},
       {0.12709026038646698, 1.4149802923202515, 0.12152110785245895,
        0.1743537187576294, -0.4296434819698334},
       {0.1874305009841919, 0.03210335969924927, -0.9472699165344238,
        -0.046911343932151794, 0.055847957730293274},
       {-0.012286636047065258, -0.37966540455818176, 0.5038020610809326,
        -1.4528121948242188, 0.4171586036682129}},
      {{-0.16492904722690582, -0.3369535803794861, -0.03191724047064781,
        -0.01943719945847988, -0.07189417630434036},
       {-0.25156861543655396, 0.47617748379707336, -0.1991158127784729,
        -0.06909934431314468, 0.0011930473847314715},
       {-1.4173614978790283, 2.1566898822784424, 0.1050666868686676,
        0.14408941566944122, 0.16766738891601562},
       {0.19710423052310944, -0.3500939607620239, -0.6482809782028198,
        -0.8115205764770508, 1.0636483430862427}}};
  ONNC_RUNTIME_mul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Mul, test_mul_bcast) {
  const float input_0[3][4][5] = {
      {{-1.606404423713684, 0.7149142026901245, 1.5350476503372192,
        -0.4230300188064575, 0.614737868309021},
       {0.4236750900745392, -0.39020925760269165, -1.1528247594833374,
        0.07542351633310318, -0.09436172246932983},
       {-0.12750767171382904, -0.6595224738121033, -0.09059794247150421,
        1.7400532960891724, 2.4965579509735107},
       {-0.1861644685268402, -1.6297310590744019, -0.6827880144119263,
        0.9795129299163818, -0.8167812824249268}},
      {{-1.229706048965454, -0.8156474828720093, 0.37186169624328613,
        -1.1779383420944214, -1.3990932703018188},
       {3.6492583751678467, 1.6865662336349487, -0.24339084327220917,
        0.4449498653411865, 0.8801363706588745},
       {0.9765345454216003, 0.5735366344451904, -0.22831302881240845,
        0.43066731095314026, -0.9919559955596924},
       {1.5247405767440796, 1.512540578842163, -0.32900866866111755,
        0.5428279638290405, -0.870834231376648}},
      {{-1.063077449798584, -1.4280524253845215, -0.9454749226570129,
        -1.1805493831634521, -0.9200885891914368},
       {-2.197680950164795, -1.0648345947265625, -1.5866589546203613,
        -1.6210441589355469, 0.20670302212238312},
       {-0.4167676866054535, 0.16275013983249664, 0.6416142582893372,
        -1.2315521240234375, 0.26058921217918396},
       {-1.8020120859146118, -0.49820294976234436, 0.3652608096599579,
        -0.9346789717674255, -0.05599284544587135}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[5] = {1.3789972066879272, 1.826098918914795,
                            -1.1720387935638428, -0.7494828701019287,
                            -0.27874892950057983};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-2.2152271270751953, 1.3055040836334229, -1.799135446548462,
        0.31705376505851746, -0.17135752737522125},
       {0.5842467546463013, -0.7125607132911682, 1.3511552810668945,
        -0.05652863532304764, 0.026303229853510857},
       {-0.17583271861076355, -1.2043533325195312, 0.10618430376052856,
        -1.3041400909423828, -0.6959128379821777},
       {-0.25672027468681335, -2.9760501384735107, 0.8002540469169617,
        -0.7341281771659851, 0.22767691314220428}},
      {{-1.6957612037658691, -1.4894529581069946, -0.4358363449573517,
        0.8828446269035339, 0.3899957537651062},
       {5.032317161560059, 3.079836845397949, 0.2852635085582733,
        -0.3334822952747345, -0.24533706903457642},
       {1.3466384410858154, 1.0473346710205078, 0.2675917148590088,
        -0.32277777791023254, 0.2765066623687744},
       {2.1026129722595215, 2.7620487213134766, 0.3856109082698822,
        -0.4068402647972107, 0.2427441030740738}},
      {{-1.465980887413025, -2.607764959335327, 1.108133316040039,
        0.8848015666007996, 0.25647372007369995},
       {-3.0305957794189453, -1.944493293762207, 1.8596258163452148,
        1.214944839477539, -0.05761824548244476},
       {-0.5747214555740356, 0.2971978485584259, -0.7519968152046204,
        0.9230272173881531, -0.07263896614313126},
       {-2.4849696159362793, -0.9097678661346436, -0.4280998408794403,
        0.7005258798599243, 0.015607945621013641}}};
  ONNC_RUNTIME_mul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

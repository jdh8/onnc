#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Mul, test_mul_example)
{
  const float   input_0[]      = {1.0, 2.0, 3.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  const float   input_1[]      = {4.0, 5.0, 6.0};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {4.0, 10.0, 18.0};
  using dragonite::norm;

  ONNC_RUNTIME_mul_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_Mul, test_mul)
{
  const float input_0[] = {
    0.3729799,   1.7847267,   -0.64495766, 0.12691161, -0.6757453, -0.82179,    0.4744714,   0.052553453, -2.2790315,
    -0.19231433, -1.1058985,  0.62578875,  0.07107951, 0.32218912, 2.304068,    -0.6974869,  0.66049945,  1.2144694,
    0.38630238,  -1.513801,   -1.6604759,  -0.9538732, -1.4210782, 0.30382845,  -0.70846164, 0.7142854,   -0.36330113,
    -0.1306305,  0.67516863,  0.10708479,  -1.0851703, 0.8537715,  -0.86738217, 0.85929394,  -0.84748244, 0.17598602,
    -0.24273139, -1.376679,   -0.27595842, 0.30436623, 0.30565634, 2.2500985,   0.35817856,  -1.4538457,  0.44849905,
    -1.3145001,  0.021878669, -0.11310509, -1.0141639, 0.15471347, -0.62939745, -0.22002839, -0.33397377, 0.52945733,
    0.8333294,   0.8082084,   1.1821363,   0.6123446,  1.3990117,  -2.0017173};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {
    1.460338,     -1.0602294,  0.7141666,   1.0100983,  2.088431,   2.1645806,    -0.67136204, -0.9444022,  -0.08169238,
    -0.49021652,  -0.4302677,  -1.5282764,  0.7527063,  -1.8674471, 0.37352592,   1.0363823,   -0.88258404, -0.25321394,
    0.58610326,   1.3272094,   -0.2790695,  0.09676251, -1.0302409, -0.032165162, 0.32420844,  -1.2999327,  0.022606114,
    -1.0921226,   1.23298,     0.73751646,  -1.3898457, 0.19295846, -1.3198087,   -0.20900415, 0.30887341,  -0.5541509,
    -0.122897394, 0.299512,    0.99584526,  0.20292017, 0.17127621, 0.3501981,    -0.564887,   1.2543392,   -2.0711048,
    0.3797934,    -1.2875882,  -1.4612097,  -1.0263349, 0.5447851,  -0.4628737,   -0.23552142, -0.21597892, 2.2105992,
    -0.008269675, -0.22471128, -0.62150216, -1.6758821, 1.601091,   -0.18271421};
  const int32_t input_1_ndim   = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    0.5446767,   -1.8922198,  -0.4606072,   0.1281932,   -1.4112474,  -1.7788306,  -0.3185421,    -0.049631596,
    0.18617952,  0.09427566,  0.4758324,    -0.9563782,  0.053501993, -0.60167116, 0.86062914,    -0.7228631,
    -0.5829463,  -0.3075206,  0.22641309,   -2.0091307,  0.46338817,  -0.09229916, 1.4640529,     -0.009772691,
    -0.22968924, -0.92852294, -0.008212827, 0.1426645,   0.8324694,   0.078976795, 1.5082192,     0.16474244,
    1.1447786,   -0.17959599, -0.2617648,   -0.09752281, 0.029831056, -0.41233185, -0.2748119,    0.061762046,
    0.05235166,  0.7879802,   -0.20233041,  -1.8236157,  -0.9288885,  -0.49923846, -0.028170716,  0.16527025,
    1.0408717,   0.08428559,  0.29133153,   0.0518214,   0.07213129,  1.1704179,   -0.0068913633, -0.18161355,
    -0.73470026, -1.0262173,  2.2399452,    0.3657422};
  using dragonite::norm;

  ONNC_RUNTIME_mul_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_Mul, test_mul_bcast)
{
  const float input_0[] = {
    -0.9242801,  0.673197,   0.23733738,  0.6471859,   0.60874885, -0.641077,    -1.6610147, 1.0630645,  -0.3270138,
    -0.52464086, -0.8772721, -0.30313852, 0.7461003,   0.18877745, 0.78764534,   0.33264962, 0.0672904,  -0.09988895,
    -1.034315,   -1.7470039, -0.73669326, -1.2971778,  0.6663287,  0.30839068,   0.30537137, 0.42337885, 0.06403974,
    0.39890525,  1.8932112,  -1.5841249,  -1.5081738,  -1.474234,  -0.027206682, 1.2252984,  -1.7430135, 0.16258696,
    0.5490499,   0.11619992, 0.69349074,  -0.50370306, -0.6645458, 0.13977575,   -0.903918,  1.8726618,  0.27532,
    -0.3892487,  -1.8542174, 0.32664365,  0.6238592,   1.6949733,  -0.3498438,   -1.5947939, 0.29635698, -0.3742981,
    -1.004835,   0.39979586, -0.2169547,  -1.0452013,  0.7095425,  -1.1055677};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {0.67260706, -1.0395838, -2.2324781, -1.3068026, 0.23357803};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[] = {-0.62167734, -0.69984466, -0.52985054,  -0.84574425, 0.14219035,   -0.4311929,  1.726764,
                            -2.3732681,  0.42734247,  -0.12254458,  -0.59005946, 0.3151379,    -1.6656526,  -0.24669486,
                            0.18397665,  0.22374249,  -0.069954015, 0.2229999,   1.3516456,    -0.4080617,  -0.4955051,
                            1.348525,    -1.4875643,  -0.40300575,  0.071328044, 0.2847676,    -0.06657467, -0.8905472,
                            -2.4740534,  -0.37001678, -1.0144083,   1.5325898,   0.06073832,   -1.6012232,  -0.40712965,
                            0.10935713,  -0.5707834,  -0.25941378,  -0.90625554, -0.117653966, -0.44697818, -0.14530861,
                            2.0179772,   -2.4471993,  0.0643087,    -0.26181144, 1.9276143,    -0.7292248,  -0.8152609,
                            0.39590853,  -0.23530741, 1.6579219,    -0.6616105,  0.48913375,   -0.23470739, 0.26890552,
                            0.22554259,  2.333389,    -0.927232,    -0.25823632};
  using dragonite::norm;

  ONNC_RUNTIME_mul_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {0.10000002384185791, 0.6000000238418579, 1.0};
  const float alpha = 0.5;
  const float beta = 0.6000000238418579;
  ONNC_RUNTIME_hardsigmoid_float(NULL, (float *)input_0, input_0_ndim,
                                 input_0_dims, (float *)output_0, output_0_ndim,
                                 output_0_dims, alpha, beta);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid) {
  const float input_0[3][4][5] = {
      {{0.20344151556491852, -0.9920872449874878, -0.18527640402317047,
        0.7294443845748901, -2.4083364009857178},
       {0.6252323389053345, 0.529179573059082, -0.7564305067062378,
        -1.3700121641159058, 1.6368298530578613},
       {-0.22681944072246552, 0.4126289188861847, 0.7557305693626404,
        0.6663084030151367, 1.6586098670959473},
       {0.12446162104606628, -0.9826390147209167, -2.1766064167022705,
        -1.0106664896011353, 0.5603252053260803}},
      {{0.5427606105804443, -0.01511992048472166, 0.682491660118103,
        0.5430496335029602, -0.8100309371948242},
       {-0.16430974006652832, 0.6903611421585083, -1.314399242401123,
        1.0761631727218628, 0.06675442308187485},
       {-0.011398375034332275, -0.9183551669120789, -1.4319202899932861,
        -0.9820476770401001, 0.4254505932331085},
       {-0.08246022462844849, -1.25657057762146, 1.5559462308883667,
        0.7190968990325928, -0.2751428484916687}},
      {{-0.37559592723846436, -0.4896619915962219, -0.45167139172554016,
        1.1494288444519043, -0.9075539708137512},
       {-1.1015046834945679, 0.4621908962726593, 0.49689775705337524,
        0.33026668429374695, 1.2309595346450806},
       {1.9471909999847412, -0.8366239666938782, -1.9716436862945557,
        0.9156463146209717, -0.7061028480529785},
       {0.8488549590110779, 1.1015464067459106, -0.1011856347322464,
        -2.165801763534546, 0.9386414289474487}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.7017207741737366, 0.10395640134811401, 0.5073618292808533,
        0.964722216129303, 0.0},
       {0.9126161932945251, 0.8645898103713989, 0.221784770488739, 0.0, 1.0},
       {0.48659029603004456, 0.8063144683837891, 0.9778653383255005,
        0.9331542253494263, 1.0},
       {0.6622308492660522, 0.10868051648139954, 0.0, 0.09466677904129028,
        0.8801625967025757}},
      {{0.8713803291320801, 0.5924400687217712, 0.9412458539009094,
        0.8715248107910156, 0.1949845552444458},
       {0.5178451538085938, 0.9451805949211121, 0.0, 1.0, 0.6333772540092468},
       {0.5943008661270142, 0.14082244038581848, 0.0, 0.10897618532180786,
        0.812725305557251},
       {0.558769941329956, 0.0, 1.0, 0.9595484733581543, 0.46242859959602356}},
      {{0.41220206022262573, 0.35516902804374695, 0.374164342880249, 1.0,
        0.1462230384349823},
       {0.049247682094573975, 0.8310954570770264, 0.8484488725662231,
        0.7651333808898926, 1.0},
       {1.0, 0.18168804049491882, 0.0, 1.0, 0.24694859981536865},
       {1.0, 1.0, 0.5494071841239929, 0.0, 1.0}}};
  const float alpha = 0.5;
  const float beta = 0.6000000238418579;
  ONNC_RUNTIME_hardsigmoid_float(NULL, (float *)input_0, input_0_ndim,
                                 input_0_dims, (float *)output_0, output_0_ndim,
                                 output_0_dims, alpha, beta);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_default) {
  const float input_0[3][4][5] = {
      {{-0.2868044376373291, -0.5084428191184998, -0.8854191303253174,
        -0.9310002326965332, 1.6007139682769775},
       {-0.6493067741394043, 1.0568448305130005, -1.5462228059768677,
        0.0759371668100357, 0.7046447396278381},
       {0.6207010746002197, 1.1265575885772705, 0.9942154884338379,
        -0.4168296158313751, 0.03672488033771515},
       {-0.9917422533035278, -0.5882812738418579, 0.4772319495677948,
        -0.739827573299408, -1.0535290241241455}},
      {{-1.1029084920883179, 0.2999461889266968, -0.8954766988754272,
        1.7136894464492798, 0.42613592743873596},
       {-0.5194836258888245, -0.9233831167221069, 1.212929606437683,
        8.868726581567898e-05, 0.7470992207527161},
       {-1.2297008037567139, 0.14406897127628326, 0.1757412850856781,
        1.2804429531097412, 0.26743385195732117},
       {0.12111691385507584, -0.6667662858963013, -0.842797040939331,
        -1.2582805156707764, 1.5218827724456787}},
      {{0.4456160366535187, -1.6981117725372314, -2.5449819564819336,
        1.536336898803711, 0.19251808524131775},
       {-0.020713521167635918, -1.7088340520858765, 0.1930268108844757,
        1.1834776401519775, 0.429650217294693},
       {0.8036829233169556, -0.4197505712509155, 1.8343682289123535,
        -1.267941951751709, -0.03786231204867363},
       {1.2265048027038574, -0.6169620752334595, 0.738231360912323,
        -0.41863444447517395, -1.055706262588501}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.4426391124725342, 0.39831143617630005, 0.3229161500930786,
        0.3137999475002289, 0.8201428055763245},
       {0.37013864517211914, 0.711368978023529, 0.1907554268836975,
        0.5151874423027039, 0.6409289836883545},
       {0.624140202999115, 0.7253115177154541, 0.6988431215286255,
        0.41663408279418945, 0.5073449611663818},
       {0.3016515374183655, 0.38234373927116394, 0.5954464077949524,
        0.35203447937965393, 0.28929418325424194}},
      {{0.27941828966140747, 0.5599892139434814, 0.3209046721458435,
        0.8427379131317139, 0.5852271914482117},
       {0.39610326290130615, 0.3153233528137207, 0.7425858974456787,
        0.5000177621841431, 0.6494198441505432},
       {0.2540598511695862, 0.5288137793540955, 0.5351482629776001,
        0.7560886144638062, 0.5534867644309998},
       {0.5242233872413635, 0.36664673686027527, 0.3314405679702759,
        0.24834388494491577, 0.8043766021728516}},
      {{0.5891231894493103, 0.1603776514530182, 0.0, 0.807267427444458,
        0.5385036468505859},
       {0.495857298374176, 0.15823319554328918, 0.5386053323745728,
        0.7366955280303955, 0.5859300494194031},
       {0.6607365608215332, 0.41604989767074585, 0.8668736219406128,
        0.24641159176826477, 0.4924275279045105},
       {0.7453009486198425, 0.37660759687423706, 0.6476463079452515,
        0.4162731170654297, 0.2888587415218353}}};
  const float beta = 0;
  const float alpha = 0;
  ONNC_RUNTIME_hardsigmoid_float(NULL, (float *)input_0, input_0_ndim,
                                 input_0_dims, (float *)output_0, output_0_ndim,
                                 output_0_dims, alpha, beta);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

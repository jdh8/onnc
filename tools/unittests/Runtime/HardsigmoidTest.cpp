#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_example)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {0.100000024, 0.6, 1.0};
  const float   alpha           = 0.5;
  const float   beta            = 0.6000000238418579;
  using dragonite::norm;

  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                 alpha, beta);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid)
{
  const float   input_0[] = {0.66941935,  -0.99743265, -0.6331757,  -0.80895597,  0.15676926, -1.1742177, -0.72039926,
                           -0.9001789,  1.5287956,   -0.87202305, -1.9389448,   1.9117243,  0.77277696, -0.047071997,
                           -0.37608156, -0.6914487,  -1.9046596,  1.9757644,    -1.6529304, -0.3431885, 1.5230005,
                           2.3687158,   0.05331169,  -1.4317269,  -0.7796279,   -0.3146133, 0.24434741, -0.3395044,
                           2.0028198,   0.9844165,   2.019429,    0.98714197,   0.20365539, 1.4565624,  -0.5164703,
                           -0.40860423, -1.1038532,  1.3516403,   -0.8548896,   0.41614002, 0.16023615, -0.38929066,
                           0.70027655,  0.31473473,  -0.39961836, 0.2155376,    0.7687967,  1.1307216,  1.0552619,
                           -0.91723835, -0.5040303,  0.6812653,   -0.045387223, 0.91320974, 0.15963463, -0.27571693,
                           -0.44379184, 0.8131054,   -0.8657201,  -0.15541576};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    0.93470967, 0.1012837,  0.2834122,  0.19552204, 0.67838466, 0.012891173, 0.2398004,  0.14991057, 1.0,
    0.1639885,  0.0,        1.0,        0.9863885,  0.576464,   0.41195923,  0.25427568, 0.0,        1.0,
    0.0,        0.42840576, 1.0,        1.0,        0.6266559,  0.0,         0.21018606, 0.44269335, 0.72217375,
    0.43024784, 1.0,        1.0,        1.0,        1.0,        0.7018277,   1.0,        0.34176487, 0.3956979,
    0.04807341, 1.0,        0.17255524, 0.80807006, 0.6801181,  0.40535468,  0.95013833, 0.7573674,  0.40019083,
    0.7077688,  0.98439837, 1.0,        1.0,        0.14138085, 0.34798488,  0.9406327,  0.5773064,  1.0,
    0.6798173,  0.46214157, 0.3781041,  1.0,        0.16713998, 0.52229214};
  const float alpha = 0.5;
  const float beta  = 0.6000000238418579;
  using dragonite::norm;

  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                 alpha, beta);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_default)
{
  const float input_0[] = {
    -0.18624748, -0.32431164, -0.69093746, -1.3326764, 1.679537,   1.3089422,    -0.44412446, 0.155974,    -1.0451689,
    1.2579805,   1.5351611,   -1.1909124,  0.16324034, -2.7252662, -0.5810973,   1.8431531,   1.2349099,   1.6934557,
    0.5508985,   -0.12048769, 0.6288664,   0.73169273, 0.59262925, 0.57866216,   -0.36965284, 0.03561917,  -1.9207277,
    1.0758852,   -0.16832098, 0.13760485,  -0.7398659, 0.6481214,  -0.121811494, -0.19157661, -0.5830427,  -0.09438628,
    1.146714,    1.0114295,   1.0018022,   -2.299359,  -1.5449089, -0.3510383,   -0.26370752, -0.72696656, -0.6519702,
    -0.9311182,  -0.1924717,  -0.15886053, -0.8747525, 2.2623591,  0.4041234,    0.28390172,  0.98024315,  0.6942339,
    1.1658673,   -0.4416073,  -0.26985258, 0.534127,   0.60994184, -0.510415};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    0.4627505,  0.43513766, 0.3618125,  0.23346472, 0.83590746, 0.7617885,  0.4111751,  0.5311948,  0.2909662,
    0.7515961,  0.8070322,  0.2618175,  0.5326481,  0.0,        0.38378054, 0.86863065, 0.746982,   0.8386911,
    0.6101797,  0.47590247, 0.6257733,  0.6463386,  0.61852586, 0.61573243, 0.42606944, 0.5071238,  0.11585444,
    0.71517706, 0.4663358,  0.52752095, 0.35202682, 0.6296243,  0.4756377,  0.46168467, 0.38339147, 0.48112273,
    0.7293428,  0.7022859,  0.7003604,  0.04012817, 0.19101822, 0.42979234, 0.4472585,  0.3546067,  0.36960596,
    0.31377637, 0.46150565, 0.4682279,  0.3250495,  0.95247185, 0.5808247,  0.55678034, 0.6960486,  0.63884676,
    0.7331735,  0.41167855, 0.44602948, 0.6068254,  0.62198836, 0.397917};
  const float beta  = 0.5;
  const float alpha = 0.2;
  using dragonite::norm;

  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                 alpha, beta);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

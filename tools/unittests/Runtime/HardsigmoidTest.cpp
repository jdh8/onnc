#if defined(__GNUC__) || defined(_MSC_VER)
#define restrict __restrict
#else
#define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "relative-error.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_example) {
  const float input_0[] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[] = {0.100000024, 0.6, 1.0};
  const float alpha = 0.5;
  const float beta = 0.6000000238418579;
  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims,
                                 output_0, output_0_ndim, output_0_dims, alpha,
                                 beta);
  ASSERT_TRUE(relative_error(output_0, answer_0, 3) < 1e-5f);
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid) {
  const float input_0[] = {
      1.8232834,   0.5206396,   1.6175746,    0.17089534,  -0.60169494,
      -1.4570378,  -1.1249036,  -0.44565776,  -0.92589784, -0.47020587,
      -0.31697473, -1.5295995,  0.41004786,   0.054397006, 0.7834792,
      1.9663419,   0.22613358,  -1.7157904,   -1.4058547,  -0.39218187,
      1.8057705,   0.36880165,  -0.30426195,  0.49737832,  1.3636833,
      -0.52469105, 0.6640235,   -2.4158132,   -1.1235619,  0.2513435,
      1.0512793,   1.3206966,   0.0037718099, -0.24790506, 1.6767967,
      -0.40114453, 0.3646773,   -0.15083739,  -0.7077646,  -0.59061867,
      0.6318727,   0.5958724,   -0.2734506,   0.29916483,  -1.0418739,
      0.06947691,  -0.5586831,  -0.513428,    -0.79244846, 1.1188889,
      -0.5935784,  -0.52785337, 0.5464942,    0.3983578,   -0.12541291,
      -0.14493695, -0.7474291,  1.1239414,    -0.751677,   -0.3301461};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[60];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {
      1.0,         0.86031985, 1.0,        0.6854477,  0.29915255,  0.0,
      0.037548244, 0.37717116, 0.1370511,  0.36489707, 0.44151264,  0.0,
      0.80502397,  0.6271985,  0.99173963, 1.0,        0.7130668,   0.0,
      0.0,         0.4039091,  1.0,        0.7844008,  0.44786906,  0.8486892,
      1.0,         0.3376545,  0.9320118,  0.0,        0.038219094, 0.72567177,
      1.0,         1.0,        0.6018859,  0.4760475,  1.0,         0.39942777,
      0.7823387,   0.5245813,  0.24611771, 0.3046907,  0.91593635,  0.8979362,
      0.46327472,  0.7495824,  0.07906306, 0.6347385,  0.32065848,  0.34328604,
      0.2037758,   1.0,        0.30321082, 0.33607334, 0.87324715,  0.79917896,
      0.53729355,  0.52753156, 0.22628549, 1.0,        0.22416154,  0.434927};
  const float alpha = 0.5;
  const float beta = 0.6000000238418579;
  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims,
                                 output_0, output_0_ndim, output_0_dims, alpha,
                                 beta);
  ASSERT_TRUE(relative_error(output_0, answer_0, 60) < 1e-5f);
}

SKYPAT_F(Operator_HardSigmoid, test_hardsigmoid_default) {
  const float input_0[] = {
      0.14043954,  -0.021382624, -0.6341174,  0.1785638,   -0.019703042,
      -1.6749465,  1.434368,     -0.93805426, -0.2763318,  0.8787822,
      2.725171,    -1.3194557,   -1.6877707,  -0.50849813, -0.5905324,
      0.77294487,  -0.57843995,  -0.5366564,  -0.4863656,  1.0023329,
      -0.6642235,  1.6324908,    -0.46000946, -0.43674073, 0.28935462,
      -0.47805,    0.04131241,   -0.8643145,  2.1478076,   -0.026960015,
      0.521218,    0.9411558,    1.7276042,   0.9539323,   -0.2734332,
      2.3142111,   -0.6861755,   1.418863,    -0.21167469, -0.689398,
      -0.72038037, -1.8640615,   -0.03703725, -1.5797412,  0.057161048,
      -0.45135587, -0.7318173,   0.31065032,  0.43116274,  0.08122124,
      1.7996517,   0.7506017,    0.9448409,   -0.16730686, 1.0122339,
      0.61031604,  -0.124640554, -0.32428795, 2.2351334,   -1.5490059};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[60];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {
      0.5280879,  0.4957235,  0.37317652, 0.5357128,  0.4960594,  0.16501069,
      0.7868736,  0.31238914, 0.44473365, 0.67575645, 1.0,        0.23610884,
      0.16244584, 0.39830038, 0.38189352, 0.654589,   0.384312,   0.39266872,
      0.4027269,  0.7004666,  0.3671553,  0.82649815, 0.4079981,  0.41265184,
      0.5578709,  0.40439,    0.50826246, 0.3271371,  0.9295615,  0.49460799,
      0.6042436,  0.68823117, 0.84552085, 0.6907865,  0.44531336, 0.9628422,
      0.3627649,  0.7837726,  0.45766506, 0.3621204,  0.35592392, 0.1271877,
      0.49259254, 0.18405175, 0.51143223, 0.40972883, 0.35363653, 0.5621301,
      0.58623254, 0.51624423, 0.8599304,  0.6501204,  0.6889682,  0.46653864,
      0.70244676, 0.6220632,  0.47507188, 0.4351424,  0.9470267,  0.19019881};
  const float beta = 0.5;
  const float alpha = 0.2;
  ONNC_RUNTIME_hardsigmoid_float(nullptr, input_0, input_0_ndim, input_0_dims,
                                 output_0, output_0_ndim, output_0_dims, alpha,
                                 beta);
  ASSERT_TRUE(relative_error(output_0, answer_0, 60) < 1e-5f);
}

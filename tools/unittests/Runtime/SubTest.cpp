#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Sub, test_sub_example)
{
  const float   input_0[]      = {1.0, 2.0, 3.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  const float   input_1[]      = {3.0, 2.0, 1.0};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {-2.0, 0.0, 2.0};
  using dragonite::norm;

  ONNC_RUNTIME_sub_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_Sub, test_sub)
{
  const float   input_0[] = {-0.37607163, -0.7880378,  -0.8936801,   0.5538909,   -3.9184442, 0.16541073,   -0.17332686,
                           -1.3669816,  1.0902504,   -0.069989964, 0.40432233,  -0.1991794, -0.101682596, -0.7996422,
                           -1.579593,   1.0721097,   -2.3289626,   0.039397653, 0.3921557,  0.57419926,   -0.8164719,
                           0.81434095,  1.3551946,   0.17024161,   -0.32627925, 0.7297563,  -0.5805671,   -0.057530046,
                           0.15083097,  -0.87804824, 0.061002344,  1.376324,    1.2861631,  0.7775666,    -0.007396597,
                           1.287806,    -0.68703145, -0.40571818,  1.0009165,   0.7650911,  -0.9307061,   -1.670857,
                           0.6460342,   0.30683976,  0.8199409,    0.267827,    0.34110484, 0.5539409,    -1.4896792,
                           0.50170034,  -0.21301499, -0.49061504,  0.37701002,  0.9454403,  1.6047006,    -0.39137787,
                           1.0690066,   0.6140578,   -0.12245193,  0.7507897};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {
    -0.83267677, 1.5023602,   -0.29381013,  2.6696858,  1.7079986,   1.444983,   -0.9719954,  -0.9634458, 0.20231673,
    -1.0301552,  -0.9386542,  -0.55180055,  1.7384028,  -0.67085946, 0.83335274, 0.4172655,   -1.0951737, -0.46810177,
    -1.2308187,  -0.3466394,  -0.081932135, 0.32820314, -1.4313979,  0.2519942,  0.02790615,  0.9004192,  0.9317369,
    0.2146082,   -0.31069842, -0.3042972,   -1.5463343, -0.82865983, 0.5955972,  -0.39564312, 0.52387744, 1.1830529,
    1.6314697,   -0.49071148, 0.23236856,   1.03273,    0.92954487,  0.92758274, 0.18749717,  -0.4943762, 0.44782445,
    1.9458578,   -1.080341,   -1.0187912,   1.1122973,  0.3304794,   0.8822772,  -0.7840141,  -2.241544,  -0.0070952773,
    0.022720024, 1.6152571,   0.052644935,  0.62748724, -0.49925062, -0.3891775};
  const int32_t input_1_ndim   = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    0.45660514,  -2.2903981, -0.59986997, -2.115795,    -5.626443,   -1.2795722,  0.79866856, -0.40353584, 0.8879336,
    0.9601652,   1.3429766,  0.35262114,  -1.8400854,   -0.12878275, -2.4129457,  0.65484416, -1.2337888,  0.5074994,
    1.6229744,   0.92083865, -0.73453975, 0.4861378,    2.7865925,   -0.08175258, -0.3541854, -0.17066288, -1.5123041,
    -0.27213824, 0.46152937, -0.57375103, 1.6073366,    2.204984,    0.6905659,   1.1732097,  -0.531274,   0.10475314,
    -2.3185012,  0.0849933,  0.7685479,   -0.26763886,  -1.860251,   -2.5984397,  0.458537,   0.801216,    0.37211648,
    -1.6780307,  1.4214458,  1.5727321,   -2.6019764,   0.17122093,  -1.0952922,  0.29339907, 2.618554,    0.95253557,
    1.5819806,   -2.006635,  1.0163616,   -0.013429463, 0.3767987,   1.1399672};
  using dragonite::norm;

  ONNC_RUNTIME_sub_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_Sub, test_sub_bcast)
{
  const float input_0[] = {-0.10231339, -0.78584754,  -1.399938,   0.9422108,   0.89047307,  -0.7082923,  0.0047359425,
                           0.3981857,   0.88486594,   0.13458955,  0.07842186,  4.029239,    -1.8586851,  1.2199526,
                           -1.1431056,  0.060962155,  2.2388062,   -1.4317421,  -0.63577086, 0.43842953,  -0.013197012,
                           0.08363706,  -0.056716375, -0.82309645, -0.62171227, -0.49419895, 0.66794956,  -1.1067536,
                           -0.6686148,  0.14271744,   0.30679113,  1.7017766,   -0.17479308, -0.8056139,  -1.0474968,
                           0.5645458,   -1.1546997,   0.88413066,  0.34886345,  0.08174156,  1.479181,    1.6830431,
                           1.2110746,   0.43979606,   0.20419109,  -1.1824546,  0.715988,    1.1673971,   -0.7849166,
                           0.9968979,   -0.4200799,   0.6236922,   -0.5861155,  0.31803393,  -0.15507174, 0.30733,
                           0.6394981,   0.656787,     0.45497122,  0.5611603};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float   input_1[]      = {0.20706904, -0.66630423, -0.33068523, -2.6262963, 0.87314785};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -0.30938244, -0.119543314, -1.0692527,  3.5685072,  0.017325222, -0.91536134, 0.6710402,   0.7288709,   3.5111623,
    -0.7385583,  -0.12864718,  4.6955433,   -1.5279999, 3.8462489,   -2.0162535,  -0.14610688, 2.9051104,   -1.1010568,
    1.9905255,   -0.4347183,   -0.22026604, 0.7499413,  0.27396885,  1.8031998,   -1.4948602,  -0.70126796, 1.3342538,
    -0.77606833, 1.9576814,    -0.7304304,  0.09972209, 2.3680809,   0.15589215,  1.8206824,   -1.9206446,  0.35747677,
    -0.48839545, 1.2148159,    2.9751596,   -0.7914063, 1.272112,    2.3493474,   1.5417598,   3.0660923,   -0.66895676,
    -1.3895236,  1.3822923,    1.4980824,   1.8413796,  0.12375003,  -0.6271489,  1.2899964,   -0.25543025, 2.9443302,
    -1.0282196,  0.10026097,   1.3058023,   0.9874722,  3.0812676,   -0.31198752};
  using dragonite::norm;

  ONNC_RUNTIME_sub_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim, input_1_dims, output_0,
                         output_0_ndim, output_0_dims);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

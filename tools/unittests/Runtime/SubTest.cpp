#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Sub, test_sub_example) {
  const float input_0[3] = {1.0, 2.0, 3.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  const float input_1[3] = {3.0, 2.0, 1.0};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-2.0, 0.0, 2.0};
  ONNC_RUNTIME_sub_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Sub, test_sub) {
  const float input_0[3][4][5] = {
      {{-1.5642753839492798, 0.7884969711303711, 1.4106217622756958,
        -0.655378520488739, 0.25953447818756104},
       {0.5632154941558838, 1.7938904762268066, -0.11463945358991623,
        1.1328186988830566, -0.349170982837677},
       {0.2540458142757416, -0.3342057466506958, -0.510879397392273,
        -0.3239147365093231, 0.1418188065290451},
       {1.106113076210022, -0.21161609888076782, 1.6459647417068481,
        -0.616802990436554, -0.055912747979164124}},
      {{-0.22107957303524017, -1.0464779138565063, 0.2041015475988388,
        0.7882564663887024, -0.18555711209774017},
       {1.6838102340698242, -0.35703325271606445, -2.084430456161499,
        0.0508977547287941, 1.1112548112869263},
       {0.4322793781757355, 0.2508917450904846, 0.09990593045949936,
        0.9664342999458313, 0.0941481739282608},
       {-0.1098901554942131, 1.0757380723953247, 1.8156204223632812,
        -0.15047615766525269, -3.101278305053711}},
      {{-0.7014139890670776, -0.08898445963859558, 0.9085432291030884,
        -0.9704850912094116, 1.483425259590149},
       {0.007254813797771931, -0.01757565513253212, -0.1759190857410431,
        -0.7353541851043701, -1.027009129524231},
       {0.9258943796157837, -0.33160391449928284, -0.3623194694519043,
        -2.0916295051574707, 0.878860354423523},
       {-1.7838846445083618, 0.2595946788787842, 0.30349427461624146,
        -0.4386870563030243, 0.4811275601387024}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[3][4][5] = {
      {{1.0684679746627808, -1.773506999015808, -0.6665018796920776,
        -0.28862327337265015, 1.7127612829208374},
       {0.5088168382644653, 0.875598669052124, -0.17790037393569946,
        -0.6333866119384766, -0.06658300012350082},
       {-1.659633755683899, 0.256974458694458, -2.469423770904541,
        -0.17135868966579437, -0.9543325304985046},
       {1.5741183757781982, -2.181574821472168, -1.13749361038208,
        0.5827312469482422, 1.443745493888855}},
      {{1.1604101657867432, 0.27137401700019836, -0.1349913626909256,
        -0.5602118968963623, 2.401141881942749},
       {-0.9264876246452332, -1.1191582679748535, 0.26012033224105835,
        0.011272143572568893, 1.01362144947052},
       {2.195348024368286, 0.28781232237815857, 0.3475024402141571,
        0.16079775989055634, 1.5227710008621216},
       {1.3268617391586304, -1.9399662017822266, -0.3104778230190277,
        -0.6351912617683411, -0.3222822844982147}},
      {{-0.8550845384597778, -1.541064739227295, 0.9549140334129333,
        -0.023190028965473175, 0.09927017986774445},
       {-1.5806498527526855, -1.6706414222717285, -0.5178508758544922,
        -0.20014913380146027, -0.7577034831047058},
       {-0.2726065218448639, 1.9299163818359375, -0.3958789110183716,
        -0.0971260741353035, 2.11940336227417},
       {-1.9128732681274414, 1.2351783514022827, -0.5402621626853943,
        -1.0987322330474854, 0.16344386339187622}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-2.6327433586120605, 2.5620040893554688, 2.0771236419677734,
        -0.36675524711608887, -1.4532268047332764},
       {0.05439865589141846, 0.9182918071746826, 0.06326092034578323,
        1.7662053108215332, -0.2825879752635956},
       {1.913679599761963, -0.5911802053451538, 1.958544373512268,
        -0.15255604684352875, 1.096151351928711},
       {-0.46800529956817627, 1.969958782196045, 2.7834582328796387,
        -1.1995341777801514, -1.499658226966858}},
      {{-1.3814897537231445, -1.3178519010543823, 0.3390929102897644,
        1.34846830368042, -2.5866990089416504},
       {2.610297918319702, 0.7621250152587891, -2.344550848007202,
        0.039625611156225204, 0.09763336181640625},
       {-1.763068675994873, -0.03692057728767395, -0.24759650230407715,
        0.8056365251541138, -1.428622841835022},
       {-1.4367518424987793, 3.0157041549682617, 2.126098155975342,
        0.4847151041030884, -2.778995990753174}},
      {{0.1536705493927002, 1.452080249786377, -0.04637080430984497,
        -0.947295069694519, 1.384155035018921},
       {1.587904691696167, 1.653065800666809, 0.3419317901134491,
        -0.535205066204071, -0.26930564641952515},
       {1.1985008716583252, -2.2615203857421875, 0.033559441566467285,
        -1.994503378868103, -1.240543007850647},
       {0.1289886236190796, -0.9755836725234985, 0.8437564373016357,
        0.6600451469421387, 0.31768369674682617}}};
  ONNC_RUNTIME_sub_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Sub, test_sub_bcast) {
  const float input_0[3][4][5] = {
      {{-0.1649971902370453, -0.5021799206733704, 0.47926566004753113,
        1.902107834815979, 0.6177288293838501},
       {-0.7159932851791382, 0.25751370191574097, 0.3232462704181671,
        1.7679826021194458, -1.0137423276901245},
       {-1.8915687799453735, 0.38107413053512573, 0.40107104182243347,
        0.43391913175582886, -1.243513822555542},
       {-0.6198598146438599, -1.3149852752685547, -1.773516058921814,
        -0.16540125012397766, 0.3157573342323303}},
      {{0.3734227120876312, 0.18858781456947327, -0.7790646553039551,
        -2.1693739891052246, -0.8690140843391418},
       {-1.0852501392364502, -0.12594036757946014, 0.27970555424690247,
        0.03308328986167908, 1.7553895711898804},
       {-0.8832724094390869, 0.8734254837036133, 0.08013012260198593,
        0.32006600499153137, -1.3804802894592285},
       {-0.7138057947158813, -2.4358575344085693, -0.4777578115463257,
        -0.6452101469039917, -1.3549600839614868}},
      {{-0.8701030611991882, 0.19651249051094055, 0.28810936212539673,
        -0.7864628434181213, -0.8188321590423584},
       {-0.9321864247322083, 0.7936439514160156, 0.4193350076675415,
        -0.5251622200012207, -1.1065218448638916},
       {-2.139399766921997, 0.3963644206523895, 2.0548059940338135,
        0.7079180479049683, 0.5834452509880066},
       {0.2035660594701767, 0.6802255511283875, -0.37886562943458557,
        0.2270575761795044, 0.491522878408432}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  const float input_1[5] = {-1.4188019037246704, -0.8441662192344666,
                            -0.8904585242271423, -0.8050504326820374,
                            0.019500020891427994};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.2538046836853027, 0.3419862985610962, 1.369724154472351,
        2.707158327102661, 0.5982288122177124},
       {0.7028086185455322, 1.1016799211502075, 1.2137048244476318,
        2.573033094406128, -1.0332423448562622},
       {-0.4727668762207031, 1.2252403497695923, 1.2915295362472534,
        1.2389695644378662, -1.2630138397216797},
       {0.7989420890808105, -0.47081905603408813, -0.8830575346946716,
        0.6396491527557373, 0.2962573170661926}},
      {{1.792224645614624, 1.0327540636062622, 0.11139386892318726,
        -1.364323616027832, -0.8885141015052795},
       {0.3335517644882202, 0.7182258367538452, 1.1701641082763672,
        0.838133692741394, 1.7358895540237427},
       {0.5355294942855835, 1.7175917625427246, 0.9705886244773865,
        1.1251164674758911, -1.3999803066253662},
       {0.7049961090087891, -1.591691255569458, 0.41270071268081665,
        0.15984028577804565, -1.3744601011276245}},
      {{0.5486988425254822, 1.0406787395477295, 1.178567886352539,
        0.018587589263916016, -0.8383321762084961},
       {0.48661547899246216, 1.637810230255127, 1.309793472290039,
        0.27988821268081665, -1.1260218620300293},
       {-0.7205978631973267, 1.2405306100845337, 2.9452645778656006,
        1.5129685401916504, 0.5639452338218689},
       {1.6223679780960083, 1.524391770362854, 0.5115928649902344,
        1.0321080684661865, 0.4720228612422943}}};
  ONNC_RUNTIME_sub_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)input_1, input_1_ndim, input_1_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

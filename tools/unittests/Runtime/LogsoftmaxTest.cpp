#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_example_1)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim   = 2;
  const int32_t input_0_dims[] = {1, 3};
  float         output_0[3];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {1, 3};
  const float   answer_0[]      = {-2.407606, -1.4076059, -0.4076059};
  const int32_t axis            = 1;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_large_number)
{
  const float   input_0[]      = {0.0, 1.0, 2.0, 3.0, 10000.0, 10001.0, 10002.0, 10003.0};
  const int32_t input_0_ndim   = 2;
  const int32_t input_0_dims[] = {2, 4};
  float         output_0[8];
  const int32_t output_0_ndim   = 2;
  const int32_t output_0_dims[] = {2, 4};
  const float   answer_0[]      = {-3.4401896, -2.4401896, -1.4401897, -0.4401897,
                            -3.4401896, -2.4401896, -1.4401897, -0.4401897};
  const int32_t axis            = 1;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 8) <= 1e-5 * norm(answer_0, 8));
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_0)
{
  const float input_0[] = {
    1.0799651,  0.7812636,  0.85034204, 0.079811044, 1.7287247,    0.5095619,    1.6448361,   0.48056632, 1.16076,
    0.1491379,  0.8114501,  0.44221386, 1.0151843,   0.40938613,   0.2353867,    1.11448,     0.84057367, 0.89565796,
    0.4455075,  1.3089372,  0.5824079,  0.84345824,  0.57649857,   0.5374736,    0.62078047,  1.2889817,  1.322417,
    1.9299212,  0.75945413, 0.19148284, 0.68407077,  2.0219383,    1.132545,     0.079032704, 1.267568,   1.4503391,
    0.61172545, 1.0772471,  0.89704436, 0.21231481,  0.92464316,   0.0025282828, 0.6024377,   0.18659586, 0.27570114,
    1.5666835,  0.10350133, 0.528298,   0.33671018,  0.0062138042, 0.46149942,   2.0594597,   0.88358337, 1.0609012,
    0.44484043, 0.7567452,  2.1157835,  0.84838325,  0.24252605,   1.6717907};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -3.9954622, -4.2941637, -4.2250853, -4.995616,  -3.3467026, -4.5658655, -3.430591,  -4.594861,  -3.9146671,
    -4.9262896, -4.263977,  -4.6332135, -4.060243,  -4.6660414, -4.8400407, -3.9609473, -4.2348537, -4.1797695,
    -4.62992,   -3.76649,   -4.493019,  -4.231969,  -4.498929,  -4.5379534, -4.454647,  -3.7864456, -3.7530103,
    -3.1455061, -4.3159733, -4.8839445, -4.3913565, -3.053489,  -3.9428823, -4.9963946, -3.8078594, -3.6250882,
    -4.4637017, -3.9981802, -4.178383,  -4.8631124, -4.150784,  -5.072899,  -4.4729896, -4.888831,  -4.799726,
    -3.5087438, -4.9719257, -4.547129,  -4.738717,  -5.0692134, -4.613928,  -3.0159676, -4.191844,  -4.0145264,
    -4.6305866, -4.318682,  -2.9596438, -4.227044,  -4.832901,  -3.4036365};
  const int32_t axis = 0;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_1)
{
  const float input_0[] = {
    1.0799651,  0.7812636,  0.85034204, 0.079811044, 1.7287247,    0.5095619,    1.6448361,   0.48056632, 1.16076,
    0.1491379,  0.8114501,  0.44221386, 1.0151843,   0.40938613,   0.2353867,    1.11448,     0.84057367, 0.89565796,
    0.4455075,  1.3089372,  0.5824079,  0.84345824,  0.57649857,   0.5374736,    0.62078047,  1.2889817,  1.322417,
    1.9299212,  0.75945413, 0.19148284, 0.68407077,  2.0219383,    1.132545,     0.079032704, 1.267568,   1.4503391,
    0.61172545, 1.0772471,  0.89704436, 0.21231481,  0.92464316,   0.0025282828, 0.6024377,   0.18659586, 0.27570114,
    1.5666835,  0.10350133, 0.528298,   0.33671018,  0.0062138042, 0.46149942,   2.0594597,   0.88358337, 1.0609012,
    0.44484043, 0.7567452,  2.1157835,  0.84838325,  0.24252605,   1.6717907};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -2.820336,  -3.1190376, -3.0499592, -3.8204901, -2.1715765, -3.3907394, -2.255465,  -3.419735,  -2.739541,
    -3.7511635, -3.088851,  -3.4580874, -2.885117,  -3.490915,  -3.6649146, -2.7858212, -3.0597277, -3.0046432,
    -3.4547937, -2.591364,  -3.4622521, -3.201202,  -3.4681616, -3.5071864, -3.4238796, -2.7556784, -2.722243,
    -2.114739,  -3.2852058, -3.8531773, -3.3605893, -2.0227218, -2.912115,  -3.9656274, -2.777092,  -2.594321,
    -3.4329348, -2.967413,  -3.1476157, -3.8323452, -3.055626,  -3.9777408, -3.3778315, -3.793673,  -3.704568,
    -2.4135857, -3.8767676, -3.451971,  -3.643559,  -3.9740553, -3.5187697, -1.9208094, -3.096686,  -2.9193678,
    -3.5354285, -3.2235239, -1.8644856, -3.131886,  -3.737743,  -2.3084784};
  const int32_t axis = 1;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_default_axis)
{
  const float input_0[] = {
    1.0799651,  0.7812636,  0.85034204, 0.079811044, 1.7287247,    0.5095619,    1.6448361,   0.48056632, 1.16076,
    0.1491379,  0.8114501,  0.44221386, 1.0151843,   0.40938613,   0.2353867,    1.11448,     0.84057367, 0.89565796,
    0.4455075,  1.3089372,  0.5824079,  0.84345824,  0.57649857,   0.5374736,    0.62078047,  1.2889817,  1.322417,
    1.9299212,  0.75945413, 0.19148284, 0.68407077,  2.0219383,    1.132545,     0.079032704, 1.267568,   1.4503391,
    0.61172545, 1.0772471,  0.89704436, 0.21231481,  0.92464316,   0.0025282828, 0.6024377,   0.18659586, 0.27570114,
    1.5666835,  0.10350133, 0.528298,   0.33671018,  0.0062138042, 0.46149942,   2.0594597,   0.88358337, 1.0609012,
    0.44484043, 0.7567452,  2.1157835,  0.84838325,  0.24252605,   1.6717907};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -2.820336,  -3.1190376, -3.0499592, -3.8204901, -2.1715765, -3.3907394, -2.255465,  -3.419735,  -2.739541,
    -3.7511635, -3.088851,  -3.4580874, -2.885117,  -3.490915,  -3.6649146, -2.7858212, -3.0597277, -3.0046432,
    -3.4547937, -2.591364,  -3.4622521, -3.201202,  -3.4681616, -3.5071864, -3.4238796, -2.7556784, -2.722243,
    -2.114739,  -3.2852058, -3.8531773, -3.3605893, -2.0227218, -2.912115,  -3.9656274, -2.777092,  -2.594321,
    -3.4329348, -2.967413,  -3.1476157, -3.8323452, -3.055626,  -3.9777408, -3.3778315, -3.793673,  -3.704568,
    -2.4135857, -3.8767676, -3.451971,  -3.643559,  -3.9740553, -3.5187697, -1.9208094, -3.096686,  -2.9193678,
    -3.5354285, -3.2235239, -1.8644856, -3.131886,  -3.737743,  -2.3084784};
  const int32_t axis = 1;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_2)
{
  const float input_0[] = {
    1.0799651,  0.7812636,  0.85034204, 0.079811044, 1.7287247,    0.5095619,    1.6448361,   0.48056632, 1.16076,
    0.1491379,  0.8114501,  0.44221386, 1.0151843,   0.40938613,   0.2353867,    1.11448,     0.84057367, 0.89565796,
    0.4455075,  1.3089372,  0.5824079,  0.84345824,  0.57649857,   0.5374736,    0.62078047,  1.2889817,  1.322417,
    1.9299212,  0.75945413, 0.19148284, 0.68407077,  2.0219383,    1.132545,     0.079032704, 1.267568,   1.4503391,
    0.61172545, 1.0772471,  0.89704436, 0.21231481,  0.92464316,   0.0025282828, 0.6024377,   0.18659586, 0.27570114,
    1.5666835,  0.10350133, 0.528298,   0.33671018,  0.0062138042, 0.46149942,   2.0594597,   0.88358337, 1.0609012,
    0.44484043, 0.7567452,  2.1157835,  0.84838325,  0.24252605,   1.6717907};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -1.5722765, -1.870978,  -1.8018996, -2.5724306, -0.92351687, -2.041047,  -0.90577286, -2.0700426, -1.389849,
    -2.4014711, -1.4226936, -1.7919298, -1.2189595, -1.8247576,  -1.998757,  -1.4564625,  -1.7303689, -1.6752846,
    -2.1254349, -1.2620053, -1.6653606, -1.4043102, -1.6712699,  -1.7102948, -1.6269879,  -1.5799786, -1.5465432,
    -0.9390391, -2.1095061, -2.6774774, -2.1650662, -0.8271987,  -1.7165921, -2.7701044,  -1.581569,  -1.0939078,
    -1.9325215, -1.4669998, -1.6472025, -2.331932,  -1.1387529,  -2.0608678, -1.4609585,  -1.8768003, -1.7876949,
    -0.7361406, -2.1993227, -1.7745261, -1.9661139, -2.2966104,  -2.3294787, -0.7315184,  -1.9073948, -1.7300769,
    -2.3461375, -2.2064345, -0.8473962, -2.1147964, -2.7206535,  -1.291389};
  const int32_t axis = 2;
  using dragonite::norm;

  ONNC_RUNTIME_logsoftmax_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                                axis);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

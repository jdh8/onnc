#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_example_1) {
  const float input_0[1][3] = {{-1.0, 0.0, 1.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {1, 3};
  float output_0[1][3];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {1, 3};
  const float answer_0[1][3] = {
      {-2.4076058864593506, -1.4076058864593506, -0.4076058864593506}};
  const int32_t axis = 0;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_large_number) {
  const float input_0[2][4] = {{0.0, 1.0, 2.0, 3.0},
                               {10000.0, 10001.0, 10002.0, 10003.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {2, 4};
  float output_0[2][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {2, 4};
  const float answer_0[2][4] = {{-3.4401895999908447, -2.4401895999908447,
                                 -1.4401897192001343, -0.4401896893978119},
                                {-3.4401895999908447, -2.4401895999908447,
                                 -1.4401897192001343, -0.4401896893978119}};
  const int32_t axis = 0;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 4; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_0) {
  const float input_0[3][4][5] = {
      {{0.7080049514770508, 0.4454512596130371, 0.023925187066197395,
        0.6731306910514832, 0.855459451675415},
       {0.6294829845428467, 0.5094200372695923, 0.2978590428829193,
        0.371727854013443, 0.7890358567237854},
       {0.7190353274345398, 0.229973703622818, 0.4771292209625244,
        0.03856296464800835, 0.4623754024505615},
       {0.6346274018287659, 0.692789614200592, 0.561411440372467,
        0.014527474530041218, 2.0848636627197266}},
      {{1.8935893774032593, 0.2895132601261139, 0.20807412266731262,
        0.9716527462005615, 0.3269854784011841},
       {1.6138321161270142, 0.1392129510641098, 0.05205484852194786,
        0.016484659165143967, 2.2351386547088623},
       {0.11774271726608276, 1.10741126537323, 1.0393493175506592,
        1.2870985269546509, 1.1205734014511108},
       {0.315573126077652, 0.8274445533752441, 1.0460103750228882,
        0.19829806685447693, 1.155110478401184}},
      {{1.8368079662322998, 0.49036848545074463, 0.578527569770813,
        0.11442346125841141, 0.6097877025604248},
       {0.42051956057548523, 0.34475424885749817, 0.43224504590034485,
        1.9774932861328125, 1.5726147890090942},
       {1.6900523900985718, 1.9562311172485352, 0.9089136123657227,
        0.44841310381889343, 0.43205025792121887},
       {0.24246859550476074, 0.7304707169532776, 0.37943482398986816,
        0.40490102767944336, 1.1904418468475342}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-4.315623760223389, -4.578177452087402, -4.999703407287598,
        -4.350498199462891, -4.168169021606445},
       {-4.394145965576172, -4.514208793640137, -4.725769519805908,
        -4.651900768280029, -4.234592914581299},
       {-4.304593086242676, -4.793654918670654, -4.546499252319336,
        -4.985065460205078, -4.561253547668457},
       {-4.389001369476318, -4.330839157104492, -4.462217330932617,
        -5.009100914001465, -2.938765048980713}},
      {{-3.1300392150878906, -4.7341156005859375, -4.815554618835449,
        -4.051976203918457, -4.696643352508545},
       {-3.409796714782715, -4.884415626525879, -4.971573829650879,
        -5.007143974304199, -2.788490056991577},
       {-4.905885696411133, -3.91621732711792, -3.9842793941497803,
        -3.736530303955078, -3.903055191040039},
       {-4.70805549621582, -4.196184158325195, -3.9776182174682617,
        -4.82533073425293, -3.868518352508545}},
      {{-3.1868207454681396, -4.533260345458984, -4.445101261138916,
        -4.909205436706543, -4.413841247558594},
       {-4.603109359741211, -4.678874492645264, -4.591383934020996,
        -3.046135425567627, -3.4510140419006348},
       {-3.333576202392578, -3.0673975944519043, -4.114715099334717,
        -4.5752153396606445, -4.591578483581543},
       {-4.781160354614258, -4.293158054351807, -4.644193649291992,
        -4.618727684020996, -3.8331868648529053}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_1) {
  const float input_0[3][4][5] = {
      {{0.7080049514770508, 0.4454512596130371, 0.023925187066197395,
        0.6731306910514832, 0.855459451675415},
       {0.6294829845428467, 0.5094200372695923, 0.2978590428829193,
        0.371727854013443, 0.7890358567237854},
       {0.7190353274345398, 0.229973703622818, 0.4771292209625244,
        0.03856296464800835, 0.4623754024505615},
       {0.6346274018287659, 0.692789614200592, 0.561411440372467,
        0.014527474530041218, 2.0848636627197266}},
      {{1.8935893774032593, 0.2895132601261139, 0.20807412266731262,
        0.9716527462005615, 0.3269854784011841},
       {1.6138321161270142, 0.1392129510641098, 0.05205484852194786,
        0.016484659165143967, 2.2351386547088623},
       {0.11774271726608276, 1.10741126537323, 1.0393493175506592,
        1.2870985269546509, 1.1205734014511108},
       {0.315573126077652, 0.8274445533752441, 1.0460103750228882,
        0.19829806685447693, 1.155110478401184}},
      {{1.8368079662322998, 0.49036848545074463, 0.578527569770813,
        0.11442346125841141, 0.6097877025604248},
       {0.42051956057548523, 0.34475424885749817, 0.43224504590034485,
        1.9774932861328125, 1.5726147890090942},
       {1.6900523900985718, 1.9562311172485352, 0.9089136123657227,
        0.44841310381889343, 0.43205025792121887},
       {0.24246859550476074, 0.7304707169532776, 0.37943482398986816,
        0.40490102767944336, 1.1904418468475342}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-2.9737014770507812, -3.236255168914795, -3.6577811241149902,
        -3.008575916290283, -2.826247215270996},
       {-3.0522236824035645, -3.1722865104675293, -3.38384747505188,
        -3.309978723526001, -2.8926706314086914},
       {-2.9626712799072266, -3.451732873916626, -3.2045774459838867,
        -3.643143653869629, -3.2193312644958496},
       {-3.047079086303711, -2.9889168739318848, -3.1202950477600098,
        -3.6671791076660156, -1.596842885017395}},
      {{-2.1208958625793457, -3.7249717712402344, -3.806411027908325,
        -3.042832374572754, -3.687499523162842},
       {-2.4006528854370117, -3.875272274017334, -3.962430238723755,
        -3.998000383377075, -1.7793464660644531},
       {-3.896742343902588, -2.907073974609375, -2.9751358032226562,
        -2.727386474609375, -2.893911838531494},
       {-3.6989121437072754, -3.1870405673980713, -2.968474864959717,
        -3.8161871433258057, -2.859374523162842}},
      {{-2.2036585807800293, -3.550097942352295, -3.4619388580322266,
        -3.9260430335998535, -3.4306788444519043},
       {-3.6199469566345215, -3.6957123279571533, -3.6082215309143066,
        -2.0629732608795166, -2.4678516387939453},
       {-2.350414276123047, -2.084235429763794, -3.1315529346466064,
        -3.5920534133911133, -3.6084163188934326},
       {-3.7979979515075684, -3.3099958896636963, -3.661031723022461,
        -3.6355655193328857, -2.850024700164795}}};
  const int32_t axis = 1;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_default_axis) {
  const float input_0[3][4][5] = {
      {{0.7080049514770508, 0.4454512596130371, 0.023925187066197395,
        0.6731306910514832, 0.855459451675415},
       {0.6294829845428467, 0.5094200372695923, 0.2978590428829193,
        0.371727854013443, 0.7890358567237854},
       {0.7190353274345398, 0.229973703622818, 0.4771292209625244,
        0.03856296464800835, 0.4623754024505615},
       {0.6346274018287659, 0.692789614200592, 0.561411440372467,
        0.014527474530041218, 2.0848636627197266}},
      {{1.8935893774032593, 0.2895132601261139, 0.20807412266731262,
        0.9716527462005615, 0.3269854784011841},
       {1.6138321161270142, 0.1392129510641098, 0.05205484852194786,
        0.016484659165143967, 2.2351386547088623},
       {0.11774271726608276, 1.10741126537323, 1.0393493175506592,
        1.2870985269546509, 1.1205734014511108},
       {0.315573126077652, 0.8274445533752441, 1.0460103750228882,
        0.19829806685447693, 1.155110478401184}},
      {{1.8368079662322998, 0.49036848545074463, 0.578527569770813,
        0.11442346125841141, 0.6097877025604248},
       {0.42051956057548523, 0.34475424885749817, 0.43224504590034485,
        1.9774932861328125, 1.5726147890090942},
       {1.6900523900985718, 1.9562311172485352, 0.9089136123657227,
        0.44841310381889343, 0.43205025792121887},
       {0.24246859550476074, 0.7304707169532776, 0.37943482398986816,
        0.40490102767944336, 1.1904418468475342}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-2.9737014770507812, -3.236255168914795, -3.6577811241149902,
        -3.008575916290283, -2.826247215270996},
       {-3.0522236824035645, -3.1722865104675293, -3.38384747505188,
        -3.309978723526001, -2.8926706314086914},
       {-2.9626712799072266, -3.451732873916626, -3.2045774459838867,
        -3.643143653869629, -3.2193312644958496},
       {-3.047079086303711, -2.9889168739318848, -3.1202950477600098,
        -3.6671791076660156, -1.596842885017395}},
      {{-2.1208958625793457, -3.7249717712402344, -3.806411027908325,
        -3.042832374572754, -3.687499523162842},
       {-2.4006528854370117, -3.875272274017334, -3.962430238723755,
        -3.998000383377075, -1.7793464660644531},
       {-3.896742343902588, -2.907073974609375, -2.9751358032226562,
        -2.727386474609375, -2.893911838531494},
       {-3.6989121437072754, -3.1870405673980713, -2.968474864959717,
        -3.8161871433258057, -2.859374523162842}},
      {{-2.2036585807800293, -3.550097942352295, -3.4619388580322266,
        -3.9260430335998535, -3.4306788444519043},
       {-3.6199469566345215, -3.6957123279571533, -3.6082215309143066,
        -2.0629732608795166, -2.4678516387939453},
       {-2.350414276123047, -2.084235429763794, -3.1315529346466064,
        -3.5920534133911133, -3.6084163188934326},
       {-3.7979979515075684, -3.3099958896636963, -3.661031723022461,
        -3.6355655193328857, -2.850024700164795}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LogSoftmax, test_logsoftmax_axis_2) {
  const float input_0[3][4][5] = {
      {{0.7080049514770508, 0.4454512596130371, 0.023925187066197395,
        0.6731306910514832, 0.855459451675415},
       {0.6294829845428467, 0.5094200372695923, 0.2978590428829193,
        0.371727854013443, 0.7890358567237854},
       {0.7190353274345398, 0.229973703622818, 0.4771292209625244,
        0.03856296464800835, 0.4623754024505615},
       {0.6346274018287659, 0.692789614200592, 0.561411440372467,
        0.014527474530041218, 2.0848636627197266}},
      {{1.8935893774032593, 0.2895132601261139, 0.20807412266731262,
        0.9716527462005615, 0.3269854784011841},
       {1.6138321161270142, 0.1392129510641098, 0.05205484852194786,
        0.016484659165143967, 2.2351386547088623},
       {0.11774271726608276, 1.10741126537323, 1.0393493175506592,
        1.2870985269546509, 1.1205734014511108},
       {0.315573126077652, 0.8274445533752441, 1.0460103750228882,
        0.19829806685447693, 1.155110478401184}},
      {{1.8368079662322998, 0.49036848545074463, 0.578527569770813,
        0.11442346125841141, 0.6097877025604248},
       {0.42051956057548523, 0.34475424885749817, 0.43224504590034485,
        1.9774932861328125, 1.5726147890090942},
       {1.6900523900985718, 1.9562311172485352, 0.9089136123657227,
        0.44841310381889343, 0.43205025792121887},
       {0.24246859550476074, 0.7304707169532776, 0.37943482398986816,
        0.40490102767944336, 1.1904418468475342}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-1.4812060594558716, -1.7437597513198853, -2.16528582572937,
        -1.516080379486084, -1.3337515592575073},
       {-1.5152134895324707, -1.6352763175964355, -1.8468374013900757,
        -1.7729685306549072, -1.3556605577468872},
       {-1.3024617433547974, -1.7915233373641968, -1.544367790222168,
        -1.9829341173171997, -1.5591216087341309},
       {-2.0530076026916504, -1.9948455095291138, -2.126223564147949,
        -2.673107624053955, -0.6027714014053345}},
      {{-0.6896033883094788, -2.2936794757843018, -2.3751187324523926,
        -1.6115400791168213, -2.256207227706909},
       {-1.2534542083740234, -2.7280735969543457, -2.8152313232421875,
        -2.850801467895508, -0.6321476697921753},
       {-2.4972939491271973, -1.5076254606246948, -1.5756874084472656,
        -1.327938199043274, -1.494463324546814},
       {-2.0730504989624023, -1.5611790418624878, -1.3426132202148438,
        -2.1903254985809326, -1.2335131168365479}},
      {{-0.7011706829071045, -2.047610282897949, -1.9594510793685913,
        -2.4235551357269287, -1.9281909465789795},
       {-2.383988618850708, -2.45975399017334, -2.372263193130493,
        -0.8270149827003479, -1.231893539428711},
       {-1.2047677040100098, -0.9385890364646912, -1.9859066009521484,
        -2.4464070796966553, -2.4627699851989746},
       {-2.019252300262451, -1.531250238418579, -1.8822861909866333,
        -1.856819987297058, -1.0712791681289673}}};
  const int32_t axis = 2;
  ONNC_RUNTIME_logsoftmax_float(NULL, (float *)input_0, input_0_ndim,
                                input_0_dims, (float *)output_0, output_0_ndim,
                                output_0_dims, axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

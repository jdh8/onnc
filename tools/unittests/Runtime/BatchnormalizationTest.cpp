#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_BatchNormalization, test_batchnorm_example) {
  const float input_0[1][2][1][3] = {{{{-1.0, 0.0, 1.0}}, {{2.0, 3.0, 4.0}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 2, 1, 3};
  const float input_1[2] = {1.0, 1.5};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {2};
  const float input_2[2] = {0.0, 1.0};
  const int32_t input_2_ndim = 1;
  const int32_t input_2_dims[] = {2};
  const float input_3[2] = {0.0, 3.0};
  const int32_t input_3_ndim = 1;
  const int32_t input_3_dims[] = {2};
  const float input_4[2] = {1.0, 1.5};
  const int32_t input_4_ndim = 1;
  const int32_t input_4_dims[] = {2};
  float output_0[1][2][1][3];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 2, 1, 3};
  const float answer_0[1][2][1][3] = {
      {{{-0.9999949932098389, 0.0, 0.9999949932098389}},
       {{-0.22474074363708496, 1.0, 2.224740743637085}}}};
  const float output_1[] = {};
  const int32_t output_1_ndim = 0;
  const int32_t output_1_dims[] = {};
  const float output_2[] = {};
  const int32_t output_2_ndim = 0;
  const int32_t output_2_dims[] = {};
  const float output_3[] = {};
  const int32_t output_3_ndim = 0;
  const int32_t output_3_dims[] = {};
  const float output_4[] = {};
  const int32_t output_4_ndim = 0;
  const int32_t output_4_dims[] = {};
  const float momentum = 0;
  const float epsilon = 0;
  const int32_t spatial = 0;
  ONNC_RUNTIME_batchnormalization_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)input_3, input_3_ndim, input_3_dims, (float *)input_4,
      input_4_ndim, input_4_dims, (float *)output_0, output_0_ndim,
      output_0_dims, (float *)output_1, output_1_ndim, output_1_dims,
      (float *)output_2, output_2_ndim, output_2_dims, (float *)output_3,
      output_3_ndim, output_3_dims, (float *)output_4, output_4_ndim,
      output_4_dims, epsilon, momentum, spatial);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 2 * 1 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_BatchNormalization, test_batchnorm_epsilon) {
  const float input_0[2][3][4][5] = {
      {{{1.1478506326675415, 0.41268736124038696, -0.3491433560848236,
         -1.0596507787704468, -0.24637766182422638},
        {-1.3240675926208496, -0.2339371144771576, 0.3017815947532654,
         0.4333959221839905, 1.5847928524017334},
        {-0.06439709663391113, 0.19145230948925018, -1.4037660360336304,
         -0.9355360269546509, 0.2008151262998581},
        {0.9582114219665527, -0.023623349145054817, 1.2151936292648315,
         0.4423861503601074, -0.8788415789604187}},
       {{-1.1074038743972778, 0.009825487621128559, 0.640912652015686,
         -1.1300437450408936, -0.3889743685722351},
        {-0.0669638067483902, 1.491199016571045, 0.45259809494018555,
         -1.2152211666107178, 0.10778509825468063},
        {-0.8425803780555725, -2.4414889812469482, -1.748363733291626,
         1.306330919265747, 0.8189665079116821},
        {1.2220313549041748, 0.07416991889476776, 0.06001853570342064,
         -1.0759352445602417, 1.4707684516906738}},
       {{0.652877151966095, -1.3879083395004272, -2.0734963417053223,
         1.247806191444397, 0.7193544507026672},
        {1.107080340385437, -0.3255709111690521, -0.15591393411159515,
         1.2685728073120117, 1.7055567502975464},
        {1.4635918140411377, 0.2324458807706833, 1.0252442359924316,
         -0.22080011665821075, -1.1586081981658936},
        {0.026428626850247383, 1.3428714275360107, -0.549896240234375,
         1.3416268825531006, 2.0177955627441406}}},
      {{{-2.2079501152038574, -0.5726293921470642, -0.8519412875175476,
         -0.32184675335884094, -1.0259613990783691},
        {0.8749906420707703, 0.758277177810669, 0.6955105662345886,
         0.47456789016723633, 1.7070127725601196},
        {-0.5551381707191467, -1.2939724922180176, 1.3909246921539307,
         1.4875539541244507, -1.5504043102264404},
        {0.3023328483104706, -0.8478295803070068, 1.9156184196472168,
         -1.1134058237075806, -0.6165196895599365}},
       {{0.15615388751029968, -0.1051827222108841, 0.5093206763267517,
         0.8900691866874695, 0.6695237159729004},
        {-1.9452370405197144, 0.8540502190589905, 1.9897961616516113,
         -1.9514687061309814, 0.9871280789375305},
        {-0.7501868009567261, 0.627481997013092, 1.1675326824188232,
         -0.4637148678302765, 0.8460374474525452},
        {1.9277660846710205, -0.20637868344783783, 0.7419711351394653,
         1.0063620805740356, -0.8055436611175537}},
       {{1.2286361455917358, -1.6162245273590088, 1.0865789651870728,
         -0.2591778337955475, 0.38258302211761475},
        {-0.2706051766872406, -0.4487653374671936, -1.3331949710845947,
         1.9173260927200317, -1.2527223825454712},
        {0.43973082304000854, -0.3275090456008911, 0.719370424747467,
         1.8331599235534668, 0.4540058374404907},
        {-0.2608252465724945, 1.125504732131958, -0.46413788199424744,
         0.823241114616394, 1.9514585733413696}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  const float input_1[3] = {-0.658758819103241, 0.1449441760778427,
                            2.3249971866607666};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {3};
  const float input_2[3] = {0.30159953236579895, -0.5078677535057068,
                            -0.29952022433280945};
  const int32_t input_2_ndim = 1;
  const int32_t input_2_dims[] = {3};
  const float input_3[3] = {0.7082991600036621, 2.158881425857544,
                            0.2732711136341095};
  const int32_t input_3_ndim = 1;
  const int32_t input_3_dims[] = {3};
  const float input_4[3] = {0.6877915263175964, 0.6275221705436707,
                            0.20606008172035217};
  const int32_t input_4_ndim = 1;
  const int32_t input_4_dims[] = {3};
  float output_0[2][3][4][5];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {2, 3, 4, 5};
  const float answer_0[2][3][4][5] = {
      {{{-0.0450361967086792, 0.5347226858139038, 1.1355117559432983,
         1.6958266496658325, 1.0544694662094116},
        {1.9043490886688232, 1.0446587800979614, 0.6221842765808105,
         0.5183916091918945, -0.3896142542362213},
        {0.9109573364257812, 0.7091913223266602, 1.9672003984451294,
         1.5979481935501099, 0.7018077373504639},
        {0.10451564192771912, 0.8788026571273804, -0.09814369678497314,
         0.5113018155097961, 1.5532382726669312}},
       {{-1.1008028984069824, -0.8979901075363159, -0.7834275960922241,
         -1.1049127578735352, -0.9703850746154785},
        {-0.9119298458099365, -0.629073441028595, -0.8176127672195435,
         -1.120375156402588, -0.8802073001861572},
        {-1.0527290105819702, -1.3429820537567139, -1.2171576023101807,
         -0.662632942199707, -0.7511051297187805},
        {-0.6779359579086304, -0.8863095045089722, -0.8888784646987915,
         -1.095090389251709, -0.6327822208404541}},
       {{1.5992318391799927, -8.608576774597168, -12.037820816040039,
         4.575008869171143, 1.9317448139190674},
        {3.8711116313934326, -3.2948689460754395, -2.4462616443634033,
         4.678881645202637, 6.8646321296691895},
        {5.654346942901611, -0.5037240386009216, 3.461775541305542,
         -2.7708160877227783, -7.461639404296875},
        {-1.5342020988464355, 5.050515651702881, -4.416922092437744,
         5.044290542602539, 8.426419258117676}}},
      {{{2.6013896465301514, 1.311755657196045, 1.5320243835449219,
         1.113985300064087, 1.6692588329315186},
        {0.17014457285404205, 0.2621862590312958, 0.311684787273407,
         0.4859229028224945, -0.4859984219074249},
        {1.2979618310928345, 1.8806157112121582, -0.23672744631767273,
         -0.3129304349422455, 2.082840919494629},
        {0.6217495799064636, 1.5287818908691406, -0.6505073308944702,
         1.7382185459136963, 1.3463680744171143}},
       {{-0.8714268207550049, -0.9188677668571472, -0.8073157072067261,
         -0.7381977438926697, -0.7782337665557861},
        {-1.2528964281082153, -0.7447363138198853, -0.5385621190071106,
         -1.2540277242660522, -0.7205784320831299},
        {-1.035956621170044, -0.7858657240867615, -0.6878292560577393,
         -0.9839528203010559, -0.7461909055709839},
        {-0.5498225688934326, -0.9372380971908569, -0.7650822401046753,
         -0.7170868515968323, -1.0460057258605957}},
       {{4.479121685028076, -9.750592231750488, 3.7685658931732178,
         -2.962777614593506, 0.24724718928337097},
        {-3.0199360847473145, -3.9110755920410156, -8.334905624389648,
         7.9238810539245605, -7.932389259338379},
        {0.5330948829650879, -3.304563283920288, 1.9318244457244873,
         7.502890586853027, 0.6044970750808716},
        {-2.971017837524414, 3.963268518447876, -3.9879674911499023,
         2.451375722885132, 8.094608306884766}}}};
  const float output_1[] = {};
  const int32_t output_1_ndim = 0;
  const int32_t output_1_dims[] = {};
  const float output_2[] = {};
  const int32_t output_2_ndim = 0;
  const int32_t output_2_dims[] = {};
  const float output_3[] = {};
  const int32_t output_3_ndim = 0;
  const int32_t output_3_dims[] = {};
  const float output_4[] = {};
  const int32_t output_4_ndim = 0;
  const int32_t output_4_dims[] = {};
  const float epsilon = 0.009999999776482582;
  const float momentum = 0;
  const int32_t spatial = 0;
  ONNC_RUNTIME_batchnormalization_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)input_3, input_3_ndim, input_3_dims, (float *)input_4,
      input_4_ndim, input_4_dims, (float *)output_0, output_0_ndim,
      output_0_dims, (float *)output_1, output_1_ndim, output_1_dims,
      (float *)output_2, output_2_ndim, output_2_dims, (float *)output_3,
      output_3_ndim, output_3_dims, (float *)output_4, output_4_ndim,
      output_4_dims, epsilon, momentum, spatial);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Softsign, test_softsign_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-0.5, 0.0, 0.5};
  ONNC_RUNTIME_softsign_float(NULL, (float *)input_0, input_0_ndim,
                              input_0_dims, (float *)output_0, output_0_ndim,
                              output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softsign, test_softsign) {
  const float input_0[3][4][5] = {
      {{0.3549293875694275, -0.6023366451263428, 0.9415658712387085,
        0.8380056023597717, 0.4911230504512787},
       {0.6058290600776672, -0.3893897831439972, 0.20370222628116608,
        1.2002601623535156, -1.110481858253479},
       {-1.4091272354125977, 0.15393267571926117, 1.3399001359939575,
        1.9739917516708374, -1.2113817930221558},
       {-1.2445427179336548, 1.217030644416809, 0.3373723328113556,
        -1.2823530435562134, -1.4627150297164917}},
      {{0.430009126663208, 1.0603004693984985, -0.16325080394744873,
        0.08010149002075195, 0.2331046313047409},
       {0.8852388262748718, -0.440825879573822, -0.6215757727622986,
        0.10854382067918777, 1.6888086795806885},
       {-0.6805766224861145, -0.3991466164588928, 0.26358360052108765,
        0.6602352261543274, -0.5974718928337097},
       {0.26392024755477905, 0.042602960020303726, -0.7387247681617737,
        0.6040914058685303, 0.9731882214546204}},
      {{0.9785327911376953, 0.06945465505123138, 0.006823793053627014,
        1.3683815002441406, -0.7773923277854919},
       {-0.16651594638824463, -1.2524662017822266, -1.1644535064697266,
        0.5506702661514282, 0.4631589353084564},
       {-0.10751879960298538, -1.7092843055725098, 0.878315269947052,
        1.5255299806594849, -0.6126930117607117},
       {-0.3665769398212433, 0.9133926033973694, -0.04969405755400658,
        1.2901920080184937, -0.4365030825138092}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.2619541585445404, -0.3759114146232605, 0.48495179414749146,
        0.45593202114105225, 0.329364538192749},
       {0.3772687315940857, -0.2802595794200897, 0.16922974586486816,
        0.5455082654953003, -0.5261746048927307},
       {-0.5849119424819946, 0.13339830935001373, 0.5726313591003418,
        0.6637515425682068, -0.5477940440177917},
       {-0.5544750094413757, 0.5489462614059448, 0.2522650957107544,
        -0.5618557333946228, -0.5939440727233887}},
      {{0.300703763961792, 0.5146339535713196, -0.1403401643037796,
        0.07416107505559921, 0.18903881311416626},
       {0.46956321597099304, -0.30595359206199646, -0.38331589102745056,
        0.09791567176580429, 0.6280880570411682},
       {-0.4049661457538605, -0.2852786183357239, 0.20860004425048828,
        0.3976757228374481, -0.3740108907222748},
       {0.20881083607673645, 0.04086210951209068, -0.42486587166786194,
        0.3765941262245178, 0.4932059943675995}},
      {{0.49457496404647827, 0.06494399160146713, 0.006777544505894184,
        0.5777707099914551, -0.4373779892921448},
       {-0.14274638891220093, -0.5560421943664551, -0.537989616394043,
        0.3551175892353058, 0.3165472447872162},
       {-0.0970807895064354, -0.6308988332748413, 0.4676080346107483,
        0.6040435433387756, -0.379919171333313},
       {-0.2682446539402008, 0.4773681163787842, -0.04734146595001221,
        0.5633553862571716, -0.3038650453090668}}};
  ONNC_RUNTIME_softsign_float(NULL, (float *)input_0, input_0_ndim,
                              input_0_dims, (float *)output_0, output_0_ndim,
                              output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

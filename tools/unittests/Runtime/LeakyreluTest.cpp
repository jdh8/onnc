#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_LeakyRelu, test_leakyrelu_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-0.10000000149011612, 0.0, 1.0};
  const float alpha = 0.10000000149011612;
  ONNC_RUNTIME_leakyrelu_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LeakyRelu, test_leakyrelu) {
  const float input_0[3][4][5] = {
      {{-0.03455621376633644, 0.04687083512544632, -0.4235282838344574,
        0.5084674954414368, -1.027778148651123},
       {-0.312222421169281, 1.9331302642822266, -2.3871147632598877,
        -0.6788936853408813, 1.1711424589157104},
       {-0.8105043768882751, -0.7590932846069336, 0.2940903306007385,
        0.15014319121837616, -0.10236648470163345},
       {0.3715859055519104, -2.1108851432800293, -0.3359256386756897,
        0.4027695059776306, -0.4900425970554352}},
      {{-1.8630640506744385, 0.39402061700820923, -0.32865458726882935,
        0.5167247653007507, 0.14624647796154022},
       {-0.2938755452632904, -0.6472745537757874, 0.30317947268486023,
        -0.6774194240570068, -0.33990123867988586},
       {2.5487983226776123, -0.23892609775066376, -0.512589156627655,
        0.5540915131568909, 0.054899878799915314},
       {-2.194387674331665, 0.052799295634031296, -0.07456239312887192,
        1.1992907524108887, 1.0655262470245361}},
      {{0.28898724913597107, 2.5041656494140625, -0.5009679198265076,
        0.05587378889322281, 1.4629234075546265},
       {-0.7805799245834351, 0.38338640332221985, -0.2580651342868805,
        0.7422147393226624, -0.024122564122080803},
       {-0.37359827756881714, 0.7354854941368103, 0.5956894159317017,
        0.1690482497215271, -1.5787231922149658},
       {-0.3190075755119324, 0.3399672210216522, -0.4729880094528198,
        -0.6765733361244202, -0.08410729467868805}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-0.003455621423199773, 0.04687083512544632, -0.0423528291285038,
        0.5084674954414368, -0.10277781635522842},
       {-0.03122224286198616, 1.9331302642822266, -0.23871147632598877,
        -0.06788937002420425, 1.1711424589157104},
       {-0.08105044066905975, -0.0759093314409256, 0.2940903306007385,
        0.15014319121837616, -0.010236648842692375},
       {0.3715859055519104, -0.21108852326869965, -0.03359256312251091,
        0.4027695059776306, -0.04900426045060158}},
      {{-0.1863064020872116, 0.39402061700820923, -0.032865460962057114,
        0.5167247653007507, 0.14624647796154022},
       {-0.02938755415380001, -0.06472745537757874, 0.30317947268486023,
        -0.06774194538593292, -0.033990126103162766},
       {2.5487983226776123, -0.023892609402537346, -0.05125891789793968,
        0.5540915131568909, 0.054899878799915314},
       {-0.21943877637386322, 0.052799295634031296, -0.007456239312887192,
        1.1992907524108887, 1.0655262470245361}},
      {{0.28898724913597107, 2.5041656494140625, -0.0500967912375927,
        0.05587378889322281, 1.4629234075546265},
       {-0.07805799692869186, 0.38338640332221985, -0.02580651454627514,
        0.7422147393226624, -0.0024122565519064665},
       {-0.03735982999205589, 0.7354854941368103, 0.5956894159317017,
        0.1690482497215271, -0.15787231922149658},
       {-0.031900759786367416, 0.3399672210216522, -0.04729880020022392,
        -0.06765733659267426, -0.008410729467868805}}};
  const float alpha = 0.10000000149011612;
  ONNC_RUNTIME_leakyrelu_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_LeakyRelu, test_leakyrelu_default) {
  const float input_0[3][4][5] = {
      {{-1.051385760307312, -0.9620172381401062, -0.14540566504001617,
        -0.07377162575721741, 0.6667737364768982},
       {0.8576470017433167, 0.23943229019641876, 1.0076168775558472,
        1.963689923286438, -1.2953230142593384},
       {-1.5524840354919434, 0.49527469277381897, 1.4255411624908447,
        -0.8221806287765503, -0.18424741923809052},
       {-2.435026168823242, 2.2764217853546143, 1.6797196865081787,
        -1.1650984287261963, -0.7050309181213379}},
      {{1.921356201171875, -0.9330235719680786, -0.03698035329580307,
        1.148565411567688, -1.022230625152588},
       {-0.2609500586986542, -1.6312564611434937, -0.44737619161605835,
        -0.5376482009887695, 0.563494086265564},
       {-0.4473002552986145, 0.8542138934135437, 0.3825414180755615,
        -0.4199201464653015, -1.2383441925048828},
       {-1.233285903930664, -0.4837217628955841, -0.5348013639450073,
        0.5694201588630676, 0.3182641863822937}},
      {{-0.6792708039283752, 1.4950246810913086, -1.2905035018920898,
        0.9087120890617371, 1.1463314294815063},
       {1.9731738567352295, -1.4346061944961548, 0.6135473847389221,
        0.5931947827339172, -0.20018695294857025},
       {1.615952968597412, 1.1216273307800293, 0.09903055429458618,
        0.5221641659736633, -0.15914733707904816},
       {-1.4134937524795532, -0.022905122488737106, 0.3680155873298645,
        0.5097071528434753, -0.2884445786476135}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-0.010513857007026672, -0.00962017197161913, -0.0014540565898641944,
        -0.0007377162692137063, 0.6667737364768982},
       {0.8576470017433167, 0.23943229019641876, 1.0076168775558472,
        1.963689923286438, -0.012953230179846287},
       {-0.015524839982390404, 0.49527469277381897, 1.4255411624908447,
        -0.008221806026995182, -0.0018424740992486477},
       {-0.024350261315703392, 2.2764217853546143, 1.6797196865081787,
        -0.011650984175503254, -0.0070503088645637035}},
      {{1.921356201171875, -0.009330235421657562, -0.0003698035143315792,
        1.148565411567688, -0.010222306475043297},
       {-0.002609500428661704, -0.01631256379187107, -0.004473761655390263,
        -0.005376481916755438, 0.563494086265564},
       {-0.004473002627491951, 0.8542138934135437, 0.3825414180755615,
        -0.004199201241135597, -0.01238344144076109},
       {-0.012332858517765999, -0.00483721774071455, -0.005348013713955879,
        0.5694201588630676, 0.3182641863822937}},
      {{-0.006792707834392786, 1.4950246810913086, -0.01290503516793251,
        0.9087120890617371, 1.1463314294815063},
       {1.9731738567352295, -0.014346061274409294, 0.6135473847389221,
        0.5931947827339172, -0.0020018694922327995},
       {1.615952968597412, 1.1216273307800293, 0.09903055429458618,
        0.5221641659736633, -0.00159147335216403},
       {-0.014134936966001987, -0.0002290512202307582, 0.3680155873298645,
        0.5097071528434753, -0.0028844457119703293}}};
  const float alpha = 0;
  ONNC_RUNTIME_leakyrelu_float(NULL, (float *)input_0, input_0_ndim,
                               input_0_dims, (float *)output_0, output_0_ndim,
                               output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_LeakyRelu, test_leakyrelu_example)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {-0.1, 0.0, 1.0};
  const float   alpha           = 0.10000000149011612;
  using dragonite::norm;

  ONNC_RUNTIME_leakyrelu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                               alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_LeakyRelu, test_leakyrelu)
{
  const float input_0[] = {
    -0.3134619,  0.23723046,  0.5562696,  0.8205983,   0.080466144, -0.93405354, -0.414325,   -0.2941547,  -0.23454306,
    -1.0153971,  -1.0262321,  -0.3488943, -0.9314521,  0.62573236,  0.98869735,  -0.31825557, 0.7999377,   0.39668882,
    0.9204827,   1.7083486,   0.40924174, -0.7942209,  -0.4473319,  -0.42581838, 1.8648849,   0.1862177,   0.92108303,
    1.9413848,   -1.4689616,  0.7671758,  -0.36803252, -0.690807,   -2.2190993,  -1.685576,   -0.86061406, 0.4389551,
    1.0379313,   -0.13975382, 0.14342543, 1.7636926,   0.39384776,  -0.4319702,  -0.9032407,  1.9638523,   -1.3836721,
    -0.6992388,  -0.7347436,  -0.3239772, 1.0134674,   -1.0702889,  0.6791012,   1.5826843,   -0.19404349, 0.64814156,
    -0.32720083, -1.4575299,  2.1415203,  0.2902811,   1.3660097,   1.1722268};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -0.03134619,  0.23723046,   0.5562696,   0.8205983,   0.080466144,  -0.09340536,  -0.0414325,   -0.029415471,
    -0.023454307, -0.10153971,  -0.10262322, -0.03488943, -0.093145214, 0.62573236,   0.98869735,   -0.031825557,
    0.7999377,    0.39668882,   0.9204827,   1.7083486,   0.40924174,   -0.079422094, -0.044733193, -0.042581838,
    1.8648849,    0.1862177,    0.92108303,  1.9413848,   -0.14689617,  0.7671758,    -0.036803253, -0.0690807,
    -0.22190993,  -0.1685576,   -0.08606141, 0.4389551,   1.0379313,    -0.013975382, 0.14342543,   1.7636926,
    0.39384776,   -0.04319702,  -0.09032407, 1.9638523,   -0.13836722,  -0.06992388,  -0.07347436,  -0.03239772,
    1.0134674,    -0.107028894, 0.6791012,   1.5826843,   -0.01940435,  0.64814156,   -0.032720085, -0.145753,
    2.1415203,    0.2902811,    1.3660097,   1.1722268};
  const float alpha = 0.10000000149011612;
  using dragonite::norm;

  ONNC_RUNTIME_leakyrelu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                               alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_LeakyRelu, test_leakyrelu_default)
{
  const float   input_0[] = {-0.19492519, -1.3380216,  -0.22271635, 0.3756873,   -0.5672095,   0.8861597,    1.6822838,
                           -1.0338756,  -2.2605271,  1.538079,    -0.12086523, -0.032827828, 0.7768401,    0.7718998,
                           1.13998,     0.13666973,  0.2814455,   -0.08920119, 1.0878885,    -0.054600224, 0.5722781,
                           0.63327277,  -0.42600852, -0.34520966, -1.3990868,  1.3421589,    -0.030409254, -1.0227692,
                           2.1155963,   0.59007627,  1.0285264,   1.2786754,   -1.025834,    -0.2582931,   0.08029249,
                           -1.4333152,  2.0505018,   -0.20171227, 0.84240675,  0.18178609,   2.3220532,    0.6567226,
                           0.36062193,  -0.65643805, 0.46591413,  0.78668725,  -0.25104183,  0.37047797,   -1.4150797,
                           0.7284156,   -1.1740261,  0.28743377,  0.41702843,  -0.61746573,  -1.6592771,   -0.25156495,
                           0.59583426,  0.21285525,  1.2943488,   0.58860314};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[] = {-0.0019492519, -0.013380216,   -0.0022271634,  0.3756873,    -0.005672095,  0.8861597,
                            1.6822838,     -0.010338755,   -0.02260527,    1.538079,     -0.0012086523, -0.0003282783,
                            0.7768401,     0.7718998,      1.13998,        0.13666973,   0.2814455,     -0.00089201186,
                            1.0878885,     -0.00054600224, 0.5722781,      0.63327277,   -0.004260085,  -0.0034520966,
                            -0.013990868,  1.3421589,      -0.00030409254, -0.010227692, 2.1155963,     0.59007627,
                            1.0285264,     1.2786754,      -0.010258339,   -0.002582931, 0.08029249,    -0.014333151,
                            2.0505018,     -0.0020171227,  0.84240675,     0.18178609,   2.3220532,     0.6567226,
                            0.36062193,    -0.0065643806,  0.46591413,     0.78668725,   -0.0025104182, 0.37047797,
                            -0.014150796,  0.7284156,      -0.011740261,   0.28743377,   0.41702843,    -0.006174657,
                            -0.01659277,   -0.0025156494,  0.59583426,     0.21285525,   1.2943488,     0.58860314};
  const float   alpha      = 0.01;
  using dragonite::norm;

  ONNC_RUNTIME_leakyrelu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                               alpha);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Asin, test_asin_example) {
  const float input_0[3] = {-0.5, 0.0, 0.5};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-0.5235987901687622, 0.0, 0.5235987901687622};
  ONNC_RUNTIME_asin_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Asin, test_asin) {
  const float input_0[3][4][5] = {
      {{0.6542705297470093, 0.2745460271835327, 0.9040100574493408,
        0.35028403997421265, 0.9641523361206055},
       {0.7241327166557312, 0.8015467524528503, 0.7049315571784973,
        0.2534421682357788, 0.8405327200889587},
       {0.29358363151550293, 0.28961825370788574, 0.3274218738079071,
        0.5565473437309265, 0.12366793304681778},
       {0.14368478953838348, 0.8644707202911377, 0.372406542301178,
        0.30743783712387085, 0.6544235944747925}},
      {{0.4175127148628235, 0.8243265151977539, 0.05054911598563194,
        0.4182060658931732, 0.3484054207801819},
       {0.14552615582942963, 0.41465499997138977, 0.6929351687431335,
        0.4576665163040161, 0.6844885349273682},
       {0.9657949209213257, 0.149240180850029, 0.8563569188117981,
        0.7457705736160278, 0.2500695288181305},
       {0.06873633712530136, 0.5217823386192322, 0.07335256785154343,
        0.6312813758850098, 0.34901973605155945}},
      {{0.8023028373718262, 0.11155273765325546, 0.6252284049987793,
        0.8898701667785645, 0.9201815724372864},
       {0.42802825570106506, 0.9240995645523071, 0.32693052291870117,
        0.22501806914806366, 0.9215649962425232},
       {0.7966009974479675, 0.3889002501964569, 0.34919896721839905,
        0.2299790382385254, 0.8218527436256409},
       {0.5929610729217529, 0.8136469125747681, 0.34091612696647644,
        0.30555260181427, 0.08220995962619781}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.7132176160812378, 0.2781175673007965, 1.1290583610534668,
        0.35787433385849, 1.3022301197052002},
       {0.8097760081291199, 0.9298775792121887, 0.7823266386985779,
        0.2562369406223297, 0.99826580286026},
       {0.29797351360321045, 0.29382798075675964, 0.33357375860214233,
        0.5902242660522461, 0.12398535013198853},
       {0.14418384432792664, 1.0440964698791504, 0.3816007375717163,
        0.3124992847442627, 0.713420033454895}},
      {{0.43070632219314575, 0.9690114855766296, 0.050570666790008545,
        0.43146950006484985, 0.3558694124221802},
       {0.1460447758436203, 0.4275636374950409, 0.7655521035194397,
        0.4753689467906952, 0.7539018988609314},
       {1.3084917068481445, 0.14979980885982513, 1.0281728506088257,
        0.8416907787322998, 0.25275206565856934},
       {0.06879057735204697, 0.5489389300346375, 0.0734185054898262,
        0.6832042932510376, 0.35652485489845276}},
      {{0.9311431646347046, 0.1117854043841362, 0.6754241585731506,
        1.0970604419708252, 1.168544054031372},
       {0.4423099458217621, 1.1786725521087646, 0.3330537974834442,
        0.22696158289909363, 1.1720925569534302},
       {0.9216514229774475, 0.3994375765323639, 0.356716126203537,
        0.2320561408996582, 0.9646555781364441},
       {0.6347311735153198, 0.9503979682922363, 0.347891241312027,
        0.310518741607666, 0.08230284601449966}}};
  ONNC_RUNTIME_asin_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

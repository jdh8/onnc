#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Ceil, test_ceil_example) {
  const float input_0[2] = {-1.5, 1.2000000476837158};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {2};
  float output_0[2];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {2};
  const float answer_0[2] = {-1.0, 2.0};
  ONNC_RUNTIME_ceil_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Ceil, test_ceil) {
  const float input_0[3][4][5] = {
      {{-0.2072252631187439, 0.9066483378410339, -1.6359477043151855,
        1.215287685394287, -1.6690623760223389},
       {0.14820560812950134, -0.3434264063835144, -1.3249785900115967,
        -1.2663109302520752, -1.463748812675476},
       {0.8510316014289856, 1.0285121202468872, 0.6126921772956848,
        1.3914875984191895, 0.26661503314971924},
       {0.4159094989299774, 0.38635799288749695, -2.40820574760437,
        -1.495727300643921, -0.7936913371086121}},
      {{-1.282163381576538, -1.644927740097046, -0.258547842502594,
        -0.7509697675704956, -1.114750623703003},
       {0.7325354218482971, 1.256851315498352, -0.6251552104949951,
        -1.6705902814865112, -1.0045946836471558},
       {-0.18197599053382874, -1.3303956985473633, 0.4992239773273468,
        1.0677257776260376, 1.2147650718688965},
       {-0.35233762860298157, 0.025038449093699455, -0.9224775433540344,
        -0.15912188589572906, 0.15449874103069305}},
      {{1.436684012413025, -1.0322052240371704, -1.3065528869628906,
        0.44582268595695496, -0.6428962349891663},
       {0.6343374848365784, -0.652723491191864, 1.3523261547088623,
        1.2178665399551392, 0.30324631929397583},
       {1.0407432317733765, -0.35118594765663147, 0.31215646862983704,
        0.24841848015785217, -0.5288784503936768},
       {0.18602806329727173, -0.6804976463317871, -2.676154613494873,
        1.9511404037475586, -0.8568466305732727}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{-0.0, 1.0, -1.0, 2.0, -1.0},
                                    {1.0, -0.0, -1.0, -1.0, -1.0},
                                    {1.0, 2.0, 1.0, 2.0, 1.0},
                                    {1.0, 1.0, -2.0, -1.0, -0.0}},
                                   {{-1.0, -1.0, -0.0, -0.0, -1.0},
                                    {1.0, 2.0, -0.0, -1.0, -1.0},
                                    {-0.0, -1.0, 1.0, 2.0, 2.0},
                                    {-0.0, 1.0, -0.0, -0.0, 1.0}},
                                   {{2.0, -1.0, -1.0, 1.0, -0.0},
                                    {1.0, -0.0, 2.0, 2.0, 1.0},
                                    {2.0, -0.0, 1.0, 1.0, -0.0},
                                    {1.0, -0.0, -2.0, 2.0, -0.0}}};
  ONNC_RUNTIME_ceil_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

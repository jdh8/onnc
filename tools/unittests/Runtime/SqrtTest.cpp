#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Sqrt, test_sqrt_example) {
  const float input_0[3] = {1.0, 4.0, 9.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {1.0, 2.0, 3.0};
  ONNC_RUNTIME_sqrt_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Sqrt, test_sqrt) {
  const float input_0[3][4][5] = {
      {{1.2005436420440674, 0.10210196673870087, 0.32545068860054016,
        0.39881354570388794, 0.4648788869380951},
       {0.28299134969711304, 0.03683841973543167, 2.648174285888672,
        0.2308555245399475, 0.4333800971508026},
       {1.2334963083267212, 1.8750531673431396, 0.4034293591976166,
        0.4264899492263794, 0.09680723398923874},
       {0.12749575078487396, 0.6038172245025635, 0.8290151953697205,
        0.6632903814315796, 0.2478720247745514}},
      {{1.500108242034912, 1.4939736127853394, 0.10925645381212234,
        2.972905158996582, 0.8491860628128052},
       {0.1316976398229599, 0.12094937264919281, 0.6763712167739868,
        1.767196774482727, 0.4176104962825775},
       {0.03905954957008362, 0.5401061773300171, 0.5365021228790283,
        0.8869816064834595, 0.01920974813401699},
       {0.15977375209331512, 0.7685887217521667, 0.4812254309654236,
        0.1664886623620987, 0.6730215549468994}},
      {{1.589692234992981, 0.3923867642879486, 0.5756011605262756,
        1.3736796379089355, 0.027123689651489258},
       {0.2222701758146286, 1.8101176023483276, 0.2115437090396881,
        0.9400328993797302, 0.0025866604410111904},
       {0.3708665370941162, 1.2010471820831299, 0.013414397835731506,
        2.836991310119629, 0.3076816201210022},
       {0.5548931360244751, 0.38883891701698303, 1.2615481615066528,
        0.34995561838150024, 0.5713077783584595}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.0956932306289673, 0.31953397393226624, 0.5704828500747681,
        0.6315168738365173, 0.681820273399353},
       {0.5319693088531494, 0.19193337857723236, 1.6273212432861328,
        0.4804742634296417, 0.6583161354064941},
       {1.1106288433074951, 1.3693257570266724, 0.6351608633995056,
        0.6530619859695435, 0.3111386001110077},
       {0.35706546902656555, 0.7770567536354065, 0.9105027318000793,
        0.8144264221191406, 0.4978674650192261}},
      {{1.224789023399353, 1.2222821712493896, 0.33053964376449585,
        1.7242114543914795, 0.9215129017829895},
       {0.3629016876220703, 0.34777775406837463, 0.8224179148674011,
        1.329359531402588, 0.6462278962135315},
       {0.19763489067554474, 0.7349191904067993, 0.7324630618095398,
        0.9417970180511475, 0.13859923183918},
       {0.3997170925140381, 0.8766919374465942, 0.6937041282653809,
        0.4080302119255066, 0.8203788995742798}},
      {{1.2608299255371094, 0.62640780210495, 0.7586838603019714,
        1.1720408201217651, 0.1646927148103714},
       {0.4714553952217102, 1.3454060554504395, 0.45993882417678833,
        0.9695529341697693, 0.05085922032594681},
       {0.6089881062507629, 1.0959229469299316, 0.11582054197788239,
        1.6843370199203491, 0.5546905398368835},
       {0.7449114918708801, 0.6235694885253906, 1.1231865882873535,
        0.5915704965591431, 0.7558490633964539}}};
  ONNC_RUNTIME_sqrt_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

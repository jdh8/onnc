#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Tan, test_tan_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-1.5574077367782593, 0.0, 1.5574077367782593};
  ONNC_RUNTIME_tan_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Tan, test_tan) {
  const float input_0[3][4][5] = {
      {{-1.0924248695373535, -1.6272485256195068, -0.853977620601654,
        1.7034199237823486, 0.5193924307823181},
       {1.2607985734939575, -0.3045312166213989, -1.0909829139709473,
        -0.465657502412796, 0.4395868182182312},
       {-0.03513681888580322, -0.9172640442848206, -2.4685521125793457,
        0.7520381212234497, 1.229709506034851},
       {0.13063755631446838, 1.2394856214523315, -1.8864048719406128,
        -0.5288773775100708, -1.3441157341003418}},
      {{0.8895977735519409, -1.5101613998413086, 1.728623628616333,
        2.1327788829803467, -0.3660587668418884},
       {-0.10242688655853271, 1.2184361219406128, 0.8037599325180054,
        0.42596858739852905, -0.8518640398979187},
       {-1.714095950126648, 0.6455354690551758, 0.00924886204302311,
        -0.08880335092544556, 0.2938357889652252},
       {0.17627893388271332, 0.6363362669944763, 0.9666638970375061,
        -0.4202708303928375, 0.9684939384460449}},
      {{2.193632125854492, -0.7528790831565857, 0.6352058053016663,
        0.7519432306289673, -1.353757381439209},
       {1.4068878889083862, -1.338039755821228, -0.4405408501625061,
        -1.0697168111801147, 0.4800960421562195},
       {-0.4244058430194855, 1.0622628927230835, 0.4702441692352295,
        0.09614035487174988, 1.0714590549468994},
       {0.1368115097284317, 0.9890881776809692, -1.5780179500579834,
        0.19833368062973022, 0.19914573431015015}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-1.9284815788269043, 17.695280075073242, -1.1475061178207397,
        -7.495876312255859, 0.5717553496360779},
       {3.121829032897949, -0.3143080472946167, -1.9216958284378052,
        -0.5025148987770081, 0.47027587890625},
       {-0.03515128418803215, -1.3058358430862427, 0.7972151637077332,
        0.9354106783866882, 2.8172175884246826},
       {0.13138583302497864, 2.9070611000061035, 3.0625739097595215,
        -0.5844100117683411, -4.3356733322143555}},
      {{1.2335846424102783, -16.471927642822266, -6.2833428382873535,
        -1.5880204439163208, -0.3833359181880951},
       {-0.1027865931391716, 2.7195677757263184, 1.037414789199829,
        0.4537506401538849, -1.1426212787628174},
       {6.930553436279297, 0.7531835436820984, 0.009249125607311726,
        -0.08903752267360687, 0.30259495973587036},
       {0.17812782526016235, 0.7388646006584167, 1.4488121271133423,
        -0.4468974173069, 1.4544986486434937}},
      {{-1.3923721313476562, -0.9369887113571167, 0.7371184229850769,
        0.9352327585220337, -4.53489351272583},
       {6.0462327003479, -4.218466758728027, -0.4714414179325104,
        -1.8258002996444702, 0.5207329392433167},
       {-0.4518674910068512, 1.7939316034317017, 0.5082731246948242,
        0.09643766283988953, 1.8333745002746582},
       {0.13767153024673462, 1.5206522941589355, 138.47061157226562,
        0.20097583532333374, 0.20182082056999207}}};
  ONNC_RUNTIME_tan_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                         (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Softmax, test_softmax_example) {
  const float input_0[1][3] = {{-1.0, 0.0, 1.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {1, 3};
  float output_0[1][3];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {1, 3};
  const float answer_0[1][3] = {
      {0.09003058075904846, 0.2447284758090973, 0.6652409434318542}};
  const int32_t axis = 0;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softmax, test_softmax_large_number) {
  const float input_0[2][4] = {{0.0, 1.0, 2.0, 3.0},
                               {10000.0, 10001.0, 10002.0, 10003.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {2, 4};
  float output_0[2][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {2, 4};
  const float answer_0[2][4] = {{0.032058604061603546, 0.08714432269334793,
                                 0.23688283562660217, 0.6439142823219299},
                                {0.032058604061603546, 0.08714432269334793,
                                 0.23688283562660217, 0.6439142823219299}};
  const int32_t axis = 0;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softmax, test_softmax_axis_0) {
  const float input_0[3][4][5] = {
      {{0.14082567393779755, 0.7574371099472046, 0.7033452391624451,
        0.5353687405586243, 2.133450984954834},
       {0.46556752920150757, 2.1072776317596436, 0.2246571183204651,
        1.7604362964630127, 0.13640281558036804},
       {0.9960928559303284, 1.8346766233444214, 0.646060049533844,
        0.932573676109314, 0.40238460898399353},
       {0.10766039788722992, 1.0556586980819702, 0.5492932200431824,
        0.5221566557884216, 1.7619578838348389}},
      {{0.43990808725357056, 0.9184034466743469, 1.2460486888885498,
        0.6783958077430725, 0.5146921873092651},
       {0.71897292137146, 0.7837111949920654, 2.1222901344299316,
        0.08530911058187485, 1.4160754680633545},
       {1.7819759845733643, 0.19242341816425323, 0.2086159884929657,
        1.393198013305664, 0.05081284046173096},
       {1.530107021331787, 0.7403677701950073, 0.3088703453540802,
        0.019744180142879486, 1.3442527055740356}},
      {{0.5713900923728943, 0.15413136780261993, 0.5105578303337097,
        0.735870897769928, 0.23949961364269257},
       {1.0414505004882812, 0.24340078234672546, 1.5761969089508057,
        0.5963816046714783, 0.27406686544418335},
       {0.37851038575172424, 0.39570215344429016, 1.014837384223938,
        1.1551929712295532, 0.08772008866071701},
       {0.0981692299246788, 1.7373241186141968, 0.5482525825500488,
        0.4239121377468109, 0.5943218469619751}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.007246106397360563, 0.013424423523247242, 0.012717562727630138,
        0.010751091875135899, 0.053148481994867325},
       {0.010026245377957821, 0.051775455474853516, 0.00787974614650011,
        0.036600977182388306, 0.007214128505438566},
       {0.0170428603887558, 0.039421651512384415, 0.012009507045149803,
        0.015993976965546608, 0.009412354789674282},
       {0.007009727880358696, 0.01808887906372547, 0.010901843197643757,
        0.010609982535243034, 0.036656707525253296}},
      {{0.009772248566150665, 0.015768935903906822, 0.021882502362132072,
        0.012404190376400948, 0.010531079024076462},
       {0.012917868793010712, 0.01378181204199791, 0.05255860090255737,
        0.0068547893315553665, 0.0259381290525198},
       {0.037397902458906174, 0.007629803381860256, 0.007754354737699032,
        0.025351466611027718, 0.006622356828302145},
       {0.029071129858493805, 0.013197222724556923, 0.008572067134082317,
        0.00641977321356535, 0.024140508845448494}},
      {{0.011145421303808689, 0.00734316511079669, 0.010487630032002926,
        0.013138008303940296, 0.007997573353350163},
       {0.017833683639764786, 0.00802883505821228, 0.0304423738270998,
        0.011427471414208412, 0.00827886164188385},
       {0.009190303273499012, 0.009349667467176914, 0.017365334555506706,
        0.01998199336230755, 0.006871337071061134},
       {0.006943513639271259, 0.035764746367931366, 0.010890503413975239,
        0.009617176838219166, 0.01140395738184452}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softmax, test_softmax_axis_1) {
  const float input_0[3][4][5] = {
      {{0.14082567393779755, 0.7574371099472046, 0.7033452391624451,
        0.5353687405586243, 2.133450984954834},
       {0.46556752920150757, 2.1072776317596436, 0.2246571183204651,
        1.7604362964630127, 0.13640281558036804},
       {0.9960928559303284, 1.8346766233444214, 0.646060049533844,
        0.932573676109314, 0.40238460898399353},
       {0.10766039788722992, 1.0556586980819702, 0.5492932200431824,
        0.5221566557884216, 1.7619578838348389}},
      {{0.43990808725357056, 0.9184034466743469, 1.2460486888885498,
        0.6783958077430725, 0.5146921873092651},
       {0.71897292137146, 0.7837111949920654, 2.1222901344299316,
        0.08530911058187485, 1.4160754680633545},
       {1.7819759845733643, 0.19242341816425323, 0.2086159884929657,
        1.393198013305664, 0.05081284046173096},
       {1.530107021331787, 0.7403677701950073, 0.3088703453540802,
        0.019744180142879486, 1.3442527055740356}},
      {{0.5713900923728943, 0.15413136780261993, 0.5105578303337097,
        0.735870897769928, 0.23949961364269257},
       {1.0414505004882812, 0.24340078234672546, 1.5761969089508057,
        0.5963816046714783, 0.27406686544418335},
       {0.37851038575172424, 0.39570215344429016, 1.014837384223938,
        1.1551929712295532, 0.08772008866071701},
       {0.0981692299246788, 1.7373241186141968, 0.5482525825500488,
        0.4239121377468109, 0.5943218469619751}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.01867881789803505, 0.03460511937737465, 0.032782990485429764,
        0.027713874354958534, 0.13700473308563232},
       {0.02584538608789444, 0.13346537947654724, 0.020312197506427765,
        0.09434901177883148, 0.018596386536955833},
       {0.04393262788653374, 0.10162007808685303, 0.03095778450369835,
        0.041228845715522766, 0.024262916296720505},
       {0.018069488927721977, 0.04662902653217316, 0.02810247801244259,
        0.027350127696990967, 0.09449268132448196}},
      {{0.028035517781972885, 0.04523936286568642, 0.06277851015329361,
        0.035586271435022354, 0.0302125196903944},
       {0.0370599590241909, 0.03953852131962776, 0.15078489482402802,
        0.01966564543545246, 0.07441367208957672},
       {0.10729051381349564, 0.02188907563686371, 0.022246399894356728,
        0.07273060083389282, 0.018998822197318077},
       {0.08340191096067429, 0.03786139190196991, 0.024592328816652298,
        0.018417630344629288, 0.069256491959095}},
      {{0.0422973558306694, 0.0278676338493824, 0.03980100899934769,
        0.04985932260751724, 0.030351141467690468},
       {0.06767961382865906, 0.030469780787825584, 0.11553014069795609,
        0.04336775094270706, 0.03141864016652107},
       {0.034877605736255646, 0.03548239544034004, 0.0659022107720375,
        0.0758325457572937, 0.026077022776007652},
       {0.02635093592107296, 0.13572879135608673, 0.04132993891835213,
        0.036497607827186584, 0.043278519064188004}}};
  const int32_t axis = 1;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softmax, test_softmax_default_axis) {
  const float input_0[3][4][5] = {
      {{0.14082567393779755, 0.7574371099472046, 0.7033452391624451,
        0.5353687405586243, 2.133450984954834},
       {0.46556752920150757, 2.1072776317596436, 0.2246571183204651,
        1.7604362964630127, 0.13640281558036804},
       {0.9960928559303284, 1.8346766233444214, 0.646060049533844,
        0.932573676109314, 0.40238460898399353},
       {0.10766039788722992, 1.0556586980819702, 0.5492932200431824,
        0.5221566557884216, 1.7619578838348389}},
      {{0.43990808725357056, 0.9184034466743469, 1.2460486888885498,
        0.6783958077430725, 0.5146921873092651},
       {0.71897292137146, 0.7837111949920654, 2.1222901344299316,
        0.08530911058187485, 1.4160754680633545},
       {1.7819759845733643, 0.19242341816425323, 0.2086159884929657,
        1.393198013305664, 0.05081284046173096},
       {1.530107021331787, 0.7403677701950073, 0.3088703453540802,
        0.019744180142879486, 1.3442527055740356}},
      {{0.5713900923728943, 0.15413136780261993, 0.5105578303337097,
        0.735870897769928, 0.23949961364269257},
       {1.0414505004882812, 0.24340078234672546, 1.5761969089508057,
        0.5963816046714783, 0.27406686544418335},
       {0.37851038575172424, 0.39570215344429016, 1.014837384223938,
        1.1551929712295532, 0.08772008866071701},
       {0.0981692299246788, 1.7373241186141968, 0.5482525825500488,
        0.4239121377468109, 0.5943218469619751}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.01867881789803505, 0.03460511937737465, 0.032782990485429764,
        0.027713874354958534, 0.13700473308563232},
       {0.02584538608789444, 0.13346537947654724, 0.020312197506427765,
        0.09434901177883148, 0.018596386536955833},
       {0.04393262788653374, 0.10162007808685303, 0.03095778450369835,
        0.041228845715522766, 0.024262916296720505},
       {0.018069488927721977, 0.04662902653217316, 0.02810247801244259,
        0.027350127696990967, 0.09449268132448196}},
      {{0.028035517781972885, 0.04523936286568642, 0.06277851015329361,
        0.035586271435022354, 0.0302125196903944},
       {0.0370599590241909, 0.03953852131962776, 0.15078489482402802,
        0.01966564543545246, 0.07441367208957672},
       {0.10729051381349564, 0.02188907563686371, 0.022246399894356728,
        0.07273060083389282, 0.018998822197318077},
       {0.08340191096067429, 0.03786139190196991, 0.024592328816652298,
        0.018417630344629288, 0.069256491959095}},
      {{0.0422973558306694, 0.0278676338493824, 0.03980100899934769,
        0.04985932260751724, 0.030351141467690468},
       {0.06767961382865906, 0.030469780787825584, 0.11553014069795609,
        0.04336775094270706, 0.03141864016652107},
       {0.034877605736255646, 0.03548239544034004, 0.0659022107720375,
        0.0758325457572937, 0.026077022776007652},
       {0.02635093592107296, 0.13572879135608673, 0.04132993891835213,
        0.036497607827186584, 0.043278519064188004}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Softmax, test_softmax_axis_2) {
  const float input_0[3][4][5] = {
      {{0.14082567393779755, 0.7574371099472046, 0.7033452391624451,
        0.5353687405586243, 2.133450984954834},
       {0.46556752920150757, 2.1072776317596436, 0.2246571183204651,
        1.7604362964630127, 0.13640281558036804},
       {0.9960928559303284, 1.8346766233444214, 0.646060049533844,
        0.932573676109314, 0.40238460898399353},
       {0.10766039788722992, 1.0556586980819702, 0.5492932200431824,
        0.5221566557884216, 1.7619578838348389}},
      {{0.43990808725357056, 0.9184034466743469, 1.2460486888885498,
        0.6783958077430725, 0.5146921873092651},
       {0.71897292137146, 0.7837111949920654, 2.1222901344299316,
        0.08530911058187485, 1.4160754680633545},
       {1.7819759845733643, 0.19242341816425323, 0.2086159884929657,
        1.393198013305664, 0.05081284046173096},
       {1.530107021331787, 0.7403677701950073, 0.3088703453540802,
        0.019744180142879486, 1.3442527055740356}},
      {{0.5713900923728943, 0.15413136780261993, 0.5105578303337097,
        0.735870897769928, 0.23949961364269257},
       {1.0414505004882812, 0.24340078234672546, 1.5761969089508057,
        0.5963816046714783, 0.27406686544418335},
       {0.37851038575172424, 0.39570215344429016, 1.014837384223938,
        1.1551929712295532, 0.08772008866071701},
       {0.0981692299246788, 1.7373241186141968, 0.5482525825500488,
        0.4239121377468109, 0.5943218469619751}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.07448124140501022, 0.1379868984222412, 0.13072122633457184,
        0.1105082705616951, 0.5463023781776428},
       {0.08833964914083481, 0.4561852812767029, 0.06942718476057053,
        0.3224853575229645, 0.0635625422000885},
       {0.18153810501098633, 0.41991376876831055, 0.12792354822158813,
        0.17036554217338562, 0.10025905072689056},
       {0.08418361097574234, 0.21723909676074982, 0.13092610239982605,
        0.12742099165916443, 0.4402301609516144}},
      {{0.1388913244009018, 0.22412124276161194, 0.31101229786872864,
        0.17629867792129517, 0.14967644214630127},
       {0.11528541147708893, 0.12299567461013794, 0.4690587818622589,
        0.06117551401257515, 0.23148462176322937},
       {0.441242516040802, 0.09002092480659485, 0.09149046242237091,
        0.29911157488822937, 0.07813448458909988},
       {0.3571361005306244, 0.16212664544582367, 0.10530704259872437,
        0.07886631041765213, 0.29656389355659485}},
      {{0.2224111109972, 0.14653566479682922, 0.20928464829921722,
        0.26217398047447205, 0.15959464013576508},
       {0.23461909592151642, 0.10562696307897568, 0.4004983901977539,
        0.1503392606973648, 0.10891630500555038},
       {0.146438866853714, 0.14897817373275757, 0.27670031785964966,
        0.31839433312416077, 0.10948830097913742},
       {0.09305176138877869, 0.4792923927307129, 0.14594638347625732,
        0.12888221442699432, 0.15282730758190155}}};
  const int32_t axis = 2;
  ONNC_RUNTIME_softmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

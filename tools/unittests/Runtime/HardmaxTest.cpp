#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Hardmax, test_hardmax_example) {
  const float input_0[4][4] = {{3.0, 0.0, 1.0, 2.0},
                               {2.0, 5.0, 1.0, 0.0},
                               {0.0, 1.0, 3.0, 2.0},
                               {0.0, 1.0, 2.0, 3.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {4, 4};
  float output_0[4][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {4, 4};
  const float answer_0[4][4] = {{1.0, 0.0, 0.0, 0.0},
                                {0.0, 1.0, 0.0, 0.0},
                                {0.0, 0.0, 1.0, 0.0},
                                {0.0, 0.0, 0.0, 1.0}};
  const int32_t axis = 0;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 4 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Hardmax, test_hardmax_one_hot) {
  const float input_0[1][4] = {{3.0, 3.0, 3.0, 1.0}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {1, 4};
  float output_0[1][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {1, 4};
  const float answer_0[1][4] = {{1.0, 0.0, 0.0, 0.0}};
  const int32_t axis = 0;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Hardmax, test_hardmax_axis_0) {
  const float input_0[3][4][5] = {
      {{0.7423772811889648, 0.592897355556488, -0.8574001789093018,
        0.48279470205307007, -0.49858716130256653},
       {1.6298222541809082, 0.3848066031932831, -0.6384415626525879,
        -0.8121486902236938, -0.715636134147644},
       {-0.4603688418865204, -1.4850618839263916, 2.0632314682006836,
        0.5640093684196472, 0.5432642698287964},
       {0.7319644689559937, 0.10738716274499893, -1.448535442352295,
        -1.3654522895812988, 0.2684071958065033}},
      {{-0.632798969745636, 0.809583842754364, -0.3608238399028778,
        0.16610795259475708, 1.2970436811447144},
       {-0.5121586918830872, 0.4513472020626068, -0.4534256160259247,
        1.2851636409759521, 0.6439841389656067},
       {-0.41712886095046997, -0.9651564359664917, 1.1003422737121582,
        0.5411805510520935, -0.10487791150808334},
       {-0.20343798398971558, -1.0685337781906128, -2.077627420425415,
        -1.3380757570266724, 1.358952522277832}},
      {{-0.9239110946655273, 1.4776030778884888, -0.5980604887008667,
        0.7867703437805176, 0.39080044627189636},
       {1.0022131204605103, 0.38646700978279114, 1.1927785873413086,
        -0.36102354526519775, 1.9668874740600586},
       {0.37888669967651367, -0.7000395059585571, -0.09540504217147827,
        0.4016474187374115, -0.35691261291503906},
       {0.9435288310050964, -0.03502613678574562, 0.035488054156303406,
        -1.4014570713043213, -1.254594326019287}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 1.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Hardmax, test_hardmax_axis_1) {
  const float input_0[3][4][5] = {
      {{0.7423772811889648, 0.592897355556488, -0.8574001789093018,
        0.48279470205307007, -0.49858716130256653},
       {1.6298222541809082, 0.3848066031932831, -0.6384415626525879,
        -0.8121486902236938, -0.715636134147644},
       {-0.4603688418865204, -1.4850618839263916, 2.0632314682006836,
        0.5640093684196472, 0.5432642698287964},
       {0.7319644689559937, 0.10738716274499893, -1.448535442352295,
        -1.3654522895812988, 0.2684071958065033}},
      {{-0.632798969745636, 0.809583842754364, -0.3608238399028778,
        0.16610795259475708, 1.2970436811447144},
       {-0.5121586918830872, 0.4513472020626068, -0.4534256160259247,
        1.2851636409759521, 0.6439841389656067},
       {-0.41712886095046997, -0.9651564359664917, 1.1003422737121582,
        0.5411805510520935, -0.10487791150808334},
       {-0.20343798398971558, -1.0685337781906128, -2.077627420425415,
        -1.3380757570266724, 1.358952522277832}},
      {{-0.9239110946655273, 1.4776030778884888, -0.5980604887008667,
        0.7867703437805176, 0.39080044627189636},
       {1.0022131204605103, 0.38646700978279114, 1.1927785873413086,
        -0.36102354526519775, 1.9668874740600586},
       {0.37888669967651367, -0.7000395059585571, -0.09540504217147827,
        0.4016474187374115, -0.35691261291503906},
       {0.9435288310050964, -0.03502613678574562, 0.035488054156303406,
        -1.4014570713043213, -1.254594326019287}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 1.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}}};
  const int32_t axis = 1;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Hardmax, test_hardmax_default_axis) {
  const float input_0[3][4][5] = {
      {{0.7423772811889648, 0.592897355556488, -0.8574001789093018,
        0.48279470205307007, -0.49858716130256653},
       {1.6298222541809082, 0.3848066031932831, -0.6384415626525879,
        -0.8121486902236938, -0.715636134147644},
       {-0.4603688418865204, -1.4850618839263916, 2.0632314682006836,
        0.5640093684196472, 0.5432642698287964},
       {0.7319644689559937, 0.10738716274499893, -1.448535442352295,
        -1.3654522895812988, 0.2684071958065033}},
      {{-0.632798969745636, 0.809583842754364, -0.3608238399028778,
        0.16610795259475708, 1.2970436811447144},
       {-0.5121586918830872, 0.4513472020626068, -0.4534256160259247,
        1.2851636409759521, 0.6439841389656067},
       {-0.41712886095046997, -0.9651564359664917, 1.1003422737121582,
        0.5411805510520935, -0.10487791150808334},
       {-0.20343798398971558, -1.0685337781906128, -2.077627420425415,
        -1.3380757570266724, 1.358952522277832}},
      {{-0.9239110946655273, 1.4776030778884888, -0.5980604887008667,
        0.7867703437805176, 0.39080044627189636},
       {1.0022131204605103, 0.38646700978279114, 1.1927785873413086,
        -0.36102354526519775, 1.9668874740600586},
       {0.37888669967651367, -0.7000395059585571, -0.09540504217147827,
        0.4016474187374115, -0.35691261291503906},
       {0.9435288310050964, -0.03502613678574562, 0.035488054156303406,
        -1.4014570713043213, -1.254594326019287}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 1.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}}};
  const int32_t axis = 0;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Hardmax, test_hardmax_axis_2) {
  const float input_0[3][4][5] = {
      {{0.7423772811889648, 0.592897355556488, -0.8574001789093018,
        0.48279470205307007, -0.49858716130256653},
       {1.6298222541809082, 0.3848066031932831, -0.6384415626525879,
        -0.8121486902236938, -0.715636134147644},
       {-0.4603688418865204, -1.4850618839263916, 2.0632314682006836,
        0.5640093684196472, 0.5432642698287964},
       {0.7319644689559937, 0.10738716274499893, -1.448535442352295,
        -1.3654522895812988, 0.2684071958065033}},
      {{-0.632798969745636, 0.809583842754364, -0.3608238399028778,
        0.16610795259475708, 1.2970436811447144},
       {-0.5121586918830872, 0.4513472020626068, -0.4534256160259247,
        1.2851636409759521, 0.6439841389656067},
       {-0.41712886095046997, -0.9651564359664917, 1.1003422737121582,
        0.5411805510520935, -0.10487791150808334},
       {-0.20343798398971558, -1.0685337781906128, -2.077627420425415,
        -1.3380757570266724, 1.358952522277832}},
      {{-0.9239110946655273, 1.4776030778884888, -0.5980604887008667,
        0.7867703437805176, 0.39080044627189636},
       {1.0022131204605103, 0.38646700978279114, 1.1927785873413086,
        -0.36102354526519775, 1.9668874740600586},
       {0.37888669967651367, -0.7000395059585571, -0.09540504217147827,
        0.4016474187374115, -0.35691261291503906},
       {0.9435288310050964, -0.03502613678574562, 0.035488054156303406,
        -1.4014570713043213, -1.254594326019287}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{1.0, 0.0, 0.0, 0.0, 0.0},
                                    {1.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 1.0, 0.0, 0.0},
                                    {1.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 1.0},
                                    {0.0, 0.0, 0.0, 1.0, 0.0},
                                    {0.0, 0.0, 1.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0}},
                                   {{0.0, 1.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 1.0},
                                    {0.0, 0.0, 0.0, 1.0, 0.0},
                                    {1.0, 0.0, 0.0, 0.0, 0.0}}};
  const int32_t axis = 2;
  ONNC_RUNTIME_hardmax_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                             (float *)output_0, output_0_ndim, output_0_dims,
                             axis);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

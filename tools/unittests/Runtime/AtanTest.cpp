#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Atan, test_atan_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-0.7853981852531433, 0.0, 0.7853981852531433};
  ONNC_RUNTIME_atan_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Atan, test_atan) {
  const float input_0[3][4][5] = {
      {{-0.8231780529022217, 1.4624371528625488, -0.2837429344654083,
        0.035967931151390076, 0.37866297364234924},
       {1.0863935947418213, 0.595225989818573, -0.16772787272930145,
        0.7405714988708496, -0.34067854285240173},
       {-0.5770103931427002, -0.4353415369987488, 0.22679074108600616,
        1.3218319416046143, -1.3712270259857178},
       {-0.9240515828132629, 0.14842583239078522, -0.3753589987754822,
        -1.4927119016647339, -1.1756031513214111}},
      {{1.8280150890350342, 0.6291144490242004, -1.0607534646987915,
        -1.467891812324524, -0.40893498063087463},
       {2.3620150089263916, 0.12413318455219269, -0.7630447149276733,
        0.30413076281547546, -0.173002228140831},
       {0.7294895648956299, -0.8410961627960205, 0.6681745648384094,
        1.0251684188842773, -0.6033934354782104},
       {-0.371105819940567, -0.28299736976623535, -1.3557156324386597,
        1.659517765045166, -0.17289359867572784}},
      {{-0.3508839011192322, -0.13062331080436707, 0.741509735584259,
        -0.29117637872695923, 0.7413054704666138},
       {-0.05999657139182091, -0.5140498280525208, -0.22886624932289124,
        0.7869125008583069, 0.20266249775886536},
       {0.5419266819953918, -0.49656108021736145, -1.508540391921997,
        -0.6910501718521118, -0.5253250598907471},
       {0.5801911354064941, -0.30997270345687866, -1.3497034311294556,
        -0.4462916851043701, -1.126489520072937}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{-0.6887149810791016, 0.9710325598716736, -0.2764761447906494,
        0.035952433943748474, 0.3619781732559204},
       {0.8267826437950134, 0.5369018316268921, -0.1661810278892517,
        0.637439489364624, -0.3283466100692749},
       {-0.5233438014984131, -0.4105973243713379, 0.22301824390888214,
        0.9231317639350891, -0.9406924247741699},
       {-0.7459454536437988, 0.14735005795955658, -0.3590853810310364,
        -0.9805436730384827, -0.8659382462501526}},
      {{1.0702273845672607, 0.5615525245666504, -0.8148708343505859,
        -0.9727659821510315, -0.38818514347076416},
       {1.17030930519104, 0.12350142747163773, -0.6517975926399231,
        0.29524216055870056, -0.17130661010742188},
       {0.6302446722984314, -0.6993021368980408, 0.5890458226203918,
        0.7978253364562988, -0.5429109334945679},
       {-0.3553522229194641, -0.27578598260879517, -0.9352670311927795,
        1.0284785032272339, -0.17120112478733063}},
      {{-0.33746203780174255, -0.1298879086971283, 0.6380451321601868,
        -0.2833422124385834, 0.6379133462905884},
       {-0.059924740344285965, -0.4748241901397705, -0.2249913364648819,
        0.6667096614837646, 0.1999543309211731},
       {0.4966237545013428, -0.4608926773071289, -0.9854112267494202,
        -0.6046940684318542, -0.48370179533958435},
       {0.5257267951965332, -0.300580769777298, -0.9331424236297607,
        -0.41976580023765564, -0.844810962677002}}};
  ONNC_RUNTIME_atan_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_InstanceNormalization, test_instancenorm_example) {
  const float input_0[1][2][1][3] = {{{{-1.0, 0.0, 1.0}}, {{2.0, 3.0, 4.0}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 2, 1, 3};
  const float input_1[2] = {1.0, 1.5};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {2};
  const float input_2[2] = {0.0, 1.0};
  const int32_t input_2_ndim = 1;
  const int32_t input_2_dims[] = {2};
  float output_0[1][2][1][3];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 2, 1, 3};
  const float answer_0[1][2][1][3] = {
      {{{-1.2247356176376343, 0.0, 1.2247356176376343}},
       {{-0.8371034860610962, 1.0, 2.8371033668518066}}}};
  const float epsilon = 0;
  ONNC_RUNTIME_instancenormalization_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)output_0, output_0_ndim, output_0_dims, epsilon);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 2 * 1 * 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_InstanceNormalization, test_instancenorm_epsilon) {
  const float input_0[2][3][4][5] = {
      {{{0.2532804608345032, 0.681292712688446, 1.9441924095153809,
         0.2802080810070038, -2.2756764888763428},
        {1.6577879190444946, 1.8233327865600586, 0.9165085554122925,
         -1.3432008028030396, -0.7319557070732117},
        {-1.5150624513626099, -0.4460670053958893, -0.5814333558082581,
         1.2559289932250977, 0.14517346024513245},
        {-0.3578157126903534, -0.7710205316543579, 0.052552636712789536,
         0.7423203587532043, -0.6121683120727539}},
       {{0.4111543297767639, 0.349086731672287, -0.4201158285140991,
         -0.2458701729774475, 0.6981398463249207},
        {-1.7420910596847534, 1.374315619468689, 1.8532218933105469,
         1.2995151281356812, 0.343701034784317},
        {-0.8980578780174255, 0.8907264471054077, 0.750393271446228,
         1.2512365579605103, -1.0566891431808472},
        {0.6559866666793823, 0.13291995227336884, -0.7491502165794373,
         0.8174877762794495, -0.6033414006233215}},
       {{-0.6974349617958069, 1.1834999322891235, -1.5256730318069458,
         0.402493417263031, 1.4733951091766357},
        {1.1759856939315796, -1.0470126867294312, -1.3690482378005981,
         -0.020475095137953758, -1.4213839769363403},
        {0.0002451007312629372, -0.4929791986942291, 0.7304601669311523,
         1.061787486076355, -0.2709382474422455},
        {0.7430247068405151, 1.2934889793395996, -0.8784657120704651,
         0.06038111448287964, 0.23093381524085999}}},
      {{{1.253317952156067, -0.7917498350143433, -1.168876051902771,
         1.9137088060379028, -0.13529986143112183},
        {-1.2859958410263062, -0.4359806478023529, 0.3307507038116455,
         0.05072982609272003, 1.854931354522705},
        {1.6524916887283325, -0.6545224785804749, -1.906546950340271,
         -0.451771080493927, 0.1928497552871704},
        {-1.2648471593856812, -0.5461729764938354, -1.1410008668899536,
         -0.11734501272439957, -0.47915542125701904}},
       {{-0.9403851628303528, -0.9307482838630676, 2.535912275314331,
         -0.9513216018676758, 1.51848566532135},
        {-0.5217695832252502, -0.7114645838737488, 0.025312390178442,
         1.9138981103897095, -1.5842936038970947},
        {-0.7438058257102966, -0.7817901372909546, 0.46524572372436523,
         0.8573288321495056, 2.0554654598236084},
        {0.29646265506744385, 0.16863730549812317, 0.12572631239891052,
         0.22588315606117249, 1.6924904584884644}},
       {{0.5293259024620056, -0.6738901138305664, -0.30453160405158997,
         -0.31835660338401794, 0.5252734422683716},
        {0.16362161934375763, 0.14279302954673767, 0.7486564517021179,
         0.997988224029541, 0.3962952494621277},
        {-0.010360055603086948, -1.3852593898773193, -0.6693349480628967,
         -1.2430179119110107, -0.5947704315185547},
        {-1.489302158355713, 0.10938213020563126, 0.45421573519706726,
         0.01174040138721466, 1.118985891342163}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  const float input_1[3] = {-1.5749189853668213, 0.4899972081184387,
                            1.2027093172073364};
  const int32_t input_1_ndim = 1;
  const int32_t input_1_dims[] = {3};
  const float input_2[3] = {-0.13597486913204193, -0.00039782776730135083,
                            1.0598262548446655};
  const int32_t input_2_ndim = 1;
  const int32_t input_2_dims[] = {3};
  float output_0[2][3][4][5];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {2, 3, 4, 5};
  const float answer_0[2][3][4][5] = {
      {{{-0.4137936234474182, -1.0162605047225952, -2.7939088344573975,
         -0.4516967535018921, 3.1459476947784424},
        {-2.390768051147461, -2.6237876415252686, -1.347348690032959,
         1.8334017992019653, 0.9730175733566284},
        {2.075312852859497, 0.5706027746200562, 0.7611435055732727,
         -1.825114369392395, -0.2616230249404907},
        {0.4463808536529541, 1.0280050039291382, -0.13125061988830566,
         -1.1021625995635986, 0.8044057488441467}},
       {{0.08235804736614227, 0.0493316650390625, -0.3599638044834137,
         -0.2672470211982727, 0.2350640743970871},
        {-1.0633915662765503, 0.5948596596717834, 0.8496873378753662,
         0.5550580024719238, 0.0464659184217453},
        {-0.6142784357070923, 0.3375400900840759, 0.26286831498146057,
         0.5293688178062439, -0.6986866593360901},
        {0.21263420581817627, -0.06569145619869232, -0.5350440740585327,
         0.29856956005096436, -0.4574587345123291}},
       {{0.13896191120147705, 2.5147767066955566, -0.9071880578994751,
         1.5282849073410034, 2.88094425201416},
        {2.5052852630615234, -0.3025907278060913, -0.7093547582626343,
         0.994032084941864, -0.7754602432250977},
        {1.0202038288116455, 0.39721065759658813, 1.9425407648086548,
         2.361041307449341, 0.6776713132858276},
        {1.9584109783172607, 2.6537041664123535, -0.0896986722946167,
         1.0961618423461914, 1.3115874528884888}}},
      {{{-2.2141971588134766, 0.8003995418548584, 1.3563143014907837,
         -3.1876673698425293, -0.1672612875699997},
        {1.5289584398269653, 0.27596670389175415, -0.8542578220367432,
         -0.4414842128753662, -3.1010243892669678},
        {-2.802611827850342, 0.5981152057647705, 2.4437015056610107,
         0.29924309253692627, -0.6509805917739868},
        {1.4977836608886719, 0.43839919567108154, 1.315224051475525,
         -0.19372820854187012, 0.33960986137390137}},
       {{-0.4980568587779999, -0.49397924542427063, 0.9728548526763916,
         -0.5026842951774597, 0.5423552989959717},
        {-0.32092973589897156, -0.40119460225105286, -0.08944513648748398,
         0.709664523601532, -0.7705112099647522},
        {-0.4148790240287781, -0.43095114827156067, 0.09670206904411316,
         0.2626025974750519, 0.7695653438568115},
        {0.02528557740151882, -0.02880064584314823, -0.04695740342140198,
         -0.004578441381454468, 0.6159812211990356}},
       {{2.0387420654296875, 0.08818984031677246, 0.6869626045227051,
         0.6645506620407104, 2.032172441482544},
        {1.4458930492401123, 1.4121274948120117, 2.3943021297454834,
         2.7984976768493652, 1.8230838775634766},
        {1.163848638534546, -1.0650218725204468, 0.09557431936264038,
         -0.8344321250915527, 0.2164520025253296},
        {-1.2336872816085815, 1.3579646348953247, 1.9169796705245972,
         1.1996760368347168, 2.9946489334106445}}}};
  const float epsilon = 0.009999999776482582;
  ONNC_RUNTIME_instancenormalization_float(
      NULL, (float *)input_0, input_0_ndim, input_0_dims, (float *)input_1,
      input_1_ndim, input_1_dims, (float *)input_2, input_2_ndim, input_2_dims,
      (float *)output_0, output_0_ndim, output_0_dims, epsilon);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

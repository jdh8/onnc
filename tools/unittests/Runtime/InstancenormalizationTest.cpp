#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_InstanceNormalization, test_instancenorm_example)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0, 2.0, 3.0, 4.0};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {1, 2, 1, 3};
  const float   input_1[]      = {1.0, 1.5};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {2};
  const float   input_2[]      = {0.0, 1.0};
  const int32_t input_2_ndim   = 1;
  const int32_t input_2_dims[] = {2};
  float         output_0[6];
  const int32_t output_0_ndim   = 4;
  const int32_t output_0_dims[] = {1, 2, 1, 3};
  const float   answer_0[]      = {-1.2247356, 0.0, 1.2247356, -0.8371035, 1.0, 2.8371034};
  const float   epsilon         = 1e-05;
  using dragonite::norm;

  ONNC_RUNTIME_instancenormalization_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim,
                                           input_1_dims, input_2, input_2_ndim, input_2_dims, output_0, output_0_ndim,
                                           output_0_dims, epsilon);
  ASSERT_TRUE(norm(answer_0, output_0, 6) <= 1e-5 * norm(answer_0, 6));
}

SKYPAT_F(Operator_InstanceNormalization, test_instancenorm_epsilon)
{
  const float input_0[] = {
    -0.2740288,  0.31604332,   0.6740089,   -1.450687,   1.9585452,     -0.0054943175, -0.9505607, -0.212695,
    -0.03397568, 1.0140239,    0.6132752,   0.050139345, -0.6192017,    -0.77331704,   -0.5260088, -0.8813978,
    -0.26287916, -0.22690761,  0.1790224,   -0.11971505, 1.0104574,     -1.8941576,    -0.3681785, 0.11618623,
    -0.57098097, -0.9266218,   0.8638966,   0.005824901, -0.5481935,    -0.91389614,   0.1575319,  -0.099183254,
    0.2775457,   0.19937713,   -0.672336,   1.5708061,   -1.540396,     -1.1312238,    0.63660085, -0.5504439,
    0.638633,    -0.30292788,  1.1847466,   0.6719285,   -1.3691347,    0.33251637,    -1.0680201, 0.0029139793,
    -0.7838756,  -0.061245114, -1.1212155,  -1.0951871,  0.02286023,    -0.39492482,   0.6598521,  -1.3347884,
    0.42133692,  0.39014208,   -0.79426503, 0.77440625,  -0.7030259,    0.35080436,    -2.5436509, -2.215737,
    1.0222132,   -0.451021,    0.80719054,  2.4939508,   -0.0023343374, -1.3687083,    0.7443614,  0.8252976,
    0.49899185,  1.4596478,    0.067599386, 1.1455834,   1.19231,       0.08571405,    0.2400198,  0.393373,
    0.09189976,  -0.45728192,  0.84789383,  1.6279998,   -0.62988347,   0.6974049,     -1.5538312, -2.916474,
    0.40338194,  -0.6264343,   -1.1263347,  0.5233166,   -0.5521979,    -0.49018967,   -0.7888989, 1.1615719,
    1.0628958,   1.7142804,    -0.44845462, 0.77731097,  0.55230874,    -0.4113579,    -1.4322526, 0.10813352,
    -1.2011735,  1.8296385,    0.7334181,   -0.79852647, 0.5621647,     0.60343486,    -1.4699157, -0.038207896,
    -0.8960916,  0.6945449,    0.521847,    0.92921853,  -0.0009490597, 0.34792805,    0.95244616, 0.020865887};
  const int32_t input_0_ndim   = 4;
  const int32_t input_0_dims[] = {2, 3, 4, 5};
  const float   input_1[]      = {1.1375215, -2.1671185, -0.54757476};
  const int32_t input_1_ndim   = 1;
  const int32_t input_1_dims[] = {3};
  const float   input_2[]      = {-1.0526093, -1.5526317, 0.98998255};
  const int32_t input_2_ndim   = 1;
  const int32_t input_2_dims[] = {3};
  float         output_0[120];
  const int32_t output_0_ndim   = 4;
  const int32_t output_0_dims[] = {2, 3, 4, 5};
  const float   answer_0[]      = {
    -1.3525816,  -0.45607215,  0.087792754,   -3.140304,   2.0394168,    -0.94459134, -2.3804512,  -1.2593958,
    -0.98786366, 0.6043849,    -0.0044813156, -0.8600659,  -1.8770103,   -2.1111612,  -1.7354202,  -2.2753706,
    -1.3356417,  -1.2809894,   -0.664251,     -1.1181294,  -4.6816487,   2.7114964,   -1.1725934,  -2.4054518,
    -0.65639824, 0.24881792,   -4.308606,     -2.124548,   -0.71439934,  0.2164272,   -2.5106893,  -1.8572695,
    -2.8161614,  -2.6171982,   -0.3984183,    -6.10791,    1.8110634,    0.76959336,  -3.7300682,  -0.70867145,
    0.42842162,  1.0893965,    0.045050323,   0.4050482,   1.8378727,    0.6433152,   1.6264905,   0.8746958,
    1.4270213,   0.91973543,   1.6638336,     1.6455617,   0.8606936,    1.1539782,   0.41352588,  1.8137616,
    0.58096325,  0.602862,     1.4343147,     0.33310896,  -1.9236503,   -0.9095373,  -3.6949048,  -3.3793497,
    -0.2634328,  -1.681143,    -0.47035158,   1.1528374,   -1.2493668,   -2.5642443,  -0.5308128,  -0.452927,
    -0.76693475, 0.15751553,   -1.1820687,    -0.14471227, -0.099746644, -1.1646367,  -1.0161465,  -0.86857295,
    -1.7965939,  -0.73327243,  -3.260344,     -4.7707796,  -0.39908266,  -2.9689686,  1.3898584,   4.0281973,
    -2.3996835,  -0.40576077,  0.5621427,     -2.6319003,  -0.54949677,  -0.66955674, -0.09119809, -3.8676853,
    -3.6766295,  -4.937835,    -0.7503638,    -3.123682,   0.6902444,    1.302294,    1.9506907,   0.97235155,
    1.8039263,   -0.121020734, 0.5752171,     1.5481948,   0.68398464,   0.6577729,   1.9746115,   1.0652968,
    1.610161,    0.5999065,    0.7095914,     0.45085925,  1.0416328,    0.82005185,  0.43610674,  1.0277776};
  const float epsilon = 0.009999999776482582;
  using dragonite::norm;

  ONNC_RUNTIME_instancenormalization_float(nullptr, input_0, input_0_ndim, input_0_dims, input_1, input_1_ndim,
                                           input_1_dims, input_2, input_2_ndim, input_2_dims, output_0, output_0_ndim,
                                           output_0_dims, epsilon);
  ASSERT_TRUE(norm(answer_0, output_0, 120) <= 1e-5 * norm(answer_0, 120));
}

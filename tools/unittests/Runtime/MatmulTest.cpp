#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_MatMul, test_matmul_2d) {
  const float input_0[3][4] = {{-0.12207750231027603, 0.6374276280403137,
                                -1.747268557548523, -1.6711692810058594},
                               {1.5671796798706055, 1.17271888256073,
                                1.2427719831466675, -0.49994856119155884},
                               {0.09534593671560287, 0.33565354347229004,
                                0.9531746506690979, 0.8944324254989624}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {3, 4};
  const float input_1[4][3] = {
      {-0.06480008363723755, 0.3806743919849396, 0.668016791343689},
      {0.24831536412239075, 1.1704661846160889, 1.7343106269836426},
      {-0.040383629500865936, -1.9087343215942383, 0.18766766786575317},
      {1.0046464204788208, 0.2904175817966461, -0.43667328357696533}};
  const int32_t input_1_ndim = 2;
  const int32_t input_1_dims[] = {4, 3};
  float output_0[3][3];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {3, 3};
  const float answer_0[3][3] = {
      {-1.4421794414520264, 3.5493500232696533, 1.4257968664169312},
      {-0.3628084361553192, -0.5481023788452148, 3.53230357170105},
      {0.9372652173042297, -1.1304312944412231, 0.43412548303604126}};
  ONNC_RUNTIME_matmul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                            (float *)input_1, input_1_ndim, input_1_dims,
                            (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_MatMul, test_matmul_3d) {
  const float input_0[2][3][4] = {{{0.4396408498287201, -1.3528037071228027,
                                    -0.5250844955444336, -2.0281639099121094},
                                   {1.542436957359314, -1.2138785123825073,
                                    1.352719783782959, 1.1509099006652832},
                                   {-0.22446610033512115, 0.011325011029839516,
                                    0.4069061279296875, 0.32498303055763245}},
                                  {{0.3067118227481842, -2.8423054218292236,
                                    0.09411441534757614, 1.5617825984954834},
                                   {1.3202166557312012, -0.21915729343891144,
                                    -0.5241264700889587, 1.7447006702423096},
                                   {-0.7575016617774963, 0.7233405709266663,
                                    -0.6366877555847168, 0.5918365120887756}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {2, 3, 4};
  const float input_1[2][4][3] = {
      {{0.6664442420005798, 1.0633331537246704, -1.5688464641571045},
       {-1.3071247339248657, 0.005013466812670231, 0.35349705815315247},
       {-0.531970202922821, 0.01641981117427349, 0.7884014248847961},
       {1.256084680557251, 0.9909390211105347, 1.849019169807434}},
      {{-0.12986962497234344, -0.7424910664558411, -0.33171722292900085},
       {-1.538204550743103, 0.9274179339408875, 0.4271276891231537},
       {0.2636823356151581, -0.12936198711395264, 1.8881285190582275},
       {-0.9464747309684753, 1.0659704208374023, 0.8097601532936096}}};
  const int32_t input_1_ndim = 3;
  const int32_t input_1_dims[] = {2, 4, 3};
  float output_0[2][3][3];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {2, 3, 3};
  const float answer_0[2][3][3] = {
      {{-0.2069370150566101, -1.5577061176300049, -5.332032203674316},
       {3.340672492980957, 2.796731472015381, 0.3455915153026581},
       {0.02734692022204399, 0.09009422361850739, 1.277861475944519}},
      {{2.878843069076538, -1.2110967636108398, 0.12660051882266998},
       {-1.6238652467727661, 0.7441019415855408, -0.10837581008672714},
       {-1.742310881614685, 1.9465206861495972, -0.16266755759716034}}};
  ONNC_RUNTIME_matmul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                            (float *)input_1, input_1_ndim, input_1_dims,
                            (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 2 * 3 * 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_MatMul, test_matmul_4d) {
  const float input_0[1][2][3][4] = {
      {{{0.865576446056366, -0.6781303286552429, 0.6432087421417236,
         -1.0827007293701172},
        {-0.31123313307762146, 0.9641521573066711, -0.6063910126686096,
         1.1797709465026855},
        {-1.6103614568710327, -1.0718021392822266, -0.610499918460846,
         0.1939004808664322}},
       {{0.7508658766746521, 0.885883092880249, 0.2587398886680603,
         1.7453709840774536},
        {-1.1763757467269897, -0.15367655456066132, 0.12273981422185898,
         -1.1854623556137085},
        {-0.084648996591568, -0.4003889858722687, -0.23137874901294708,
         -0.38246795535087585}}}};
  const int32_t input_0_ndim = 4;
  const int32_t input_0_dims[] = {1, 2, 3, 4};
  const float input_1[1][2][4][3] = {
      {{{-0.04470060020685196, -2.62559175491333, -0.9956474900245667},
        {0.01367542427033186, 1.4275343418121338, 0.5047703981399536},
        {-0.2315009981393814, -0.6673247814178467, -1.7176295518875122},
        {-0.41871607303619385, -0.36690041422843933, -1.9822454452514648}},
       {{-0.21687623858451843, -1.5839518308639526, 0.7790289521217346},
        {-0.5634182691574097, -0.06614011526107788, 0.17533357441425323},
        {-0.8175089955329895, 1.8814834356307983, -0.7204033732414246},
        {1.420092225074768, 0.9352213144302368, -0.8642460107803345}}}};
  const int32_t input_1_ndim = 4;
  const int32_t input_1_dims[] = {1, 2, 4, 3};
  float output_0[1][2][3][3];
  const int32_t output_0_ndim = 4;
  const int32_t output_0_dims[] = {1, 2, 3, 3};
  const float answer_0[1][2][3][3] = {
      {{{0.2564752399921417, -3.272690534591675, -0.16272486746311188},
        {-0.3265114426612854, 2.165332794189453, -0.500486433506012},
        {0.11746887862682343, 3.034377098083496, 1.7265926599502563}},
       {{1.6050978899002075, 0.8711951375007629, -0.9545556306838989},
        {-1.4420946836471558, 0.995749831199646, -0.007266416680067778},
        {-0.11004073917865753, -0.6324657797813416, 0.36108678579330444}}}};
  ONNC_RUNTIME_matmul_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                            (float *)input_1, input_1_ndim, input_1_dims,
                            (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 1 * 2 * 3 * 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_ThresholdedRelu, test_thresholdedrelu_example) {
  const float input_0[5] = {-1.5, 0.0, 1.2000000476837158, 2.0,
                            2.200000047683716};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {5};
  float output_0[5];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {5};
  const float answer_0[5] = {0.0, 0.0, 0.0, 0.0, 2.200000047683716};
  const float alpha = 2.0;
  ONNC_RUNTIME_thresholdedrelu_float(NULL, (float *)input_0, input_0_ndim,
                                     input_0_dims, (float *)output_0,
                                     output_0_ndim, output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_ThresholdedRelu, test_thresholdedrelu) {
  const float input_0[3][4][5] = {
      {{2.199613332748413, -0.28677186369895935, -0.8267228603363037,
        -0.24724821746349335, -0.16319778561592102},
       {0.5559070706367493, -0.08821795880794525, -0.14517150819301605,
        0.6337352395057678, -0.17607709765434265},
       {-0.424427330493927, 0.6914983987808228, -0.13273367285728455,
        1.2451356649398804, 0.17859169840812683},
       {-0.8421813249588013, -1.3258531093597412, 0.5058901906013489,
        -0.7071919441223145, -0.9059610962867737}},
      {{-1.0503228902816772, 1.0930521488189697, -0.00012340917601250112,
        -1.2563267946243286, 2.0139670372009277},
       {0.42438870668411255, -0.11979695409536362, 1.1514251232147217,
        -1.455343246459961, 0.172724187374115},
       {-0.7252241373062134, 0.7022019028663635, 0.44997307658195496,
        -0.6823985576629639, -0.7040276527404785},
       {-0.4611680507659912, 0.08627966791391373, 1.523433804512024,
        0.007119814399629831, -0.43447309732437134}},
      {{-0.26122844219207764, 0.6200371980667114, 0.3565771281719208,
        0.801928699016571, 0.977968156337738},
       {0.18629972636699677, -1.6461303234100342, -1.4362248182296753,
        -0.005677484441548586, 1.7280051708221436},
       {-0.04082930460572243, -0.6617946624755859, 1.5893296003341675,
        -1.1150885820388794, 0.8687620759010315},
       {-1.0718640089035034, -1.2521522045135498, 0.21459268033504486,
        -1.1051543951034546, -0.7219057679176331}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {{{2.199613332748413, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 2.0139670372009277},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}},
                                   {{0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0},
                                    {0.0, 0.0, 0.0, 0.0, 0.0}}};
  const float alpha = 2.0;
  ONNC_RUNTIME_thresholdedrelu_float(NULL, (float *)input_0, input_0_ndim,
                                     input_0_dims, (float *)output_0,
                                     output_0_ndim, output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_ThresholdedRelu, test_thresholdedrelu_default) {
  const float input_0[3][4][5] = {
      {{-1.0137571096420288, -1.4317655563354492, -0.2087932527065277,
        -0.452450692653656, 0.3145778179168701},
       {-0.26789239048957825, 0.7738074064254761, -0.3731836974620819,
        1.3199262619018555, -1.4260810613632202},
       {-3.1705338954925537, -0.4410865008831024, 1.198585867881775,
        -0.6123093962669373, 2.470120668411255},
       {1.833290934562683, -1.918383240699768, 0.624179482460022,
        0.6731799244880676, -0.27068594098091125}},
      {{-2.1560935974121094, 1.4362651109695435, -0.7825717329978943,
        -0.5979518294334412, 0.6297849416732788},
       {-1.4239648580551147, 0.5170861482620239, -0.7519809007644653,
        -0.4477272033691406, -1.1118658781051636},
       {-1.292775273323059, -0.39213526248931885, 0.8883212804794312,
        0.0190891046077013, 0.28452640771865845},
       {-0.16708600521087646, -0.8207708597183228, -0.9428131580352783,
        2.074347496032715, -1.7677873373031616}},
      {{0.08665767312049866, 0.7265524864196777, -0.0859079360961914,
        -0.16634586453437805, -0.17030325531959534},
       {0.4975901246070862, -0.47438979148864746, 1.572049617767334,
        -0.5454455018043518, -0.18214817345142365},
       {0.9938174486160278, 1.0579334497451782, 1.3223333358764648,
        -0.7209723591804504, 0.028867240995168686},
       {-0.7773098349571228, -1.148993968963623, 1.8774904012680054,
        -1.1102787256240845, 0.09377892315387726}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.0, 0.0, 0.0, 0.0, 0.0},
       {0.0, 0.0, 0.0, 1.3199262619018555, 0.0},
       {0.0, 0.0, 1.198585867881775, 0.0, 2.470120668411255},
       {1.833290934562683, 0.0, 0.0, 0.0, 0.0}},
      {{0.0, 1.4362651109695435, 0.0, 0.0, 0.0},
       {0.0, 0.0, 0.0, 0.0, 0.0},
       {0.0, 0.0, 0.0, 0.0, 0.0},
       {0.0, 0.0, 0.0, 2.074347496032715, 0.0}},
      {{0.0, 0.0, 0.0, 0.0, 0.0},
       {0.0, 0.0, 1.572049617767334, 0.0, 0.0},
       {0.0, 1.0579334497451782, 1.3223333358764648, 0.0, 0.0},
       {0.0, 0.0, 1.8774904012680054, 0.0, 0.0}}};
  const float alpha = 0;
  ONNC_RUNTIME_thresholdedrelu_float(NULL, (float *)input_0, input_0_ndim,
                                     input_0_dims, (float *)output_0,
                                     output_0_ndim, output_0_dims, alpha);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

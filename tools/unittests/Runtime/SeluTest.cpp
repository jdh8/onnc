#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Selu, test_selu_example) {
  const float input_0[3] = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {-3.7927231788635254, 0.0, 3.0};
  const float alpha = 2.0;
  const float gamma = 3.0;
  ONNC_RUNTIME_selu_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims,
                          alpha, gamma);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Selu, test_selu) {
  const float input_0[3][4][5] = {
      {{0.9427160620689392, -1.1139756441116333, -0.18158908188343048,
        0.7061741948127747, 1.1303702592849731},
       {-0.7792226672172546, -0.23847723007202148, 1.0651569366455078,
        -0.055104635655879974, 0.7195491194725037},
       {1.8404295444488525, -0.7097582221031189, 0.730888843536377,
        -1.8014471530914307, -1.2427009344100952},
       {0.3806905150413513, 1.3642033338546753, 0.07604391872882843,
        0.4176803231239319, -0.3053443729877472}},
      {{-0.6930050849914551, -1.2466843128204346, -0.06594893336296082,
        -0.10984131693840027, 1.463890552520752},
       {-0.11401408165693283, 1.8625456094741821, -1.8762519359588623,
        0.4919728636741638, 0.07179352641105652},
       {1.7976980209350586, 1.262170433998108, -0.3460390269756317,
        -0.1919499933719635, -0.48751601576805115},
       {0.011147256009280682, 0.8176984786987305, 0.3692084550857544,
        -0.41945579648017883, -0.3844125270843506}},
      {{1.8705418109893799, 0.18515191972255707, 0.48321980237960815,
        -0.12136511504650116, -0.28355544805526733},
       {0.174786776304245, -0.07766347378492355, 0.1797311156988144,
        1.2385737895965576, -0.09025628119707108},
       {1.7089382410049438, -0.4418812692165375, -0.5128669142723083,
        1.07181715965271, -0.4539249539375305},
       {-1.442344307899475, -0.7352345585823059, -0.7324731349945068,
        0.026370275765657425, -0.4292169511318207}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{2.828148126602173, -4.030491828918457, -0.9963362216949463,
        2.1185226440429688, 3.391110897064209},
       {-3.247424840927124, -1.2730404138565063, 3.1954708099365234,
        -0.321683406829834, 2.158647298812866},
       {5.521288871765137, -3.0494213104248047, 2.192666530609131,
        -5.009640693664551, -4.268378257751465},
       {1.1420714855194092, 4.092609882354736, 0.2281317561864853,
        1.2530410289764404, -1.578782558441162}},
      {{-2.9995737075805664, -4.275261878967285, -0.38292789459228516,
        -0.6241421699523926, 4.391671657562256},
       {-0.6465275287628174, 5.587636947631836, -5.081021308898926,
        1.4759185314178467, 0.21538057923316956},
       {5.393094062805176, 3.7865114212036133, -1.755090594291687,
        -1.0479111671447754, -2.3150997161865234},
       {0.03344176709651947, 2.4530954360961914, 1.1076253652572632,
        -2.055572986602783, -1.9148969650268555}},
      {{5.611625671386719, 0.55545574426651, 1.4496593475341797,
        -0.6857367753982544, -1.4813919067382812},
       {0.5243602991104126, -0.4483455419540405, 0.539193332195282,
        3.715721368789673, -0.5178179740905762},
       {5.126814842224121, -2.1430442333221436, -2.407341241836548,
        3.21545147895813, -2.1892175674438477},
       {-4.581762313842773, -3.1236419677734375, -3.1156883239746094,
        0.07911083102226257, -2.0938878059387207}}};
  const float alpha = 2.0;
  const float gamma = 3.0;
  ONNC_RUNTIME_selu_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims,
                          alpha, gamma);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Selu, test_selu_default) {
  const float input_0[3][4][5] = {
      {{0.6883239150047302, 0.22285568714141846, -0.4711384177207947,
        1.3343552350997925, -0.04092973470687866},
       {-0.5406700968742371, -1.0655168294906616, 0.1747237890958786,
        -0.9145936965942383, -0.9755344986915588},
       {-0.4621954560279846, 1.002355694770813, 1.0401177406311035,
        0.3315858542919159, 1.8797576427459717},
       {-0.10195372253656387, 1.3261760473251343, 0.8806298971176147,
        0.5995619893074036, -0.6821077466011047}},
      {{-0.4981219470500946, -0.7906778454780579, 1.057116150856018,
        -0.5412147641181946, -0.3524717092514038},
       {0.9305126070976257, -0.6480960845947266, 0.571679949760437,
        0.3525822162628174, 0.34562814235687256},
       {0.5082446932792664, 0.10156247764825821, 0.49972212314605713,
        -0.43155303597450256, 0.9228581190109253},
       {-0.221094012260437, 0.7436904311180115, 0.22325870394706726,
        1.028894305229187, 1.6137268543243408}},
      {{0.5873864889144897, 1.2944086790084839, 0.41480904817581177,
        0.2972451150417328, 2.5684282779693604},
       {0.5770878791809082, -1.2591664791107178, -0.1981210708618164,
        -0.2047141194343567, 0.4288754463195801},
       {0.1163812130689621, 3.141329526901245, 0.3610566258430481,
        -0.7394141554832458, 3.063493251800537},
       {1.5120447874069214, 1.0200515985488892, 1.1155070066452026,
        -0.17403046786785126, 0.20764818787574768}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{0.7232226133346558, 0.23415470123291016, -0.6605334281921387,
        1.4020084142684937, -0.07050582021474838},
       {-0.7342563271522522, -1.1523466110229492, 0.18358246982097626,
        -1.053665280342102, -1.0953121185302734},
       {-0.6506739854812622, 1.0531761646270752, 1.0928528308868408,
        0.3483975827693939, 1.9750633239746094},
       {-0.17041021585464478, 1.3934144973754883, 0.9252787232398987,
        0.6299604177474976, -0.8692916035652161}},
      {{-0.6897536516189575, -0.9607357978820801, 1.110713005065918,
        -0.7348138093948364, -0.5222461223602295},
       {0.9776905179023743, -0.8385419249534607, 0.6006647348403931,
        0.3704584836959839, 0.3631518483161926},
       {0.5340132117271423, 0.10671179741621017, 0.5250585675239563,
        -0.6162145137786865, 0.9696479439735413},
       {-0.3487343490123749, 0.7813962697982788, 0.23457814753055573,
        1.0810602903366089, 1.6955444812774658}},
      {{0.617167592048645, 1.3600364923477173, 0.43584027886390686,
        0.3123157322406769, 2.6986501216888428},
       {0.606346845626831, -1.2589914798736572, -0.31598225235939026,
        -0.32545891404151917, 0.4506198763847351},
       {0.12228185683488846, 3.30059814453125, 0.379362553358078,
        -0.9187940955162048, 3.218815565109253},
       {1.5887069702148438, 1.0717692375183105, 1.1720643043518066,
        -0.280818909406662, 0.21817615628242493}}};
  const float gamma = 0;
  const float alpha = 0;
  ONNC_RUNTIME_selu_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims,
                          alpha, gamma);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

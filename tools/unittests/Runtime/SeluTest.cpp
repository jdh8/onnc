#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_Selu, test_selu_example)
{
  const float   input_0[]      = {-1.0, 0.0, 1.0};
  const int32_t input_0_ndim   = 1;
  const int32_t input_0_dims[] = {3};
  float         output_0[3];
  const int32_t output_0_ndim   = 1;
  const int32_t output_0_dims[] = {3};
  const float   answer_0[]      = {-3.7927232, 0.0, 3.0};
  const float   alpha           = 2.0;
  const float   gamma           = 3.0;
  using dragonite::norm;

  ONNC_RUNTIME_selu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha,
                          gamma);
  ASSERT_TRUE(norm(answer_0, output_0, 3) <= 1e-5 * norm(answer_0, 3));
}

SKYPAT_F(Operator_Selu, test_selu)
{
  const float input_0[] = {
    -1.4912575,  0.4393917,   0.1666735,   0.63503146,  2.3831449,   0.94447947,  -0.91282225, 1.1170163,    -1.3159074,
    -0.4615846,  -0.0682416,  1.7133427,   -0.74475485, -0.82643855, -0.09845252, -0.6634783,  1.1266359,    -1.0799315,
    -1.1474687,  -0.43782005, -0.49803245, 1.929532,    0.9494208,   0.08755124,  -1.2254355,  0.844363,     -1.0002153,
    -1.5447711,  1.1880298,   0.3169426,   0.9208588,   0.31872764,  0.8568306,   -0.6510256,  -1.0342429,   0.6815945,
    -0.80340964, -0.6895498,  -0.4555325,  0.017479159, -0.35399392, -1.3749512,  -0.6436184,  -2.2234032,   0.62523144,
    -1.6020577,  -1.1043833,  0.05216508,  -0.739563,   1.5430146,   -1.2928569,  0.26705086,  -0.039282817, -1.1680934,
    0.5232767,   -0.17154633, 0.77179056,  0.82350415,  2.163236,    1.336528};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float   answer_0[]      = {
    -4.6494637, 1.3181751,  0.5000205,  1.9050944,   7.1494346,  2.8334384,  -3.591661,  3.351049,    -4.3906155,
    -2.218295,  -0.3957914, 5.140028,   -3.150896,   -3.3743699, -0.5625676, -2.9096599, 3.3799076,   -3.9622872,
    -4.095364,  -2.1273484, -2.3536487, 5.788596,    2.8482623,  0.26265374, -4.238221,  2.533089,    -3.7931986,
    -4.7198358, 3.5640893,  0.95082784, 2.7625763,   0.95618296, 2.5704918,  -2.870936,  -3.8670273,  2.0447836,
    -3.3132026, -2.9891887, -2.1953387, 0.052437477, -1.7887248, -4.482888,  -2.8476725, -5.350559,   1.8756943,
    -4.791111,  -4.011509,  0.15649524, -3.1360652,  4.629044,   -4.3530874, 0.8011526,  -0.23112738, -4.134245,
    1.5698301,  -0.9458324, 2.3153718,  2.4705124,   6.489708,   4.009584};
  const float alpha = 2.0;
  const float gamma = 3.0;
  using dragonite::norm;

  ONNC_RUNTIME_selu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha,
                          gamma);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

SKYPAT_F(Operator_Selu, test_selu_default)
{
  const float input_0[] = {-0.36918184, -0.23937918, 1.0996596,    0.6552637,   0.64013153,  -1.616956,    -0.024326125,
                           -0.7380309,  0.2799246,   -0.09815039,  0.9101789,   0.3172182,   0.78632796,   -0.4664191,
                           -0.94444627, -0.4100497,  -0.017020414, 0.37915173,  2.259309,    -0.042257152, -0.955945,
                           -0.34598178, -0.463596,   0.48148146,   -1.540797,   0.06326199,  0.15650654,   0.23218104,
                           -0.5973161,  -0.23792173, -1.424061,    -0.49331987, -0.54286146, 0.41605005,   -1.1561824,
                           0.7811981,   1.4944845,   -2.069985,    0.42625874,  0.676908,    -0.63743705,  -0.3972718,
                           -0.13288058, -0.29779088, -0.30901298,  -1.6760038,  1.1523316,   1.0796186,    -0.81336427,
                           -1.4664243,  0.5210649,   -0.57578796,  0.14195317,  -0.31932843, 0.69153875,   0.6947491,
                           -0.7255974,  -1.383364,   -1.5829384,   0.6103794};
  const int32_t input_0_ndim   = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float         output_0[60];
  const int32_t output_0_ndim   = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[] = {-0.54272586, -0.37427062, 1.1554134,    0.6884863,  0.67258686,  -1.4091132,  -0.042251788,
                            -0.9176324,  0.29411706,  -0.16436021,  0.9563259,  0.3333015,   0.8261956,   -0.6553415,
                            -1.0743835,  -0.59139425, -0.029670388, 0.39837512, 2.3738582,   -0.07274447, -1.0822005,
                            -0.51419944, -0.6522238,  0.50589305,   -1.3814964, 0.06646944,  0.16444159,  0.24395286,
                            -0.7906409,  -0.37225223, -1.3348643,   -0.684611,  -0.73649746, 0.43714422,  -1.2048514,
                            0.8208056,   1.5702565,   -1.5362489,   0.4478705,  0.71122795,  -0.8286879,  -0.57639056,
                            -0.21876092, -0.45278698, -0.46735343,  -1.4291234, 1.210756,    1.1343564,   -0.9786214,
                            -1.3524196,  0.5474834,   -0.7695875,   0.14915034, -0.4805995,  0.72660047,  0.7299736,
                            -0.90711707, -1.3172847,  -1.3970373,   0.64132625};
  const float gamma      = 1.0507009873554805;
  const float alpha      = 1.6732632423543772;
  using dragonite::norm;

  ONNC_RUNTIME_selu_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims, alpha,
                          gamma);
  ASSERT_TRUE(norm(answer_0, output_0, 60) <= 1e-5 * norm(answer_0, 60));
}

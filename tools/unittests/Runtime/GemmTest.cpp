#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Gemm, test_gemm_broadcast) {
  const float input_0[6][3] = {
      {0.3633002042770386, 0.3605981469154358, 0.7110720276832581},
      {0.667694091796875, 0.08235716819763184, 0.6889204382896423},
      {0.4637677073478699, 0.4307267665863037, 0.7612367868423462},
      {0.5980293154716492, 0.6096851229667664, 0.8499429225921631},
      {0.8485997319221497, 0.9124215841293335, 0.4978208839893341},
      {0.557277500629425, 0.32031136751174927, 0.9671844840049744}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {6, 3};
  const float input_1[4][6] = {
      {0.8942161798477173, 0.6767251491546631, 0.7785062789916992,
       0.2196206897497177, 0.8498902916908264, 0.37091606855392456},
      {0.13097518682479858, 0.0033637566957622766, 0.1886778324842453,
       0.7374900579452515, 0.3567022979259491, 0.6020061373710632},
      {0.6856430768966675, 0.774209201335907, 0.10286633670330048,
       0.2774330675601959, 0.5223842263221741, 0.7849869728088379},
      {0.8295427560806274, 0.652373194694519, 0.9851130843162537,
       0.9850947856903076, 0.5204707384109497, 0.18776699900627136}};
  const int32_t input_1_ndim = 2;
  const int32_t input_1_dims[] = {4, 6};
  const float input_2[1][1] = {{0.2648630738258362}};
  const int32_t input_2_ndim = 2;
  const int32_t input_2_dims[] = {1, 1};
  float output_0[3][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {3, 4};
  const float answer_0[3][4] = {{1.2309414148330688, 0.7407088279724121,
                                 1.0626310110092163, 1.2970553636550903},
                                {1.0032694339752197, 0.6807835102081299,
                                 0.7586977481842041, 1.0888335704803467},
                                {1.4640275239944458, 0.9452954530715942,
                                 1.3095810413360596, 1.6660230159759521}};
  const float alpha = 0.5;
  const float beta = 0.5;
  const int32_t transA = 1;
  const int32_t transB = 1;
  ONNC_RUNTIME_gemm_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)input_1, input_1_ndim, input_1_dims,
                          (float *)input_2, input_2_ndim, input_2_dims,
                          (float *)output_0, output_0_ndim, output_0_dims,
                          alpha, beta, transA, transB);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Gemm, test_gemm_nobroadcast) {
  const float input_0[3][6] = {
      {0.31065645813941956, 0.8935036063194275, 0.7923087477684021,
       0.023021429777145386, 0.17964603006839752, 0.975312352180481},
      {0.19302232563495636, 0.8497800230979919, 0.1990661919116974,
       0.8682509064674377, 0.10838402062654495, 0.28658634424209595},
      {0.1672857254743576, 0.15298837423324585, 0.5037593841552734,
       0.11832503229379654, 0.6361761689186096, 0.711587131023407}};
  const int32_t input_0_ndim = 2;
  const int32_t input_0_dims[] = {3, 6};
  const float input_1[6][4] = {{0.1360941082239151, 0.9427315592765808,
                                0.8156551718711853, 0.0992085263133049},
                               {0.008051830343902111, 0.829563319683075,
                                0.9112733006477356, 0.055886853486299515},
                               {0.8816947937011719, 0.4465968608856201,
                                0.3710899353027344, 0.3634408414363861},
                               {0.13866828382015228, 0.6121077537536621,
                                0.637343168258667, 0.1738501936197281},
                               {0.5342566967010498, 0.6484298706054688,
                                0.6214014291763306, 0.4754822552204132},
                               {0.6449761986732483, 0.45180103182792664,
                                0.9382582902908325, 0.6502941250801086}};
  const int32_t input_1_ndim = 2;
  const int32_t input_1_dims[] = {6, 4};
  const float input_2[3][4] = {{0.5470239520072937, 0.665585994720459,
                                0.09353917837142944, 0.2974879741668701},
                               {0.8571357727050781, 0.4529511332511902,
                                0.37676477432250977, 0.9797481894493103},
                               {0.8453333973884583, 0.18564845621585846,
                                0.7391623854637146, 0.23682507872581482}};
  const int32_t input_2_ndim = 2;
  const int32_t input_2_dims[] = {3, 4};
  float output_0[3][4];
  const int32_t output_0_ndim = 2;
  const int32_t output_0_dims[] = {3, 4};
  const float answer_0[3][4] = {{1.0116469860076904, 1.3123693466186523,
                                 1.2482856512069702, 0.6949304342269897},
                                {0.7144539952278137, 1.0799952745437622,
                                 1.1360368728637695, 0.7537918090820312},
                                {1.0643699169158936, 0.7508419752120972,
                                 1.170175552368164, 0.6154301166534424}};
  const float alpha = 0.5;
  const float beta = 0.5;
  const int32_t transA = 0;
  const int32_t transB = 0;
  ONNC_RUNTIME_gemm_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)input_1, input_1_ndim, input_1_dims,
                          (float *)input_2, input_2_ndim, input_2_dims,
                          (float *)output_0, output_0_ndim, output_0_dims,
                          alpha, beta, transA, transB);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4; ++i) {
    if (abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

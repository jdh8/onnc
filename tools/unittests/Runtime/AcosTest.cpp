#include <cmath>
#include <cstdlib>
#include <ctime>
#include <skypat/skypat.h>
#include <vector>

#define restrict
extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}
SKYPAT_F(Operator_Acos, test_acos_example) {
  const float input_0[3] = {-0.5, 0.0, 0.5};
  const int32_t input_0_ndim = 1;
  const int32_t input_0_dims[] = {3};
  float output_0[3];
  const int32_t output_0_ndim = 1;
  const int32_t output_0_dims[] = {3};
  const float answer_0[3] = {2.094395160675049, 1.5707963705062866,
                             1.0471975803375244};
  ONNC_RUNTIME_acos_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

SKYPAT_F(Operator_Acos, test_acos) {
  const float input_0[3][4][5] = {
      {{0.4010925590991974, 0.9829106330871582, 0.6486740708351135,
        0.06631746888160706, 0.014643908478319645},
       {0.662720263004303, 0.9733867049217224, 0.8129286170005798,
        0.566429615020752, 0.9542169570922852},
       {0.11754397302865982, 0.9742695689201355, 0.43992653489112854,
        0.2214299738407135, 0.6900221705436707},
       {0.04323418438434601, 0.5442636013031006, 0.5729554891586304,
        0.04143431410193443, 0.6254990100860596}},
      {{0.29015952348709106, 0.15438632667064667, 0.5487244725227356,
        0.6668699383735657, 0.0641997829079628},
       {0.43731003999710083, 0.45651930570602417, 0.6910029053688049,
        0.17075122892856598, 0.0228663869202137},
       {0.30578547716140747, 0.3612270653247833, 0.11092396080493927,
        0.5576241612434387, 0.1311345249414444},
       {0.763765811920166, 0.8423594832420349, 0.4907572567462921,
        0.5327041149139404, 0.22206079959869385}},
      {{0.08460056036710739, 0.18200989067554474, 0.93376624584198,
        0.07353822141885757, 0.22591358423233032},
       {0.44021984934806824, 0.668614387512207, 0.9456713199615479,
        0.6197949051856995, 0.4796261489391327},
       {0.5348896384239197, 0.59836345911026, 0.9627967476844788,
        0.17228488624095917, 0.16869507730007172},
       {0.8455765843391418, 0.2654414474964142, 0.6318796277046204,
        0.39612579345703125, 0.9579812288284302}}};
  const int32_t input_0_ndim = 3;
  const int32_t input_0_dims[] = {3, 4, 5};
  float output_0[3][4][5];
  const int32_t output_0_ndim = 3;
  const int32_t output_0_dims[] = {3, 4, 5};
  const float answer_0[3][4][5] = {
      {{1.1580870151519775, 0.18513920903205872, 0.8649553656578064,
        1.5044301748275757, 1.5561518669128418},
       {0.8463508486747742, 0.23122362792491913, 0.6216328740119934,
        0.9686293601989746, 0.3037654459476471},
       {1.4529800415039062, 0.22733911871910095, 1.1152794361114502,
        1.3475157022476196, 0.8092766404151917},
       {1.5275486707687378, 0.9952852725982666, 0.9606889486312866,
        1.5293501615524292, 0.895025372505188}},
      {{1.2764028310775757, 1.41579008102417, 0.9899585843086243,
        0.8407959342002869, 1.5065523386001587},
       {1.1181910037994385, 1.0967172384262085, 0.8079207539558411,
        1.3992042541503906, 1.547927975654602},
       {1.2600330114364624, 1.2012128829956055, 1.4596436023712158,
        0.9792754054069519, 1.439283013343811},
       {0.7016691565513611, 0.5691497921943665, 1.057837724685669,
        1.009003758430481, 1.3468687534332275}},
      {{1.4860944747924805, 1.3877662420272827, 0.3660002648830414,
        1.4971916675567627, 1.3429155349731445},
       {1.114952802658081, 0.8384524583816528, 0.3311430811882019,
        0.9023150205612183, 1.0705677270889282},
       {1.0064191818237305, 0.9293393492698669, 0.2736283838748932,
        1.3976476192474365, 1.4012906551361084},
       {0.563152015209198, 1.3021345138549805, 0.886820375919342,
        1.1635026931762695, 0.2909170985221863}}};
  ONNC_RUNTIME_acos_float(NULL, (float *)input_0, input_0_ndim, input_0_dims,
                          (float *)output_0, output_0_ndim, output_0_dims);
  bool is_correct;
  is_correct = true;
  for (int32_t i = 0; i < 3 * 4 * 5; ++i) {
    if (std::abs(((float *)output_0)[i] - ((float *)answer_0)[i]) > 1.0e-7) {
      is_correct = false;
      break;
    }
  }
  ASSERT_TRUE(is_correct);
}

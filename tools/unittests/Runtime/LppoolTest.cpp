#if defined(__GNUC__) || defined(_MSC_VER)
#  define restrict __restrict
#else
#  define restrict
#endif

extern "C" {
#include <onnc/Runtime/onnc-runtime.h>
}

#undef restrict

#include "norm.hpp"
#include <skypat/skypat.h>
SKYPAT_F(Operator_LpPool, l2norm)
{
  const float input_0[] = {
    -1.3923016,  -0.35469407, 0.977037,    -1.339038,   -0.20217432,  -0.5582838,  -1.5980574,   -1.3062304,
    0.22107233,  0.96040934,  -0.63977754, 0.081054285, -1.1093894,   0.08914532,  -0.65930253,  -0.9872552,
    -0.68314594, 0.04724608,  -0.7345478,  1.3008162,   0.25192308,   -1.1212053,  0.9527355,    -0.021904081,
    0.7888634,   -0.8536252,  -1.36821,    1.1680388,   -1.7963365,   0.3279606,   -0.96701,     -2.3381069,
    -0.3966558,  -0.50484264, 0.50239855,  -0.55180126, -0.043193683, -0.12840186, -1.1003311,   -0.5759803,
    -0.65973806, 0.699043,    -0.6670788,  0.37263435,  0.39578784,   -0.57390547, -0.17258279,  -1.3049749,
    0.33997488,  0.7481632,   0.61711335,  0.8991109,   -1.114771,    -0.54894036, -1.0050799,   -0.15850718,
    -1.7300812,  0.6470544,   1.4707705,   0.3984684,   0.27377707,   -0.31178683, -0.4440509,   -1.6139258,
    1.1063871,   -0.5521706,  -1.1990794,  0.35001203,  0.10205607,   0.7323099,   1.2572465,    -0.080714144,
    0.44937629,  0.33276856,  0.36316472,  -1.2550513,  -0.116576426, -0.69946474, -1.1252377,   -0.9016016,
    1.412003,    0.5436722,   0.5309645,   0.96768254,  0.6838886,    -1.8585155,  0.036991578,  0.19360732,
    1.5826277,   -0.1600233,  1.2017568,   0.34320593,  -0.5314494,   0.7672753,   0.43904337,   1.0802422,
    1.3600379,   -0.47002023, -0.5589987,  -0.3589907,  -0.630578,    0.23487124,  1.8413928,    0.43896335,
    -0.8212368,  -1.1472998,  -0.06404489, 0.3259565,   -1.1686459,   0.20104323,  -0.099038914, 1.1949319,
    0.09258669,  -0.7253046,  -1.2910552,  1.0863982,   0.9346751,    -0.87192273, 0.49178982,   1.2111621};
  const int32_t input_0_ndim   = 5;
  const int32_t input_0_dims[] = {1, 2, 3, 4, 5};
  float         output_0[48];
  const int32_t output_0_ndim   = 5;
  const int32_t output_0_dims[] = {1, 2, 2, 3, 4};
  const float   answer_0[] = {2.9750664, 3.277431,  3.1626031, 2.600447,  3.5048368, 3.78916,   2.827922,  2.2924964,
                            2.926679,  2.7108426, 1.8492976, 2.1734905, 2.2812955, 2.840338,  2.8109994, 2.2199109,
                            3.2482164, 3.5558758, 2.8923924, 2.4142299, 3.3038974, 3.3324778, 2.4011064, 2.3839498,
                            2.7676034, 1.5719563, 2.587545,  2.8827026, 2.8891737, 1.4858783, 1.9644189, 2.0251184,
                            2.7847016, 1.783857,  1.8635002, 1.8826824, 2.741892,  2.0426934, 2.9691622, 2.491526,
                            2.788463,  1.4092071, 2.3280814, 2.6288457, 2.8408072, 2.3539653, 1.7150201, 2.2637327};
  const int32_t kernel_shape[]         = {2, 2, 2};
  const int32_t number_of_kernel_shape = 3;
  const int32_t strides[]              = {1, 1, 1, 1, 1};
  const int32_t number_of_strides      = 5;
  const int32_t pads[]                 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const int32_t number_of_pads         = 10;
  const char    auto_pad[]             = "NOTSET";
  const int32_t p                      = 2;
  using dragonite::norm;

  ONNC_RUNTIME_lppool_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                            auto_pad, const_cast<int32_t*>(kernel_shape), number_of_kernel_shape, p,
                            const_cast<int32_t*>(pads), number_of_pads, const_cast<int32_t*>(strides),
                            number_of_strides);
  ASSERT_TRUE(norm(answer_0, output_0, 48) <= 1e-5 * norm(answer_0, 48));
}

SKYPAT_F(Operator_LpPool, l3norm)
{
  const float input_0[] = {
    1.0613648,   -0.120260976, -1.0726551,  0.94200677,  0.54158074,   -0.9525991,  0.20983745,   0.08460531,
    -0.22604313, 1.1493853,    0.47496828,  1.6425132,   0.77730054,   0.31164703,  0.8830733,    -2.9198558,
    0.39055133,  -0.064284734, 0.030723717, -0.8002343,  -1.3727285,   -1.1134435,  0.0020605985, 0.07331881,
    0.09636864,  1.4820336,    -0.7958256,  1.3045899,   0.505146,     -0.13062309, -1.9151286,   -0.16209047,
    0.68253136,  0.12679633,   0.19313098,  0.5995947,   -1.3950833,   -1.4707572,  -0.15244013,  -0.44747543,
    0.51819855,  -0.60352945,  2.0005817,   2.1815608,   -0.95041144,  -0.7039484,  -0.36900592,  -0.70680064,
    0.15803172,  -0.22403234,  -1.819577,   0.05802611,  0.74590933,   -0.10445482, -0.15788086,  0.2464058,
    0.09447758,  0.4099506,    0.24530332,  1.0783457,   -0.8967209,   0.44002673,  0.071379565,  -0.13582663,
    0.1917665,   -0.043788064, 0.9416152,   -0.17735177, -1.6118122,   0.79883957,  -0.56208974,  -0.7716585,
    -0.48624563, -0.39703348,  -0.3871862,  1.5691906,   -0.4715681,   -0.5677677,  -0.64432174,  1.153931,
    -0.44273096, -0.8275536,   0.42980427,  -0.55672264, -0.010714097, 1.4029727,   2.3704634,    0.28045002,
    1.0398588,   0.9538123,    2.1324008,   1.6553608,   1.0848876,    -0.16452724, 0.016623098,  0.6010265,
    -0.94206125, 0.8601002,    -0.34091285, -0.27116853, -0.75049686,  0.30090263,  0.31339288,   1.5826643,
    -0.9651312,  -0.73754394,  0.025185673, -0.7084421,  1.6091963,    0.84554183,  1.0350736,    0.8271684,
    -1.3566701,  0.90768504,   0.30805236,  -0.03259224, -0.8655403,   1.1112782,   -1.0957724,   -0.1928156};
  const int32_t input_0_ndim   = 5;
  const int32_t input_0_dims[] = {1, 2, 3, 4, 5};
  float         output_0[48];
  const int32_t output_0_ndim   = 5;
  const int32_t output_0_dims[] = {1, 2, 2, 3, 4};
  const float   answer_0[] = {2.139784,  1.7490387, 1.6425934, 1.3850745,  2.5302815, 1.9964384, 1.4707385, 1.3368664,
                            3.4042203, 2.236017,  1.5880857, 1.1007622,  2.0395796, 2.335244,  2.7631292, 2.2498665,
                            2.5818887, 1.569357,  1.509925,  0.54360235, 2.5198174, 1.8855587, 1.588033,  1.1123006,
                            2.6388698, 2.4614942, 1.7752001, 1.901146,   3.1677017, 2.7399533, 1.8943814, 1.8958727,
                            2.709495,  2.0122275, 1.3724749, 1.2575364,  2.6004972, 2.4329746, 2.1483915, 2.2766087,
                            3.1876435, 2.8261755, 2.1683671, 1.9613597,  2.6016216, 2.312662,  1.9908061, 1.2934519};
  const int32_t kernel_shape[]         = {2, 2, 2};
  const int32_t number_of_kernel_shape = 3;
  const int32_t p                      = 3;
  const int32_t strides[]              = {1, 1, 1, 1, 1};
  const int32_t number_of_strides      = 5;
  const int32_t pads[]                 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const int32_t number_of_pads         = 10;
  const char    auto_pad[]             = "NOTSET";
  using dragonite::norm;

  ONNC_RUNTIME_lppool_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                            auto_pad, const_cast<int32_t*>(kernel_shape), number_of_kernel_shape, p,
                            const_cast<int32_t*>(pads), number_of_pads, const_cast<int32_t*>(strides),
                            number_of_strides);
  ASSERT_TRUE(norm(answer_0, output_0, 48) <= 1e-5 * norm(answer_0, 48));
}

SKYPAT_F(Operator_LpPool, l1norm)
{
  const float input_0[] = {
    0.50099146,   -1.0846809,   1.022123,    0.98855615,  -0.1413537,  1.1502787,    -0.53316194, 2.3207242,
    -0.016474789, 1.2317852,    -0.4992919,  0.1865768,   -1.9144108,  -0.34737426,  1.6841148,   -1.2396994,
    -0.32203105,  -0.06930297,  -0.24696612, 0.5699919,   0.3224209,   -0.056207385, 1.0409049,   1.5596628,
    -0.3460288,   -0.09696061,  0.068434335, -0.6006921,  -0.6256596,  -1.1518704,   0.75288904,  0.3402743,
    -0.44487447,  -0.71869415,  -0.912386,   -1.33206,    -1.3082894,  -0.55175227,  -0.6207887,  -0.48730242,
    0.542026,     0.14650443,   0.55924493,  0.45866454,  0.7464982,   1.9194261,    0.88590777,  0.8228715,
    -1.7944709,   0.0029885692, 0.20208792,  -0.8788213,  0.18798172,  0.9872029,    -0.46849537, -2.6651585,
    2.1569252,    -1.9977802,   0.1675194,   -1.4351246,  -1.4360651,  -0.40778616,  -1.397616,   1.0944794,
    -0.41164348,  -0.9311862,   0.113416314, -1.7335026,  0.022493642, -1.1325392,   0.41840717,  -0.5483324,
    1.500846,     -0.04573103,  0.71942836,  0.26395154,  -0.5057311,  -2.9540558,   -0.78222525, -2.8384733,
    -0.26129305,  2.1579359,    1.1965791,   -0.18935682, -0.8692691,  -1.2404698,   0.6338032,   -0.6359278,
    0.9711664,    -0.16251609,  -0.6121509,  -1.9618266,  -0.37886566, 0.20918642,   -0.071917,   0.116224214,
    0.20522173,   -0.30409712,  -0.7132939,  0.018118057, 0.3605297,   -0.22363219,  -1.5370557,  0.0012527938,
    -0.31153277,  -1.2521507,   0.9032741,   0.35633886,  0.63504624,  0.44927698,   -0.5802118,  0.29330313,
    0.53797424,   -0.31896728,  0.7930788,   -1.5770576,  -1.0971744,  -0.22061433,  -0.83147913, -0.9883651};
  const int32_t input_0_ndim   = 5;
  const int32_t input_0_dims[] = {1, 2, 3, 4, 5};
  float         output_0[48];
  const int32_t output_0_ndim   = 5;
  const int32_t output_0_dims[] = {1, 2, 2, 3, 4};
  const float   answer_0[]     = {3.8131359, 6.7269287, 8.174798,  6.0613914, 3.6278677, 6.409149,  6.9889045, 6.688359,
                            5.981112,  5.137512,  4.9141636, 5.5876184, 4.0378876, 4.1807675, 7.4621716, 6.685843,
                            5.144801,  4.229857,  6.1824474, 6.661768,  9.636506,  7.866699,  5.676594,  5.797513,
                            7.1819553, 8.276567,  7.2411222, 4.853464,  6.459593,  7.5065207, 5.4977193, 3.334978,
                            4.631846,  8.358976,  6.8883014, 5.3983736, 7.033089,  7.6445475, 5.522723,  3.5894172,
                            7.47719,   5.701314,  4.043473,  3.611155,  6.4431705, 4.999078,  3.5144782, 3.9444056};
  const int32_t kernel_shape[] = {2, 2, 2};
  const int32_t number_of_kernel_shape = 3;
  const int32_t p                      = 1;
  const int32_t strides[]              = {1, 1, 1, 1, 1};
  const int32_t number_of_strides      = 5;
  const int32_t pads[]                 = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  const int32_t number_of_pads         = 10;
  const char    auto_pad[]             = "NOTSET";
  using dragonite::norm;

  ONNC_RUNTIME_lppool_float(nullptr, input_0, input_0_ndim, input_0_dims, output_0, output_0_ndim, output_0_dims,
                            auto_pad, const_cast<int32_t*>(kernel_shape), number_of_kernel_shape, p,
                            const_cast<int32_t*>(pads), number_of_pads, const_cast<int32_t*>(strides),
                            number_of_strides);
  ASSERT_TRUE(norm(answer_0, output_0, 48) <= 1e-5 * norm(answer_0, 48));
}
